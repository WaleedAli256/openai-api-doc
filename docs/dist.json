{
  "openapi": "3.0.0",
  "info": {
    "title": "Combined API Documentation",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/api/account/general/create": {
      "post": {
        "tags": [
          "AccountGeneral"
        ],
        "summary": "Account - General - Create",
        "description": "1. \"name\": This specifies the name of the endpoint that is being used. Here \"Account - General - Create\" conveys that this endpoint is used to create a general account.\n\n2. \"request\" - This object contains all the necessary details to make the request to the server.\n\n   - \"auth\" - This details about the type of authentication used for the request. It specifies the 'bearer' token type of authentication.\n     - \"type\" - Specifies the type of authentication. In this case, it's 'bearer'.\n     - \"bearer\" - This is an array of bearer tokens to authenticate the request. Each object in this array has:\n       - \"key\" - The key of the bearer token. Should be 'token' in this case.\n       - \"value\" - The value of the bearer token or the BearerToken itself. \n       - \"type\" - The datatype of the bearer token. Should be 'string'.\n\n   - \"method\" - Represents the HTTP method to be used when making the request. Here, it's \"POST\" method which implies we are sending data to be processed to a specified resource.\n\n   - \"url\" - This is the link to the API endpoint. This is where the request will be made.\n\n   - \"headers\" - This is an array of headers to be included in the request. Here It's empty and disabled.\n\n   - \"body\" - This contains the body of the request.\n     - \"mode\" - Specifies that the raw data type is being sent.\n     - \"raw\" - Contains the raw data in JSON format to be sent along with the request.\n       - \"email\" - The email of the user who is creating the account.\n       - \"phone\" - The phone number of the user.\n       - \"accountType\" - The type of the account. In this case, it's 'User'.\n       - \"password\" - The password for the account.\n       - \"zipcode\" - The zipcode of the area where the user is located. This information may be used for regional services or account recovery.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"email\\\":\\\"email\\\",\\\"phone\\\":\\\"phone\\\",\\\"accountType\\\":\\\"User\\\",\\\"password\\\":\\\"password\\\",\\\"zipcode\\\":\\\"95126\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "en-US"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/general/login": {
      "post": {
        "tags": [
          "AccountGeneral"
        ],
        "summary": "Account - General - Login Phone",
        "description": "This endpoint is named \"Account - General - Login Phone\". It is a POST request used for authenticating a user's phone-based login on the account/general resource.\n\nThe endpoint uses Bearer Authentication. The bearer token is denoted by the \"token\" key with the string type value \"BearerToken\". This token is passed as a header in the format: Bearer (Access token).\n\nThe URL for the endpoint is http://localhost:3000/api/account/general/login. It represents a local server environment which receives the request, handles it by checking the account's general data, and authenticates login.\n\nThis endpoint doesn't require any additional headers as highlighted in the headers field with the key and value set as default and empty, but it's not active as the disabled property is set to true.\n\nThe request body is in JSON format, and it should be sent in raw mode. The data in the body should include two properties: \"phone\" and \"password\". Both are strings that represent a user's phone number and password respectively. These inputs are essential for the phone-based login protocol.\n\nPlease note that this endpoint's functionality, response, or actions will vary depending on the handled data server-side. Make sure to replace the placeholders (\"BearerToken,\" \"phone,\" and \"password\") with actual user-specific values while testing or using this endpoint.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"phone\\\":\\\"phone\\\",\\\"password\\\":\\\"password\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/general/forgot": {
      "post": {
        "tags": [
          "AccountGeneral"
        ],
        "summary": "Account - General - Forgot Phone",
        "description": "1. \"name\": This represents the label given to the particular endpoint. Here, it's named as \"Account - General - Forgot Phone\", plainly indicating this endpoint is related to a feature where a user can recover their account if they forgot their phone.\n\n2. \"request\": This object contains all information for making the HTTP request. \n\n3. \"auth\": This object holds the authorization method and token. \n   - \"type\": This field represents the type of the authentication. Here, it's bearer authentication.\n   - \"bearer\": This array contains information about the bearer token.\n     - \"key\": This is the name of the key, which is \"token\".\n     - \"value\": This is the placeholder for the actual token value, denoted as \"BearerToken\".\n     - \"type\": This represents the datatype of the token, which is a string.\n\n4. \"method\": This key represents the HTTP method to be used. For this endpoint, POST method should be used.\n\n5. \"url\": This is the URL where HTTP request should be made, i.e., \"http://localhost:3000/api/account/general/forgot\".\n\n6. \"headers\": This is an array of objects where each object represents a custom HTTP header. \n   - \"key\": This represents the name of the HTTP header, which is \"Client-UUID\"\n   - \"value\": This is the placeholder for the actual headers' value, represented as \"ClientUUID\".\n   - \"type\": This is set to \"default\" indicating this is a standard header.\n\n7. \"body\": This object holds data that will be sent with the HTTP request.\n   - \"mode\": This defines how data will be sent. In this case, it is raw, meaning the data is sent as it is, without any encoding.\n   - \"raw\": This holds the actual data that will be sent. Here, a JSON object containing a phone key with a placeholder value \"phone\" is being sent.\n   \nPlease replace placeholder values (like \"BearerToken\", \"ClientUUID\", and \"phone\") with actual data when performing API calls.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"phone\\\":\\\"phone\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Client-UUID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "ClientUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/general/session": {
      "get": {
        "tags": [
          "AccountGeneral"
        ],
        "summary": "Account - General - Session - Get Account Type",
        "description": "1. `name`: This field specifies the name of the endpoint which is \"Account - General - Session - Get Account Type\". This indicates that the endpoint is used to fetch the type of an account, and it is generally related to a session.\n\n2. `request`: This field contains information about the type of request, authorization required, the URL to be hit, header information and body content.\n\n3. `request.auth`: This section outlines the type of authentication needed to make the request to this endpoint. The `type` is \"bearer\" which means it uses bearer authentication. \n\n4. `request.auth.bearer`: This is an array that carries information about the bearer token required for authentication. The `key` is \"token\" and its respective `value` should be the BearerToken to be provided.\n\n5. `request.method`: This stands for the HTTP method type the endpoint uses. Here it is a \"GET\" request, which is used for retrieving data from the specified resource.\n\n6. `request.url`: This shows the URL or the location of the resource where the request will be sent. In this description, it is specified to hit \"http://localhost:3000/api/account/general/session\" with query parameters for `accountId`,`sessionId` & `get`.\n\n7. `request.headers`: This is an array of objects and every object contains information about a header that should be sent with the request. In this description, the key and value of the header aren't specifically set and thus, the header is disabled.\n\n8. `request.body`: This field contains information about the body of the request. The `mode` is set to \"raw\", however, the `raw` field is empty indicating no specific data needs to be sent in the body of the request.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "accountId"
          },
          {
            "name": "sessionId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "sessionId"
          },
          {
            "name": "get",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "accountType"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/general/reset": {
      "put": {
        "tags": [
          "AccountGeneral"
        ],
        "summary": "Account - General - Reset Password",
        "description": "This endpoint is related to account management, specifically the functionality of resetting passwords. Here are the details:\n\n1. **Endpoint Name:** The name of this endpoint is \"Account - General - Reset Password\". It indicates that this endpoint supports resetting of account passwords.\n\n2. **Authentication:** The endpoint uses Bearer Token authentication. You should include a Bearer Token in the 'token' field in the header for valid authentication. The value provided here is just a placeholder (i.e., \"BearerToken\").\n\n3. **HTTP Method:** This endpoint uses the PUT HTTP method, which is typically used for updating resources.\n\n4. **URL:** This is the URL that you need to call in order to access this function.\n\n5. **Headers:** Headers for the request are mentioned, but the key and value are both blank and it's disabled. Based on the current data this is not required and you could remove it from the request.\n\n6. **Request Body:** The request contains three parameters to be included in the body of the request:\n\n   - **sessionId:** Representing session identification, to keep track of the user's interaction with the API.\n   \n   - **email:** The user's email address associated with the account.\n   \n   - **password:** The new password that the user wants to set for the account. The example value provided in JSON format is \"helloworld\". \n\nPlease replace placeholder values with actual values when making a request to this endpoint.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"sessionId\\\":\\\"sessionId\\\",\\\"email\\\":\\\"email\\\",\\\"password\\\":\\\"helloworld\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/general/logout": {
      "post": {
        "tags": [
          "AccountGeneral"
        ],
        "summary": "Account - General - Logout",
        "description": "The provided data includes the details of the \"Account - General - Logout\" endpoint request:\n\n1. `name`: This indicates the name of the endpoint. Here, it is \"Account - General - Logout\". This corresponds to user's logging out from a general account.\n\n2. `request`: This includes all the information needed to make the request.\n\n    - `auth`: Specifies the authentication type and details required for accessing the endpoint.\n    - `type`: \"bearer\" indicates that the authentication scheme implemented in this API requires a Bearer token to be sent in headers. This token is usually generated during the login process.\n    - `key` and `value`: \"token\" and \"sessionId\" respectively represent the actual token key-value pair that needs to be passed with the authentication. Type defines the data type of the token, here, it is a string.\n    \n3. `method`: Indicates the HTTP method to be used when making a request to this endpoint. Here, it is a \"POST\" request, which is mostly used when we want to send some data to the server, like, in this case, to logout from an account.\n\n4. `url`: This specifies the endpoint URL where the request is to be sent. Here, it is \"http://localhost:3000/api/account/general/logout\".\n\n5. `headers`: They define the operating parameters of an HTTP transaction. In this case, an empty default header is set, which is disabled. \n\n6. `body`: This contains the data that needs to be sent as the body of the POST request.\n    - `mode`: The value \"raw\" indicates that the contents are sent as is, without any specific structuring or encoding like form-data or x-www-form-urlencoded.\n    - `raw`: This field includes raw request body data which contains two parameters \"sessionId\" and \"accountId\". They represent the unique session ID and account ID associated with the user which will be used to logout from the account.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/keys/create": {
      "post": {
        "tags": [
          "AccountKeys"
        ],
        "summary": "Account - Keys - Create",
        "description": "Endpoint Name: \"Account - Keys - Create\"\n\nThis is an endpoint to create a key for a specified account. Below is the detailed information about every data used in the request for this endpoint:\n\n1. **auth**: This is used for authorization purpose. \n\n   a. **type:** The type field specifies the kind of authorization being used, which is 'bearer' in this case.\n   \n   b. **bearer:** It's an array that holds the bearer token information. \n\n   - **key:** Specifies the identifier for the bearer token which is denoted as 'token'. \n   \n   - **value:** Denotes the actual bearer token value. Replace 'BearerToken' with your actual bearer token.\n   \n   - **type:** The type of the data the token represents. It's a string in this case.\n\n\n2. **method**: This represents the HTTP method to be used for this request. Here it's 'POST', which means we are sending data to be processed to a specified resource.\n\n3. **url**: The URI where the request is being sent. In this case, it's http://localhost:3000/api/account/keys/create, where a new key will be created for the account.\n\n4. **headers**: It represents metadata sent with the HTTP request. \n\n    a. **key:** Specify your header key here. \n\n    b. **value:** The value of the corresponding header key goes here. \n\n    c. **type:** The type of data the header value represents, which is 'default' in this case. \n\n    d. **disabled:** If set to true, the header will not be sent with the request.\n\n5. **body**: Contains data to be sent to the server.\n\n   a. **mode:** Specifies how you want to send the data. Value 'raw' means you are sending the data as it is.\n\n   b. **raw:** This contains actual data being sent. \n\n      - **accountId:** This should be replaced with the actual account id. \n      - **sessionId:** Here goes the actual session id.\n      - **country, region, city, postal:** The geographical information about where the request is being sent from.\n      - **latitude, longitude:** The geographical coordinates from where the request is being sent.\n      - **ipAddress:** IP address of the client from where the request originated.\n",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"accountId\\\":\\\"accountId\\\",\\\"sessionId\\\":\\\"sessionId\\\",\\\"country\\\":\\\"United States\\\",\\\"region\\\":\\\"California\\\",\\\"city\\\":\\\"San Francisco\\\",\\\"postal\\\":\\\"94109\\\",\\\"latitude\\\":\\\"-123.423\\\",\\\"longitude\\\":\\\"123.123\\\",\\\"ipAddress\\\":\\\"12.45.67.89.0\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/keys/update": {
      "put": {
        "tags": [
          "AccountKeys"
        ],
        "summary": "Account - Keys - Update",
        "description": "This endpoint is titled \"Account - Keys - Update\" and it's used to update the specific keys related to an account in a system. It sends a PUT HTTP request to the given URL, \"http://localhost:3000/api/account/keys/update\". PUT is a method used to update resource available on the server. Here is a detailed explanation about each component in the request:\n\n1. `auth`: This object sets the authorization strategy for your request. Here, it's a bearer token authorization. It contains a bearer token string which needs to be passed in the 'token' key.\n\n2. `method`: This field is for specifying the HTTP method. In this case, it's a PUT method which is used for updating existing resources.\n\n3. `url`: This is the endpoint URL where the request will be sent. Here, it's running on localhost on port 3000.\n\n4. `headers`: This is a list where you define request headers. Here, we have a \"Client-UUID\" key with a default string value, which is likely used to uniquely identify the client.\n\n5. `body`: This is the request payload, it contains necessary information to update an account's keys. The 'mode' property is set as 'raw', implying that you have to provide a input JSON object in 'raw' format.\n\n    - `keysId`: Unique identifier for the keys associated with an account.\n    - `sessionId`: The session identifier.\n    - `accountId`: The account identifier.\n    - `country`: The country associated with the key's location (in this case, \"United States\").\n    - `region`: The region associated with the key's location (here, \"California\").\n    - `city`: The city associated with the key's location (here, \"San Jose\").\n    - `postal`: The postal code associated with the key's location.\n    - `latitude` and `longitude`: Geographical coordinates for the key's location.\n    - `ipAddress`: The IP address associated with the request to update the keys.\n    \nIt's important to provide valid data for all these fields for the request to be processed correctly.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"keysId\\\":\\\"f7e29500-b1a9-4d5a-a68b-23ece984b2d4\\\",\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\",\\\"country\\\":\\\"United States\\\",\\\"region\\\":\\\"California\\\",\\\"city\\\":\\\"San Jose\\\",\\\"postal\\\":\\\"94109\\\",\\\"latitude\\\":\\\"-123.423\\\",\\\"longitude\\\":\\\"123.123\\\",\\\"ipAddress\\\":\\\"12.45.67.89.0\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Client-UUID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "ClientUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/keys/get": {
      "get": {
        "tags": [
          "AccountKeys"
        ],
        "summary": "Account - Keys - Get",
        "description": "The provided endpoint contains detailed information about how to retrieve account keys using a GET request. Here's a detailed explanation for each data point:\n\n1. \"name\": This represents the name of the endpoint. In this case, the name is \"Account - Keys - Get\", signifying that this endpoint is utilized to retrieve keys associated with a specific account.\n\n2. \"request\": This field specifies the type of the request, the associated authorization details, the target URL of the request, headers, and the body. Each attribute under this field is as follows -\n\n   a. \"auth\": The \"auth\" field contains details about the authorization required to use this API. It includes type of the authorization, which is \"bearer\" and the object array \"bearer\" that includes the \"key\", which is the authorization token name, \"value\", which is the bearer token, and \"type\" which is the datatype of the token.\n\n   b. \"method\": This is the request method, which for the provided endpoint is GET. This means data is being retrieved or 'got' from the server.\n\n   c. \"url\": This is the URL where the API request would be sent. The URL parameters include keysId, sessionId, and accountId. These parameters are used to specify a unique set of keys, session, and account respectively that are targeted by this request.\n\n   d. \"headers\": Headers let the server and client pass additional information with an HTTP request. In this case, no key-value pairs are provided and it's set to default, meaning no custom headers are being used unless they are disabled.\n\n   e. \"body\": The \"body\" field provides the request's body. As per the provided data, \"mode\" suggests it's in \"raw\" form. However, since the request method is GET, the \"raw\" body is empty.\n\nIf you're using this API, make sure to replace the dummy \"token\", \"keysId\", \"sessionId\", and \"accountId\" with actual valid values.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "keysId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "keysId"
          },
          {
            "name": "sessionId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "sessionId"
          },
          {
            "name": "accountId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "accountId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/keys/all": {
      "get": {
        "tags": [
          "AccountKeys"
        ],
        "summary": "Account - Keys - Get All",
        "description": "This endpoint is called \"Account - Keys - Get All\". It's responsible for fetching all the keys related to a particular account.\n\nHere is a description of all the elements in the endpoint:\n\n1. **name:** This is the name of the endpoint. This is how you would refer to the endpoint in the documentation or when discussing it with other developers. In this case, the name indicates that this endpoint is used to get all keys for a given account.\n\n2. **request:** This object contains all information required to make the HTTP request.\n\n3. **auth:** This is the authorization method that is used when making the request. For this endpoint, the authorization is of the type \"bearer\" which means it uses a bearer token for authorization. A bearer token is a type of access token that is issued to the client.\n\n4. **bearer:** This is an array of objects that contains the bearer token for the request. Each object has a \"key\", \"value\", and \"type\". The \"key\" is the name given to the token, the \"value\" is the actual value of the token, and the \"type\" is the data type of the token.\n\n5. **method:** This is the HTTP method used for the request. In this case, it's a \"GET\" request, which means data is being retrieved from the server. \n\n6. **url:** This is the URL where the request will be sent. In our case, it's \"http://localhost:3000/api/account/keys/all/?sessionId=sessionId&accountId=accountId\". It includes query parameters for \"sessionId\" and \"accountId\", presumably used to identify the relevant session and account.\n\n7. **headers:** This is an array of objects, each representing a header that will be included in the request. Currently, the endpoint provides a default empty header which is disabled. Headers can include metadata about the request or other necessary information.\n\n8. **body:** This is the body of the request. For this endpoint, the \"body\" is set as \"raw\", but no data is needed or included as part of the request since it's a \"GET\" request.\n\nThis is a high-level overview of the endpoint data. For all specific data usage, please refer to the application's API documentation or any inline comments provided in the application code.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "sessionId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "sessionId"
          },
          {
            "name": "accountId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "accountId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/keys/delete": {
      "post": {
        "tags": [
          "AccountKeys"
        ],
        "summary": "Account - Keys - Delete",
        "description": "The data provided describes the details of an Endpoint (in an API) for Account - Keys - Delete operation. Here's a detailed description of each datapoint:\n\n1. **name**: This represents the name of the endpoint, which in this case is \"Account - Keys - Delete\". This endpoint is designed to delete keys from a specific account.\n   \n2. **request**: This encapsulates all the details needed to make the actual HTTP request.\n   \n3. **auth**: This field describes the authorization details used for the request. It uses a bearer token for authorization. \n\n    - **type**: The type of authentication applied, which is \"bearer\" in this case.\n   \n    - **bearer**: This is an array containing bearer token details. Each object inside the bearer array includes:\n\n        - **key**: The key is set as \"token\".\n       \n        - **value**: It holds the actual token value, denoted as \"sessionId\".\n       \n        - **type**: Defines the datatype of the value of the key, here it is \"string\".\n\n4. **method**: The HTTP method used for the request. In this case, the request method is POST which is typically used to send data to the server.\n\n5. **url**: The URL where the API request is to be sent. In this case, it's \"http://localhost:3000/api/account/keys/delete\".\n\n6. **headers**: An array containing the details of the headers to be sent along with the request. This example has a default header with no key-value pair.\n\n7. **body**: Contains the details of the body to be sent along with the request.\n    \n    - **mode**: This field tells what type of body is being sent with the request, here it's \"raw\".\n        \n    - **raw**: This contains the raw data in the form of a JSON object to be sent in the body of the request. It contains three fields\n \n        - **sessionId**: String representing the session identifier.\n       \n        - **accountId**: String representing the account identifier.\n       \n        - **keysId**: String representing the keys identifier to delete from the account.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\",\\\"keysId\\\":\\\"keysId\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/location/create": {
      "post": {
        "tags": [
          "AccountLocation"
        ],
        "summary": "Account - Location - Create",
        "description": "This endpoint is referred to as \"Account - Location - Create\". It uses a \"POST\" method for creating a new location entry for a specific account. Below is the detailed description of each field in this endpoint.\n\n1. **name**: This field indicates the name of this endpoint, which is \"Account - Location - Create\".\n\n2. **request**: This field contains all the necessary information required to make a request to this endpoint.\n\n3. **auth**: This field specifies the authentication method needed for this endpoint. In this case, it's 'Bearer' authentication and the token is provided as the value.\n\n    a. **type**: The type of authorization required which is 'Bearer'.\n    \n    b. **bearer**: An array containing the key-value pair for bearer token. The key is 'token' and the value is 'BearerToken'. The type confirms the value is a string format.\n\n4. **method**: The HTTP method used for the request. For this endpoint, it's \"POST\".\n\n5. **url**: The URL for the request is 'http://localhost:3000/api/account/location/create'.\n\n6. **headers**: An array that contains the key/value pairs to be sent in the header of the request. In this case, it's empty and disabled.\n   \n7. **body**: This field contains the data to be sent with the request. \n\n    a. **mode**: Specifies the mode of the body of the request. Here it is in 'raw' format.\n    \n    b. **raw**: The raw data to be included in the body of the request, described in JSON format. It contains the following keys:\n\n            - accountId: Identifies the account for which the location is to be created.\n            - sessionId: Identifies the session related to the account.\n            - country: The country of the location (e.g., \"United States\").\n            - region: The region of the location (e.g., \"California\").\n            - city: The city of the location (e.g., \"San Francisco\").\n            - postal: The postal code of the location (e.g., \"94109\").\n            - latitude: The geographical latitude of the location (e.g., \"-123.423\").\n            - longitude: The geographical longitude of the location (e.g., \"123.123\").\n            - ipAddress: The IP address related to the location (e.g., \"12.45.67.89.0\").\n\nThus, this endpoint is used to create a location entry for an account with the provided attributions in JSON format within the body of the request. The endpoint requires 'Bearer' authentication and the request is of 'POST' type.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"accountId\\\":\\\"accountId\\\",\\\"sessionId\\\":\\\"sessionId\\\",\\\"country\\\":\\\"United States\\\",\\\"region\\\":\\\"California\\\",\\\"city\\\":\\\"San Francisco\\\",\\\"postal\\\":\\\"94109\\\",\\\"latitude\\\":\\\"-123.423\\\",\\\"longitude\\\":\\\"123.123\\\",\\\"ipAddress\\\":\\\"12.45.67.89.0\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/location/update": {
      "put": {
        "tags": [
          "AccountLocation"
        ],
        "summary": "Account - Location - Update",
        "description": "This endpoint is titled \"Account - Location - Update\". It gives you the ability to update the location details of a specific account. The request uses a 'PUT' method which indicates this action of modification.\n\nThe request is authenticated with a token, provided as a \"bearer\" type. The key for this authentication method is simply called \"token\" and the value it uses is named \"BearerToken\". The type of value it requires is a string.\n\nThe request URL is \"http://localhost:3000/api/account/location/update\".\n\nThe header of the request contains a \"Client-UUID\". This is a default type of key that holds \"ClientUUID\" as a value. It aids in uniquely identifying each client connection.\n\nThe request body uses the \"raw\" mode and contains all the information related to the account location to be updated. The individual data descriptions are as follows:\n\n- \"locationId\": a unique identifier for a particular location\n- \"sessionId\": a unique identifier for the current session\n- \"accountId\": a unique identifier for the specific account\n- \"country\": the name of the country of the location\n- \"region\": the name of a specific region within the country\n- \"city\": the name of the city \n- \"postal\": the postal or zip code \n- \"latitude\": the latitude coordinate for the location \n- \"longitude\": the longitude coordinate for the location \n- \"ipAddress\": the IP address of the user updating the location\n\nAll data values in the body are assumed to be strings, and as such they must be enclosed in quotes.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"locationId\\\":\\\"f7e29500-b1a9-4d5a-a68b-23ece984b2d4\\\",\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\",\\\"country\\\":\\\"United States\\\",\\\"region\\\":\\\"California\\\",\\\"city\\\":\\\"San Jose\\\",\\\"postal\\\":\\\"94109\\\",\\\"latitude\\\":\\\"-123.423\\\",\\\"longitude\\\":\\\"123.123\\\",\\\"ipAddress\\\":\\\"12.45.67.89.0\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Client-UUID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "ClientUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/location/get": {
      "get": {
        "tags": [
          "AccountLocation"
        ],
        "summary": "Account - Location - Get",
        "description": "This data refers to an API endpoint named \"Account - Location - Get\". It deals with retrieving location related information associated with a specific user account. \n\n1. \"name\": This field refers to the name of the API endpoint. In this case, the name of the endpoint is \"Account - Location - Get\".\n\n2. \"request\": This field contains the details for making the API request.\n   \n    a. \"auth\": This section contains information related to the method of authentication. The \"type\" field indicates that a bearer token is being used for the API request authorization. The \"bearer\" array holds information about the token key and its value.\n   \n    b. \"method\": This field specifies the HTTP method to be used for the request, which is \"GET\" in this case.\n   \n    c. \"url\": This field defines the exact URL to which the request is to be sent. It contains parameters called \"locationId\", \"sessionId\", and \"accountId\". These parameters are placeholders and are expected to be replaced by actual values during the execution of the request. \n\n    d. \"headers\": This field represents the HTTP headers to be sent with the request. The \"key\" and \"value\" are left blank intentionally indicating that there are no additional headers needed for this request.\n\n    e. \"body\": This field represents the body of the request. \"mode\" field specifies that the body content type is \"raw\". However, the \"raw\" field doesn't contain any data, indicating that GET request does not require a body.\n\nRemember to replace all the placeholder values in the \"url\" with actual values before sending the request. Also, ensure that the \"token\" field under \"auth\" is updated with a valid bearer token for successful authorization.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "locationId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "locationId"
          },
          {
            "name": "sessionId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "sessionId"
          },
          {
            "name": "accountId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "accountId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/location/all": {
      "get": {
        "tags": [
          "AccountLocation"
        ],
        "summary": "Account - Location - Get All",
        "description": "This endpoint is named \"Account - Location - Get All\". Its main function is to retrieve all the location data related to a specific account.\n\nThe request uses a 'GET' method, which implies that information is being fetched from this particular URL: \"http://localhost:3000/api/account/location/all/?sessionId=sessionId&accountId=accountId\". From this URL, we can observe that the request is being sent to an API related to account locations, on a locally hosted server (localhost) running on port 3000. \n\nTwo parameters are required in the root URL - 'sessionId' and 'accountId'. The 'sessionId' parameter is likely tied to the active session of the requester, presumably for security and tracking purposes. The 'accountId' parameter is probably related to the specific account from which all location data are required. Both of these parameters should be populated with appropriate values for this request to function correctly. \n\nBearer token authentication is utilized for this request as specified under the 'auth' section. This indicates that a token, identified by \"BearerToken\" under the bearer section would need to be provided for successful validation and subsequent execution of this request. \n\nNo specific headers are required for this request as the key-value pair under the 'headers' section is left empty and is marked as \"disabled\". \n\nThe 'body' mode for this request is set to 'raw', but since no raw input is mentioned, it is concluded that this endpoint does not need an HTTP body payload. \n\nIn Summary, to use this endpoint, one would need the two parameters 'sessionId' and 'accountId' to be correctly filled in the URL, as well as a valid bearer token to be supplied under the 'auth' section.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "sessionId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "sessionId"
          },
          {
            "name": "accountId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "accountId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/location/delete": {
      "post": {
        "tags": [
          "AccountLocation"
        ],
        "summary": "Account - Location - Delete",
        "description": "This endpoint is named \"Account - Location - Delete\", suggesting it is used to remove a location record associated with a certain account.\n\nAuthorization for this endpoint is provided through a bearer token. The \"key\" is named \"token\" and its \"value\" is obtained from a session ID, which is represented as a string.\n\nThe request method for this endpoint is POST. This implies that it sends data to the server to create a new resource (in this case, a deletion request).\n\nThe URL designated for this endpoint is \"http://localhost:3000/api/account/location/delete\". This is where the server listens for incoming requests. It's on your local machine, specifically, as is indicated by \"localhost:3000\".\n\nThere's an array of headers in the request where you can set additional information about the request. It currently contains a default header with empty key-value pair that is disabled.\n\nThe \"body\" section carries the data for the request. Its mode is \"raw\" which means the data is sent as is, a JSON payload in this case. The \"raw\" field contains a JSON string which includes \"sessionId\", \"accountId\", and \"locationId\". This implies that the deletion operation should target the \"locationId\" attached to an \"accountId\" within the current \"sessionId\".\n\nRecap: This endpoint deletes a location associated with a given account in the provided session, as indicated by the respective IDs in the request body. It uses bearer token authorization parsed from a session ID.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\",\\\"locationId\\\":\\\"locationId\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/send/accountCreated": {
      "post": {
        "tags": [
          "AccountSend"
        ],
        "summary": "Account - Send - Account Created",
        "description": "The provided data appears to be related to an API endpoint specifically designed to confirm the creation of an account. The key elements can be broken down as follows:\n\n- **name:** The name is 'Account - Send - Account Created'. It identifies this particular endpoint. This string is typically used by developers to understand what the endpoint is for, particularly during testing.\n\n- **request:** This details the HTTP request to be made; in this case, a POST request.\n\n  - **auth:** This object details the authentication required in order to access this endpoint. Specifically, it uses a 'bearer token' type of authentication. The token (value = 'BearerToken') must be supplied in string format (type = 'string') to gain access.\n\n  - **method:** The HTTP method used is 'POST'. This is generally used to send data to a server to create/update a resource.\n\n  - **url:** The URL for this endpoint is 'http://localhost:3000/api/account/send/accountCreated'. This is the target address on the server where the HTTP request should be sent.\n\n  - **headers:** The headers object is generally used to define the operating parameters for HTTP transactions. Here, the only defined header element is set to 'default' type and is disabled (disabled = true). The key and value are both empty, meaning no specific HTTP header is defined.\n\n  - **body:** The body object pertains to data that must be sent in the HTTP request. In this case, the body content is in 'raw' format (mode = 'raw'), featuring a JSON string that includes 'sessionId' and 'accountId'. These are placeholders for the actual session ID and account ID that should be sent in the body of the POST HTTP request.\n  \nEvery time a POST request is made to this endpoint, an account is created, identified by the 'sessionId' and 'accountId'. This endpoint, therefore, is critical in creating user accounts for your application.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/send/verificationEmail": {
      "post": {
        "tags": [
          "AccountSend"
        ],
        "summary": "Account - Send - Verification Email",
        "description": "This data describes an endpoint titled \"Account - Send - Verification Email\". \n\n1. `name`: This defines the name of the endpoint. It is named \"Account - Send - Verification Email\". \n\n2. `request`: This section houses all the information about the HTTP request that is sent to the server. \n\n    A. `auth`: The `auth` section describes the type of authorization used for the request. The type specifies the format of authorization, and in this case, it is 'bearer'. The `bearer` is an array of authentication-related objects.\n    \n         - `key`: The key is the identifier for the authentication value. Here, it is labeled \"token\".\n         - `value`: The value tag in the bearer array symbolizes the actual token value. Here, it is represented as \"BearerToken\".\n         - `type`: The type indicates the data type of the bearer token. Here, it is \"string\".\n\n    B. `method`: The method property indicates the HTTP method used to send the request to the API. In this case, it's a \"POST\" request.\n\n    C. `url`: This is the URL that the API request will be sent to. Here, it is \"http://localhost:3000/api/account/send/verificationEmail\".\n\n    D. `headers`: An array of objects signifying the collection of HTTP headers enclosed with the request.\n    \n         - `key`: This element indicates the name of the header field. It is empty in this case.\n         - `value`: This represents the associated value for the corresponding header key. In this case, it is also empty.\n         - `type`: Denotes the header content type. It is labeled as \"default\" in this instance.\n         - `disabled`: Shows whether the header is enabled or not. In this case, it is set to true, meaning the header is disabled.\n\n    E. `body`: Contains the actual request body sent to the API.\n    \n        - `mode`: Determines the format of the body sent with the request. In this case, it is \"raw\", indicating unprocessed data.\n        - `raw`: Contains the actual raw body content. Here, it is a JSON string with property \"email\" and value \"email\".",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"email\\\":\\\"email\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/send/verificationSMS": {
      "post": {
        "tags": [
          "AccountSend"
        ],
        "summary": "Account - Send - Verification SMS",
        "description": "This endpoint is named `Account - Send - Verification SMS`. It uses the `POST` method to send a verification SMS to a user's phone.\n\n- `auth`: The endpoint uses `bearer` authentication, which means you need to provide a bearer token in the request header. The key for this token is `token` and its initial value is `BearerToken`. The token's data type is `string`. You will likely replace `BearerToken` with an actual token value when you run this endpoint.\n\n- `method`: This is a `POST` endpoint. That means it is designed to accept and process the submitted data.\n\n- `url`: The endpoint's URL is `http://localhost:3000/api/account/send/verificationSMS`. You can replace `localhost:3000` with any server's address where this API is running.\n\n- `headers`: By default, this API does not require any additional request headers. The header object is set to `disabled` and both the `key` and `value` properties are empty strings. You can add headers if required for your application.\n\n- `body`: The body of the request should be a 'raw' JSON object that includes the phone number where the verification SMS will be sent. The `phone` field should contain the phone number.\n\nRemember to replace the `BearerToken` with an actual bearer token and the `phone` field value with an actual phone number when you run this endpoint.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"phone\\\":\\\"phone\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/send/emailAddressChanged": {
      "post": {
        "tags": [
          "AccountSend"
        ],
        "summary": "Account - Send - Email Address Changed Notification",
        "description": "1. \"name\": This field contains the name of the current action that's been taken; in this case, it is sending a notification about an account email address change.\n\n2. \"request\": This field encapsulates all the data related to making the specific API request.\n\n2.1. \"auth\": It represents the authentication of the API request. The \"type\" of authentication here is a \"bearer\" token which means that the sender is the bearer of the token.\n\n    2.1.1. \"bearer\": It is an array containing the bearer token type credentials, represented by an object holding the properties \"key\", \"value\", and \"type\". The \"key\" value is the token name, \"value\" is the actual token, and \"type\" indicates the data type of the value as string.\n\n3. \"method\": This field represents the HTTP method used for the API request. A \"POST\" method is used here which generally means the request is intended to send data to the server.\n\n4. \"url\": This field specifies the URL where the API request would be sent.\n\n5. \"headers\": This field is an array of objects which contains the additional information to pass together with the request. Here, an object is present with \"key\" as \"Client-UUID\", a unique identifier for the client, the \"value\" is the actual UUID value and \"type\" indicates it's a default header.\n\n6. \"body\": This section includes the exact data that'll be sent with the POST request.\n\n    6.1. \"mode\": This field signifies the way the body will be sent. In this case, \"raw\" indicates the body content will be sent as a raw data string.\n\n    6.2. \"raw\": This field consists of the actual raw data string which is a JSON string including \"sessionId\", \"accountId\", and \"email\" as properties. \"sessionId\" represents the session's unique identifier, \"accountId\" is the account's unique identifier and \"email\" is the new email address.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\",\\\"email\\\":\\\"email\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Client-UUID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "ClientUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/send/phoneNumberChanged": {
      "post": {
        "tags": [
          "AccountSend"
        ],
        "summary": "Account - Send - Phone Number Changed Notification",
        "description": "This endpoint accepts a POST request to the path \"http://localhost:3000/api/account/send/phoneNumberChanged\". It's used to notify the system that the phone number associated with the provided account has been changed.\n\nLet's break the request into parts:\n\n1. `\"name\"`: The name field provides a descriptive label for the endpoint. In this case, the name suggests an action, which in terminalogy, \"sends a notification for a changed phone number on an account\".\n\n2. `\"auth\"`: This is the type of authorization needed to access the endpoint with bearer as the authentication method. This means a bearer token needs to be attached in the header of the request for successful authorization. \n   - `\"key\"`: Describes the key used within the bearer authorization, which here is \"token\".\n   - `\"value\"`: The value associated with the key. For this request, the value should be the actual bearer token, \"BearerToken\" is just a placeholder.\n\n3. `\"method\"`: The HTTP verb associated with the request. In this case, it's a \"POST\" method, which is typically used to send data to a server to create a new resource.\n\n4. `\"url\"`: The URL field contains the endpoint's path. This is required for determining where the request will be sent.\n\n5. `\"headers\"`: These are additional pieces of information required by the server.\n   - `\"key\"`: The header's key which is \"Client-UUID\".\n   - `\"value\"`: The value associated with the key in the header, represented here by \"ClientUUID\".\n\n6. `\"body\"`: Contains the data that is sent to the server. In \"raw\" mode, the data must be a string, often in JSON format.\n   - `\"sessionId\"`: Identifies the current user's session. This ID is unique to a user's session.\n   - `\"accountId\"`: The unique identifier for the user's account.\n   - `\"email\"`: The email associated with the user's account.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\",\\\"email\\\":\\\"email\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Client-UUID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "ClientUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/send/passwordChanged": {
      "post": {
        "tags": [
          "AccountSend"
        ],
        "summary": "Account - Send - Password Changed Notification",
        "description": "This endpoint is named \"Account - Send - Password Changed Notification\". It is responsible for sending notification when a user changes their password.\n\n**Authentication:**\nThe endpoint requires Bearer authentication. The bearer token needs to be provided in under the \"token\" key.\n\nKey: 'token'\nValue: 'BearerToken'\nType: 'string'\n\nThe value is where you'll substitute the actual bearer token when making your request.\n\n**Method:**\nThe request method for this endpoint is POST.\n\n**URL:**\nThis endpoint is to be hit at 'http://localhost:3000/api/account/send/passwordChanged'. This URL is bound to change depending on the environment/server where this service is deployed.\n\n**Headers:**\nThis endpoint requires one additional header 'Client-UUID' which must be included with each request. The value for 'Client-UUID' corresponds to your project's unique identifier.\n\nKey: 'Client-UUID'\nValue: 'ClientUUID'\nType: 'default'\n\n**Body:**\nThe request body should be in `raw` mode and contains the following keys:\n\n- sessionId : Represents the ongoing session ID.\n- accountId : The unique identifier of the account.\n- email : The email associated with the account.\n\nAn example body would look like \n\n```json\n{\n  \"sessionId\":\"MySessionId\",\n  \"accountId\":\"MyAccountId\",\n  \"email\":\"MyEmail\"\n}\n```\n\nIn this example, `MySessionId`, `MyAccountId`, and `MyEmail` should be replaced with actual values while making the request.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\",\\\"email\\\":\\\"email\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Client-UUID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "ClientUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/send/passwordResetEmail": {
      "post": {
        "tags": [
          "AccountSend"
        ],
        "summary": "Account - Send - Password Reset Code to Email",
        "description": "Here's a detailed description of each data field in this API endpoint:\n\n1. \"name\" - This denotes the name or title of the API endpoint. It's a significant identifier that describes what the API endpoint does. In this case, \"Account - Send - Password Reset Code to Email\" suggests that the API endpoint is used to transmit password reset codes to email addresses linked with user accounts.\n\n2. \"request\" - This outlines the specifics of the HTTP request that will be made. It includes several sub-components detailing the manner and content of the method.\n\n3. \"auth\" - This presents information about the authentication protocol that the API will employ for the HTTP request. The \"type\" is \"bearer\", implying that the request will utilize bearer token authentication.\n   \n    \"bearer\" is an array comprises a single object carrying three properties:\n   \n   - \"key\": Represents the header field for the bearer token, here it is named as \"token\".\n   \n   - \"value\": The actual token/credential that's used for authentication. Here it's called \"BearerToken\".\n   \n   - \"type\": Describes the data type of the \"value\". In this case, it is a string.\n\n4. \"method\" - This data field signifies the HTTP method for the request. In this case, \"POST\" indicates that the endpoint is expecting data to be sent in the request body for processing.\n\n5. \"url\" - This contains the exact URL that the request will call. Here the API endpoint is hosted locally on port 3000.\n\n6. \"headers\" - This includes any headers required for the request. In this case, a client UUID (Universally Unique Identifier) should be mentioned as the header with the key called \"Client-UUID\".\n\n7. \"body\" - This pertains to the main content of the request. \"mode\" is set to \"raw\", which means the request will be made with the raw data as is, without any encoding or modifying. Under \"raw\", several items need to be sent in JSON form:\n   \n   - \"sessionId\": A unique identifier for a single browsing session.\n   \n   - \"accountId\": Identifier for a specific user account.\n   \n   - \"securityCode\": Security code arranged to verify the identity of the user. In this example, its value is set as '123'.\n   \n   - \"email\": The email address linked with the user's account. In this case, `fortunevieyra@icloud.com` is the account email where the reset password link will be dispatched.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\",\\\"securityCode\\\":\\\"123\\\",\\\"email\\\":\\\"fortunevieyra@icloud.com\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Client-UUID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "ClientUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/send/passwordResetSMS": {
      "post": {
        "tags": [
          "AccountSend"
        ],
        "summary": "Account - Send - Password Reset Code to SMS",
        "description": "This endpoint is named \"Account - Send - Password Reset Code to SMS\". It adopts the POST method, indicating that it is designed to push (insert) data to the server. The request URL of this endpoint is \"http://localhost:3000/api/account/send/passwordResetSMS\". This suggests that it is locally hosted and used for sending password reset codes to a specified SMS.\n\nIt requires bearer authentication. It means you need to supply a bearer token which is used to authorize and authenticate the request.\n\n\"token\": This is a string type data where the bearer token should be placed. The placeholder value here is \"BearerToken.\"\n\nUnder Headers, we find additional authorization parameters.\n\n\"Client-UUID\": It refers to the unique identifier used to recognize individual clients invoking this API endpoint. Put your Client UUID in the place of 'ClientUUID' here.\n\nComing to the body of the endpoint, it contains a raw JSON object with the following data,\n\n\"sessionId\": It refers to the unique session identifier. Replace 'sessionId' with the actual session Id.\n\n\"accountId\": It refers to a specific user's account identifier. 'accountId' here needs to be replaced with the actual account Id.\n\n\"securityCode\": A placeholder (123456) for the security code used in the password reset process. It should be replaced with a real security code.\n\n\"phone\": A placeholder (18327051031) for the phone number to which the password reset SMS will be sent. It should be replaced with the target phone number.\n  \nPlease ensure to replace all the placeholder values with real-time data while using this endpoint.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\",\\\"securityCode\\\":\\\"123456\\\",\\\"phone\\\":\\\"18327051031\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Client-UUID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "ClientUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/send/newMessage": {
      "post": {
        "tags": [
          "AccountSend"
        ],
        "summary": "Account - Send - New Message Notification Email",
        "description": "The provided data describes a POST endpoint for sending a new message notification email in an account.\n\n1. `name`: This is the unique identifier or the title of the endpoint. In this case, it is \"Account - Send - New Message Notification Email\".\n\n2. `request`: This encapsulates all the information needed to make the API call.\n\n   - `auth`: Specifies the authentication details.\n     - `type`: It denotes the type of authentication. Here, it is a \"bearer\" type.\n     - `bearer`:[{...}]: This array contains an object defining a bearer token, specified by:\n       - `key`: The key \"token\" used for identification during authentication.\n       - `value`: It is the actual bearer token to be used. Here, it is denoted as \"BearerToken\".\n       - `type`: It defines what type of data the bearer token is. Here, it is a \"string\".\n\n   - `method`: The HTTP method employed for calling the API. Here, it is \"POST\".\n  \n   - `url`: The URL to which the request is made. For the given data, the API endpoint is \"http://localhost:3000/api/account/send/newMessage\".\n\n   - `headers`: An array containing all the headers to be included in the request.\n     - `key`: The identifying key for the header. Here, it is \"Client-UUID\".\n     - `value`: The corresponding value to the key. In this case, \"ClientUUID\".\n     - `type`: The kind of header it is. Here, it is \"default\".\n\n   - `body`: This includes the body of the HTTP request.\n     - `mode`: Indicates the mode of the request body. For this endpoint, it's \"raw\".\n     - `raw`: Contains the actual body of the request sent to the server as a raw string. This string could ideally be a properly formatted JSON, XML, or even just plain text. Here, it is a JSON string containing sessionId, accountId, sender and message properties.\n  \nThe body values:\n- `sessionId`: The unique identifier for a specific session.\n- `accountId`: Represents the id of the account.\n- `sender`: A string that represents the sender's name. In this case,  \"Fortune Vieyra\".\n- `message`: The actual content of your message. Provided example is a greeting, \"Hello World\".",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\",\\\"sender\\\":\\\"Fortune Vieyra\\\",\\\"message\\\":\\\"Hello World\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Client-UUID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "ClientUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/send/newFollowers": {
      "post": {
        "tags": [
          "AccountSend"
        ],
        "summary": "Account - Send - New Followers Notification Email",
        "description": "This endpoint, named \"Account - Send - New Followers Notification Email\", is designed to automatically send an email notification when a user has new followers on their account. It utilizes the `POST` method and interacts with a specific `API` at \"http://localhost:3000/api/account/send/newFollowers\".\n\nStarting with `auth` block, it employs `bearer token` authentication which denotes that to achieve successful communication with this API, you'll need to include the relevant access token string under the `bearer` field in the `auth` section. The placeholder for this token is represented as \"BearerToken\".\n\nThe `request` section also defines a `client-UUID` header where a universally unique client identifier must be substituted in place of \"ClientUUID\". This identifier is used to uniquely identify each client that uses this endpoint.\n\nAnd finally, the `body` section of the request takes three key parts which are `sessionId`, `accountId`, and `newFollowers` in JSON format. The `sessionId` and `accountId` refer to the unique identifiers for a user's session and account respectively where you would replace \"sessionId\" and \"accountId\" with actual values. For the `newFollowers`, it takes an array of strings replacing \"John Smith\",\"Andy Lee\",\"Michael Jordan\" with the actual names of new followers.\n\nRemember that all the data provided in `request` section should adhere to the right string format as stipulated for each item. Keep your `token`, `ClientUUID`, `sessionId` and `accountId` confidential in order to uphold the security of your data.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\",\\\"newFollowers\\\":[\\\"John Smith\\\",\\\"Andy Lee\\\",\\\"Michael Jordan\\\"]}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Client-UUID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "ClientUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/send/streamerNewComment": {
      "post": {
        "tags": [
          "AccountSend"
        ],
        "summary": "Account - Send - Streamer New Comment Notification Email",
        "description": "This API endpoint is named \"Account - Send - Streamer New Comment Notification Email\". The endpoint is designed to send a notification email to a user (presumably a streamer), whenever a new comment is made on their content.\n\nAuthentication: This endpoint requires an authentication method of type 'Bearer'. The 'BearerToken' needs to be passed as the value for the 'token' key in the authentication section of the request.\n\nHTTP Request Method: The request method used for this endpoint is POST.\n\nURL: The endpoint resides at the URL \"http://localhost:3000/api/account/send/streamerNewComment\". \n\nHeaders: The request requires a header field of 'Client-UUID', it is used to identify the client making the request. The value for the 'Client-UUID' field in the headers section is 'ClientUUID'.\n\nBody: The body of the request should be in 'raw' format. There are four data fields to be included in the body of the request.\n\n- \"sessionId\": This refers to the unique identifier for the streaming session. Replace 'sessionId' with the valid session ID.\n- \"accountId\": It represents the unique identifier for the user's account. Replace 'accountId' with the valid account ID.\n- \"commenterId\": The unique identifier for the person who made the comment. The placeholder value here is a UUID, and should be replaced with the ID of the commenter.\n- \"comment\": The content of the comment made by the commenter. It is filled with placeholder text 'HELLO WORLD!'\n  \nPlease ensure to replace these placeholder values with actual data during implementation.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\",\\\"commenterId\\\":\\\"12345AD3DS-ASDFSA2-ASDFASD-2ASDFASD\\\",\\\"comment\\\":\\\"HELLO WORLD!\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Client-UUID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "ClientUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/send/streamerTeamDraftRequest": {
      "post": {
        "tags": [
          "AccountSend"
        ],
        "summary": "Account - Send - Streamer Team Draft Request Email",
        "description": "This endpoint is named \"Account - Send - Streamer Team Draft Request Email\". It is designed to send a team draft request email through the streamer account. Here's a detailed description of all components of the endpoint:\n\n1. Auth: This endpoint uses bearer token authentication, which means that the server and client could pass a `token` as the value of the bearer token to authenticate each other. The type of the `token` is string.\n\n2. Request Method: The HTTP method used by this endpoint is `POST`, which means it submits data to be processed to a specified resource.\n\n3. URL: This HTTP request is sent to the URL: `http://localhost:3000/api/account/send/streamerTeamDraftRequest`.\n\n4. Headers: This HTTP request contains headers, which allow the client to pass additional information about the request or about itself, to the server. The `Client-UUID` is sent as a header with the type set to `default`. Replace `ClientUUID` with the unique identifier of the client.\n\n5. Body: The body of this request contains the data to be sent to the server. The data is sent in `raw` mode which contains the following parameters:\n  \n    - `sessionId`: A unique identifier for the session.\n  \n    - `accountId`: The account identifier of the user.\n  \n    - `ownerId`: The unique identifier of the owner. The value `KALSDF98-OJOASDF9=OASKDHFL-OIUAHSD89=ASDFDSS` is just a placeholder and needs to be replaced with the actual ownerId.\n\nMake sure to replace the placeholder data with actual values when making the request.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\",\\\"ownerId\\\":\\\"KALSDF98-OJOASDF9=OASKDHFL-OIUAHSD89=ASDFDSS\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Client-UUID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "ClientUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/send/userNewComment": {
      "post": {
        "tags": [
          "AccountSend"
        ],
        "summary": "Account - Send - User New Comment Request Email",
        "description": "This endpoint is named \"Account - Send - User New Comment Request Email\". It is designed to send an email notification to a user when a new comment is made on their account.\n\nHere is a breakdown of the data:\n\n- `auth`: This specifies the authorization method that is being used. In this case, the type is \"bearer\". The bearer key-value pair should be supplied, having a value of type string. \n\n- `method`: This specifies the HTTP method that should be used for the request. In this case, the POST method is used, indicating that data will be sent to the server.\n\n- `url`: This is the URL that the request will be sent to. The path `http://localhost:3000/api/account/send/userNewComment` is the designated route for sending user new comment request emails.\n\n- `headers`: This is an array of objects that represents the headers that should be included in the HTTP request. The Client-UUID key, which carries a value of type default is required, you need to substitute \"ClientUUID\" with the appropriate value.\n\n- `body`: This describes the data that is being sent in the request. The body content is in raw format. The raw string contains a JSON object with four properties:\n  \n  - `sessionId`: A string that uniquely identifies the current session.\n\n  - `accountId`: A string that uniquely identifies the account that the comment is being made on. \n\n  - `commenterId`: A unique identifier for the user who has made the comment. The example provided is a placeholder and should be replaced with the actual value.\n\n  - `comment`: A string representing the content of the user's comment. The example \"HELLO WORLD!\" is a placeholder for actual comment.\n\nDo replace the placeholder values with actual values before making the request.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\",\\\"commenterId\\\":\\\"12345AD3DS-ASDFSA2-ASDFASD-2ASDFASD\\\",\\\"comment\\\":\\\"HELLO WORLD!\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Client-UUID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "ClientUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/send/userTeamDraftRequest": {
      "post": {
        "tags": [
          "AccountSend"
        ],
        "summary": "Account - Send - Users Team Draft Request Email",
        "description": "This endpoint is named 'Account - Send - Users Team Draft Request Email'. Its purpose is to facilitate a POST request to send a draft request email to the user's team in your account.\n\n1. Authentication:\n   This endpoint is protected by 'bearer' authentication type. The bearer token is passed to authenticate requests made to the endpoint. The 'token' key holds the value of the bearer token in string format.\n\n2. HTTP Method: \n   This endpoint uses the 'POST' HTTP method. A POST method is used when you want to send some data to the server, for example, file update, form data, etc.\n\n3. URL: \n   The URL to which the request is to be sent is 'http://localhost:3000/api/account/send/userTeamDraftRequest'. This URL may change depending on the running environment of your application.\n\n4. Headers: \n   The 'Client-UUID' is the only header key in this endpoint. The value for this key should be your client's unique identifier. It must be sent in the request headers to the server for identification purposes.\n\n5. Body:\n   The body of the request is in 'raw' format. It consists of:\n   - 'sessionId', which should hold the unique session identifier.\n   - 'accountId', that should include the unique id of the user's account.\n   - 'streamerId', a unique identifier to identify individual streamers. \n\nPlease replace 'BearerToken', 'ClientUUID', 'sessionId', 'accountId', and 'streamerId' with their actual values when using this API endpoint. \n\nRemember to adhere to the correct data types (e.g., strings) for each of these fields to avoid unexpected errors.\n\nThis endpoint will handle the logic behind the sending of the draft request email to all members of your user's team.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\",\\\"streamerId\\\":\\\"12345AD3DS-ASDFSA2-ASDFASD-2ASDFASD\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Client-UUID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "ClientUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/settings/create": {
      "post": {
        "tags": [
          "AccountSettings"
        ],
        "summary": "Account - Settings - Create",
        "description": "The given endpoint information has the following data:\n\n1. `name`: \"Account - Settings - Create\". This indicates the purpose or function of the endpoint. It is used to create settings for an account.\n\n2. `request`: A container for the various details of the API request.\n\n    a. `auth`: The authentication method used for the endpoint is a bearer token, defined as a JSON object. This object contains a `key` \"token\", indicating the reference name for the token. Its corresponding `value` is \"BearerToken\". Its `type` is \"string\", signifying the data format.\n\n    b. `method`: \"POST\". This represents the HTTP method to be used when making a request to the endpoint. Since it's a POST request, it means this endpoint is used to send data to the server to create a new resource.\n\n    c. `url`: \"http://localhost:3000/api/account/settings/create\". This is the URL of the server where the request will be made. It indicates where the API service is hosted.\n\n    d. `headers`: An array for storing header data. In this instance, it doesn't contain any active data as shown by `disabled` set to `true`, it's typically used to define the metadata of the HTTP request.\n\n    e. `body`: This is used to specify the data to be sent to the server. Its `mode` is \"raw\", meaning that data are sent in an unprocessed form. The `raw` property contains the actual data to be sent to the server as a JSON object. Here, it's sending \"accountId\" and \"sessionId\" as key-value pairs.\n\nPlease note that actual values for \"accountId\" and \"sessionId\" in the `body` and \"BearerToken\" in the `auth` must be replaced by the user with actual valid tokens to successfully use this endpoint.\n",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"accountId\\\":\\\"accountId\\\",\\\"sessionId\\\":\\\"sessionId\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/settings/update": {
      "put": {
        "tags": [
          "AccountSettings"
        ],
        "summary": "Account - Settings - Update - Payments",
        "description": "This endpoint is named \"Account - Settings - Update - Payments\" and it is used to update an account's payment settings. It uses the HTTP PUT method.\n\nThe 'auth' field includes the authentication type, which is 'bearer' and takes a 'token' whose value is 'BearerToken'. This is a string type.\n\nThe 'request' field refers to the actual request made to the endpoint. The 'url' field in the 'request' object is the endpoint to which the request is being made, in this case, it is \"http://localhost:3000/api/account/settings/update\".\n\nIn the 'headers' section, there is a Client-UUID. This holds unique identification for each client.\n\nThe 'body' section contains the details of the user's account settings that are to be updated. It includes important details like session id, account id, settings key, personal information like name, email id, phone no., address, business-related details like company name, tax ID number, business type and structure, bank details like name, account number, email id, routing number. It also includes various other payment source details related to PayPal, Cash App, Venmo, Zelle, BitPay, etc along with their respective auth tokens. A minimum payout amount is also mentioned along with the frequency of occurrence of the payout (monthly in this case) and the preferred payout method. The start date for payout is provided at the end.\n\nAll of these details will be sent as raw data in JSON format in the HTTP body.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"sessionId\\\": \\\"sessionId\\\",\\\"accountId\\\": \\\"accountId\\\",\\\"settingKey\\\": \\\"payments\\\",\\\"firstName\\\": \\\"John\\\",\\\"lastName\\\": \\\"Doe\\\",\\\"birthday\\\": \\\"1990-01-01\\\",\\\"email\\\": \\\"john.doe@example.com\\\",\\\"phoneNumber\\\": \\\"+1234567890\\\",\\\"addressLine1\\\": \\\"123 Main St\\\",\\\"addressLine2\\\": \\\"Apt 456\\\",\\\"city\\\": \\\"Anytown\\\",\\\"state\\\": \\\"CA\\\",\\\"country\\\": \\\"US\\\",\\\"zipCode\\\": \\\"12345\\\",\\\"companyName\\\": \\\"ABC Inc\\\",\\\"taxIdNumber\\\": \\\"123-45-6789\\\",\\\"businessType\\\": \\\"LLC\\\",\\\"businessStructure\\\": \\\"Corporation\\\",\\\"bankFirstName\\\": \\\"John\\\",\\\"bankEmailAddress\\\": \\\"john.bank@example.com\\\",\\\"bankLastName\\\": \\\"Doe\\\",\\\"bankPhoneNumber\\\": \\\"+1234567890\\\",\\\"bankName\\\": \\\"Bank of Example\\\",\\\"bankAccountNumber\\\": \\\"123456789\\\",\\\"bankRoutingNumber\\\": \\\"987654321\\\",\\\"paypalSource\\\": \\\"john.paypal@example.com\\\",\\\"paypalAuthToken\\\": \\\"paypal-auth-token\\\",\\\"cashAppSource\\\": \\\"john.cashapp\\\",\\\"cashAppAuthToken\\\": \\\"cashapp-auth-token\\\",\\\"venmoSource\\\": \\\"john.venmo\\\",\\\"venmoAuthToken\\\": \\\"venmo-auth-token\\\",\\\"zelleSource\\\": \\\"john.zelle@example.com\\\",\\\"zelleAuthToken\\\": \\\"zelle-auth-token\\\",\\\"bitPaySource\\\": \\\"john.bitpay\\\",\\\"bitPayAuthToken\\\": \\\"bitpay-auth-token\\\",\\\"payoutMinimumAmount\\\": 50.00,\\\"payoutOccurrence\\\": \\\"monthly\\\",\\\"payoutPreferredMethod\\\": \\\"bank\\\",\\\"payoutStartDate\\\": \\\"2023-01-01\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Client-UUID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "ClientUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/settings/get": {
      "get": {
        "tags": [
          "AccountSettings"
        ],
        "summary": "Account - Settings - Get - Payments",
        "description": "This endpoint titled \"Account - Settings - Get - Payments\" retrieves the payment settings of a particular account. Below is a description of each data field:\n\n- `\"name\"`: This is the name of the endpoint. It indicates that this endpoint is related to \"Account Settings\", specifically \"Payments\", and it uses the GET method.\n\n- `\"request\"`: The object that provides details about the HTTP request made to the endpoint.\n\n- `\"auth\"`: It is the authentication component for securing the endpoint. This API uses bearer token authentication, specified by \"bearer\" type. \n\n   - `\"type\"`: The type of authentication used, which is bearer authentication.\n\n   - `\"bearer\"`: This array carries an object that stores the bearer token for the endpoint. \n\n     - `\"key\"`: The key is 'token' which is a part of the bearer authentication scheme.\n\n     - `\"value\"`: The actual value of the bearer token (BearerToken) that would be used in production environment is placed here.\n\n     - `\"type\"`: The type signifies that the bearer token is represented as a string value.\n\n\n- `\"method\"`: This refers to the HTTP method used to make a request to the endpoint. In this case, it is the 'GET' method.\n\n- `\"url\"`: This is the URL of the API endpoint. It specifies API root(i.e., http://localhost:3000/api/), the path to the endpoint(i.e., account/settings/get/), and query parameters(settingKey, sessionId, accountId).\n\n- `\"headers\"`: This array object would include any additional headers needed for the request, but in this case, it is either left empty or not required for this request, which is indicated by the \"disabled\": true attribute.\n\n- `\"body\"`: This section holds the data that is sent to the API in the body of the request. \n\n   - `\"mode\"`: The mode denotes that the body of the request is to be sent in as 'raw' to the endpoint.\n\n   - `\"raw\"`: The raw field means raw data can be inserted but in the provided data it is left empty, indicating that the GET request does not require additional body data.\n   \nOverall, this endpoint retrieves the payment settings linked to the given sessionId and accountId. Please remember this endpoint needs a bearer token for the authentication.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "settingKey",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "payments"
          },
          {
            "name": "sessionId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "sessionId"
          },
          {
            "name": "accountId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "accountId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/settings/all": {
      "get": {
        "tags": [
          "AccountSettings"
        ],
        "summary": "Account - Settings - Get All - With Deleted",
        "description": "The endpoint \"Account - Settings - Get All - With Deleted\" is a GET request that is used to fetch all account settings, even those attached to deleted accounts.\n\n1. \"name\": This is the name of the endpoint - Account - Settings - Get All - With Deleted\n\n2. \"request\": It contains everything about the request.\n\n3. \"auth\": This is the authorization required for this endpoint. Here, authentication needs to be a Bearer type which essentially means you need to send a bearer token to access this endpoint.\n    - \"type\": The type of the authentication required which is 'bearer'\n    - \"bearer\": Contains the key-value pair which would be sent in the header for authentication.\n        - \"key\": The key which is 'token'.\n        - \"value\": It's 'BearerToken'. This will be the actual token required for accessing the endpoint.\n        - \"type\": The type of the value here, borne by the key which is 'string'. \n\n4. \"method\": It is the HTTP verb and here it is 'GET'. This type of request is used to retrieve data from a server.\n\n5. \"url\": This is the link to the specific endpoint where the request is sent. The url here is 'http://localhost:3000/api/account/settings/all/?sessionId=sessionId&accountId=accountId&includeDeleted=true'. It contains query parameters such as sessionId, accountId and includeDeleted which might be required to get the appropriate response.\n\n6. \"headers\": These are used to provide the server with additional information. This endpoint does not require any additional headers, and the default header is disabled.\n\n7. \"body\": The body holds the data to be sent for a POST or PUT request. This is not used in a GET request as in this case, so 'mode' is 'raw', and 'raw' is blank as data is not sent in the body.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "sessionId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "sessionId"
          },
          {
            "name": "accountId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "accountId"
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "example": "true"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/settings/delete": {
      "post": {
        "tags": [
          "AccountSettings"
        ],
        "summary": "Account - Settings - Delete - Payments",
        "description": "The provided data is an endpoint for an API that acts as a back-end functionality for your application.\n\nHere's a detailed breakdown of each data instance:\n\n1. \"name\": Account - Settings - Delete - Payments - This is the name assigned to this API endpoint. It hints that it is used to delete payment settings.\n\n2. \"request\": Houses information about the HTTP request.\n\n3. \"auth\": The authentication method used to validate the given request. A bearer token authorization method is used.\n\n4. \"bearer\": The bearer object that carries the necessary authentication details.\n\n5. \"key\": The key here is named 'token'. It is the placeholder for the actual token.\n\n6. \"value\": Value is the corresponding value for the key (here, 'token'). This field expects a unique 'sessionId' (value) corresponding to the bearer token's name.\n\n7. \"type\": It represents the data type. In this case, it is string.\n\n8. \"method\": The HTTP request method to be used. It uses the POST method, which is used to send data to a server to create a resource.\n\n9. \"url\": This field contains the URL where the request should be made. The server is currently running locally on port 3000.\n\n10. \"headers\": Contains the information passed in header part of the HTTP request. Currently, it's set to 'default' type and is disabled.\n\n11. \"body\": Contains the data to be sent in the body of the HTTP request. It is in raw format and must include a JSON object containing: \n     - \"sessionId\": The session Id for the account.\n     - \"accountId\": The ID identifying the specific user account. \n     - \"settingKey\": Identified as 'payments'. It usually represents the specific settings that need to be affected.\n\nPlease ensure all of the required information (sessionId, accountId, settingKey) is provided when using this endpoint for it to function correctly.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\",\\\"settingKey\\\":\\\"payments\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/update/account": {
      "put": {
        "tags": [
          "AccountUpdate"
        ],
        "summary": "Account - Update - Account",
        "description": "This endpoint is named \"Account - Update - Account\". It is used to update an existing account on the system. The HTTP request method used is PUT and the endpoint URL is 'http://localhost:3000/api/account/update/account'.\n\n- Authentication:\n  The endpoint requires bearer token authentication. The token should be replaced with valid \"BearerToken\".\n\n- HTTP Headers:\n  In the headers, you need to include a key named \"Client-UUID\", replacing \"ClientUUID\" with the actual UUID related to the client application.\n\n- Request Body:\n  The request body should be of JSON format and contains the following fields:\n\n    * \"zipcode\": The postal code associated with the user's address, replace \"95126\" with the actual value.\n    * \"instagram\": The user's Instagram handle, replace \"fortunevieyra_\" with the user's actual Instagram handle.\n    * \"username\": A unique username for the user. You should replace \"fortunevieyra\" with the user's actual username.\n    * \"firstName\": The first name of the user. Replace \"fortune\" with the user's actual first name.\n    * \"lastName\": The last name of the user. Replace \"vieyra\" with the user's actual last name.\n    * \"birthday\": The date of birth of the user in the format \"MM/DD/YYYY\", replace \"02/02/1988\" with user's actual birthday.\n    * \"sessionId\": The ID of the session. Replace \"sessionId\" with the correct session ID.\n    * \"accountId\": Unique identifier for the user's account. Replace \"accountId\" with the actual account ID of the user.\n\nPlease note, all values need to be sent as strings. So, always encapsulate them in quotes.\n\nIn the \"options\" field of the request body, the \"raw\" language is set to JSON, indicating that the data should be sent in the JSON format.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "zipcode": "95126",
                  "instagram": "fortunevieyra_",
                  "username": "fortunevieyra",
                  "firstName": "fortune",
                  "lastName": "vieyra",
                  "birthday": "02/02/1988",
                  "sessionId": "sessionId",
                  "accountId": "accountId"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Client-UUID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "ClientUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/update/display": {
      "put": {
        "tags": [
          "AccountUpdate"
        ],
        "summary": "Account - Update - Display",
        "description": "This endpoint, named \"Account - Update - Display\", is designed to update a user's account display settings in your system.\n\nStarting with the \"auth\" key, it uses the authentication method \"bearer\". This requires a token, which is labelled under the \"key\" as \"token\". The value for this is \"BearerToken\". This authentication method verifies that the requests being sent to your API are from a trusted source.\n\nThe \"request\" key defines the HTTP method to be a \"PUT\", signifying this endpoint is used to update existing resources or create them if they don't exist.\n\nThe \"url\" key specifies the URL of the API endpoint, to which requests need to be sent. The link is \"http://localhost:3000/api/account/update/display\".\n\nThe \"headers\" key contains a \"Client-UUID\" which serves as an identifier for the client making the API request. Its value is \"ClientUUID\".\n\nThe \"body\" key is where you specify the details to be sent to the server. The \"mode\" is \"raw\", meaning that the data is sent in a raw, unprocessed format.\n\nThe \"body\" also contains the \"raw\" key, which carries a JSON string. It includes parameters:\n- \"displayPreference\": This specifies the desired display setting; in this example, it is set to \"dark\".\n- \"sessionId\": This is a unique identifier for the user's current session; in this example, it is labeled as \"sessionId\".\n- \"accountId\": This is a unique identifier for the user's account; in this example, it is labeled as \"accountId\".\n\nThese are provided as raw JSON input when making the PUT request. When using this endpoint to update an account's display settings, replace these things with actual values.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"displayPreference\\\":\\\"dark\\\",\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Client-UUID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "ClientUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/update/email": {
      "put": {
        "tags": [
          "AccountUpdate"
        ],
        "summary": "Account - Update - Email",
        "description": "This endpoint is named \"Account - Update - Email\". This specifies its purpose: It's a component in an API that facilitates email updates in an account. \n\n- The `request` field contains the defining features of the endpoint's request parameters. \n\n- The `auth` form of this endpoint is \"bearer\". This signifies that it uses bearer tokens for authorization. The token's details are stored in a subfield where \"key\" is \"token\", the \"value\" is \"BearerToken\" and the token type is set to \"string\".\n\n- The `method` details the type of HTTP request that should be made. In this case, it's a `PUT` request indicating that it's used to update current resource.\n\n- The `url` field provides the exact location at which the request should be pointed. Here, it's targeted at the \"http://localhost:3000/api/account/update/email\" endpoint. \n\n- Inside the `headers` is a single object that indicates \"Client-UUID\" as a \"key\" with a \"value\" of \"ClientUUID\". The type of this header is \"default\". This header might be used to specify the unique identifier of the client making the request.\n\n- The `body` of the request includes three parameters packed into a raw JSON payload. The `mode` is set to \"raw\" indicating the form in which the body data is sent.\n\n  - The `newEmail` field is likely expected to receive the updated email address. For example, \"fortunevieyra@icloud.com\" has been used in the placeholder.\n\n  - `sessionId` is likely a unique identifier for the session during which the request is made. \n\n  - The `accountId` is probably the unique identifier of the account for which the email is to be updated. \n\nEach of these fields and their particular values work together to form the complete functionality of this endpoint. Be sure to replace placeholders with actual data before use.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"newEmail\\\":\\\"fortunevieyra@icloud.com\\\",\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Client-UUID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "ClientUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/update/language": {
      "put": {
        "tags": [
          "AccountUpdate"
        ],
        "summary": "Account - Update - Language",
        "description": "**Endpoint Name:** Account - Update - Language\n\nThis endpoint is used to update the language preference of an account. Below is a comprehensive analysis of the data fields involved:\n\n**Request Authentication:**\n\n* `auth`: Describes the authentication method. Specifically, the type is bearer type authentication. \n\n* `bearer` Array: This holds the access token information. \n    * `key`: Refers to the identifier of the token. By default, it is \"token\".\n    * `value`: This is the actual token value used for authorization. Placeholder here is \"BearerToken\".\n    * `type`: This is the data type of the token, and the default is set as \"string\".\n\n**Request Method:**\n\n* `method`: The HTTP method used for the API call. This endpoint uses the \"PUT\" method, implying that it is intended for updating an existing resource.\n\n**Request URL:**\n\n* `url`: The URL of the API endpoint. For this request, it is \"http://localhost:3000/api/account/update/language\".\n\n**Request Headers:**\n\n* `headers`: This includes extra information sent with the request. Here, a \"Client-UUID\" is sent, which uniquely identifies every client.\n\n**Request Body:**\n\n* `body`: This is the main content of the request. In this case, it's in raw JSON format.\n    * `mode`: Specifies that the request body is raw.\n    * `raw`: This includes the essential details viz., language preference ('languagePreference'), a unique session identifier ('sessionId'), and the account identifier ('accountId') of the account for which the language preference needs to be updated. The language preference here is set to Spanish ('es'). \n\nThis endpoint, thus, takes an Authorization token, client UUID, session ID, account ID, and the preferred language to update the language preference of the specific account.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"languagePreference\\\":\\\"es\\\",\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Client-UUID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "ClientUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/update/phone": {
      "put": {
        "tags": [
          "AccountUpdate"
        ],
        "summary": "Account - Update - Phone",
        "description": "1. \"name\": This represents the name of the endpoint. In this case, the name \"Account - Update - Phone\" is indicative of an endpoint that handles updates to a phone number in an account.\n\n2. \"request\": This object contains details about the request to be made to the API.\n\n3. \"auth\": This object describes the authorization method required to access the endpoint. It includes:\n   - \"type\": The type of authorization used, which here is \"bearer\", indicating the Bearer Token Authorization method.\n   - \"bearer\": This array contains an object with three keys:\n     - \"key\": The key which represents the name of the authorization token, here it's \"token\".\n     - \"value\": The value of the token which is \"BearerToken\".\n     - \"type\": Represents the data type of the token, which is \"string\".\n\n4. \"method\": This is the HTTP method used to call the endpoint. For this endpoint, the method is \"PUT\", indicating that we're executing an update operation.\n\n5. \"url\": The URL of the endpoint. In this case, it's \"http://localhost:3000/api/account/update/phone\".\n\n6. \"headers\": The headers to include in the HTTP request. Here, there's a single header with:\n   - \"key\": The key or name of the header field, here it's \"Client-UUID\".\n   - \"value\": The value of this header field, which is \"ClientUUID\".\n   - \"type\": The type of the header field, here it's \"default\".\n\n7. \"body\": The body of the request. This object has two fields:\n   - \"mode\": The type or format of the body data, which is \"raw\" in this case, meaning that the data is sent in a raw block of text.\n   - \"raw\": The actual content to send with the request. This field contains a JSON string with the new phone number (\"newPhone\"), the session ID (\"sessionId\"), and account ID (\"accountId\"). Please note that values shown here are placeholders, replace them with actual values while using the API.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"newPhone\\\":\\\"4084599441\\\",\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Client-UUID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "ClientUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/update/type": {
      "put": {
        "tags": [
          "AccountUpdate"
        ],
        "summary": "Account - Update - Type",
        "description": "This endpoint represents an operation to update the 'type' of an account in a system. It is named \"Account - Update - Type\". The operation uses the 'PUT' method, implying it is for updating a resource on the server. \n\nHere's a breakdown of all the data:\n\n1. `name`: This is the identifier of the endpoint. In this context, it represents the name of the operation which is \"Account - Update - Type\". \n\n2. `request`: This contains all the details of the request that needs to be made to the server.\n\n3. `auth`: This holds the authentication method and credentials required to gain access to the endpoint. The type of authorization here is \"bearer\". It requires a \"token\" for authorization which is a \"BearerToken\" here.\n\n4. `method`: This specifies the HTTP method for the request. In this case, it's \"PUT\", which means it’s used to update an existing resource.\n\n5. `url`: This is the URL of the server where the request will be made. 'http://localhost:3000/api/account/update/type' is the URL in this case.\n\n6. `headers`: These are used to send additional information to the server. In this case, there is one key-value pair as header input. The 'key' is the 'Client-UUID', and its 'value' is the 'ClientUUID'.\n\n7. `body`: This holds the actual data that needs to be sent to the server. Body type is 'raw', implying the data is sent in plain text. An object is being sent here with the following fields:\n   - `accountType`: It signifies the type of the account. In this case, it's \"Business\".\n   - `sessionId`: This is a unique identifier for a session. It's current value is \"sessionId\".\n   - `accountId`: It stands for the unique identifier of the account. It's current value is \"accountId\".",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"accountType\\\":\\\"Business\\\",\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Client-UUID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "ClientUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/update/username": {
      "put": {
        "tags": [
          "AccountUpdate"
        ],
        "summary": "Account - Update - Username",
        "description": "This endpoint is named \"Account - Update - Username\" and it is used to update the username of an account.\n\nIt uses the \"PUT\" method of request which means it's designed to update or replace existing data.\n\nThe URL for this endpoint is \"http://localhost:3000/api/account/update/username\". You can replace the \"localhost:3000\" part with the actual server address where your API is hosted. \n\nAuthorization of the request is managed using a \"bearer\" token which needs to be provided in the \"auth\" field. The key for this is \"token\" and the value should be the actual \"BearerToken\", which is a unique token assigned for each user.\n\nThere is a header field which expects a \"Client-UUID\", this is essentially the unique identifier for each client. The client is expected to send their UUID every time they make a request to this endpoint.\n\nThe request body is sent in \"raw\" mode. The payload contains the new \"username\" that needs to be updated. It also contains a \"sessionId\" which represents the session of the user. The \"accountId\" is the unique identifier of the account that you wish to update the username of.\n\nIn summary, to use this endpoint effectively, you need to include the bearer token, the client UUID, and an appropriate payload in the request. If all these details are accurate, the username of the specified account will be updated successfully.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"username\\\":\\\"fortunevieyra\\\",\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Client-UUID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "ClientUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/update/password": {
      "put": {
        "tags": [
          "AccountUpdate"
        ],
        "summary": "Account - Update - Password",
        "description": "\"name\": This specifies the name of the endpoint. Here, it is \"Account - Update - Password\" implying this API endpoint is used for updating password in the account section.\n\n\"request\": This indicates the type of request to be made to the server, and contains all the required parameters needed to make the request.\n\n\"auth\": It signifies the authentication method to be used. The type here is \"bearer\", which is a HTTP authentication scheme that involves security tokens called bearer tokens.\n\n\"bearer\": It is an array of bearer authentication factors. Here, we have a key-value pair specifying the bearer token.\n\n\"key\": This is the parameter name. For bearer array, the key is 'token'.\n\n\"value\": This is the actual value of the parameter. For bearer array, the value is 'BearerToken', which should be replaced by your actual bearer token.\n\n\"type\": It describes the data type of the parameter. Here, it is 'string', which means the bearer token is a string.\n\n\"method\": This indicates the HTTP method to be used when making the request to the API. In this endpoint, it is 'PUT' which is typically used to update resources.\n\n\"url\": This is the API endpoint where the request will be sent. For this endpoint, the URL is http://localhost:3000/api/account/update/password.\n\n\"headers\": This is a list of all the HTTP headers to be included in the request. In this request, there is one header parameter.\n\n\"key\": For the header, the key is 'Client-UUID'.\n\n\"value\": For the header, the value should be your ClientUUID.\n\n\"type\": This value describes the type for the header field. Here, it is 'default'.\n\n\"body\": This is the data to be sent to the server. In this request, it contains JSON raw data and its options.\n\n\"mode\": This specifies how the body data is sent. Here 'raw' mode means the data is sent exactly as it is. \n\n\"raw\": This is the actual data to be sent in JSON format. It consists of 'password' (values should be your new password), 'sessionId' (values should be your session id), and 'accountId' (values should be your account id).\n\n\"options\": This field defines options for raw data. Here, it specifies that the language used is JSON.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "password": "111111",
                  "sessionId": "sessionId",
                  "accountId": "accountId"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Client-UUID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "ClientUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/verify/account": {
      "post": {
        "tags": [
          "AccountVerify"
        ],
        "summary": "Account - Verify - Account",
        "description": "This endpoint is named \"Account - Verify - Account\". It is designed to verify an account using the POST method. \n\n1. `name`: The name is \"Account - Verify - Account\". This illustrates the purpose of the endpoint, which is to verify an account.\n \n2. `request`: This object contains all the information about the HTTP request.\n\n3. `method`: The method indicates the type of HTTP request method used for the API request. In this case, the method is \"POST\", which signifies that this request will submit data to the server to be processed.\n\n4. `url`: This specifies the URL for the endpoint. The URL is \"http://localhost:3000/api/account/verify/account\". This is the address that we will send our POST request to.\n\n5. `headers`: This currently contains no values; headers are used to pass additional information with the request or the response. They define the operating parameters of an HTTP request or response.\n\n6. `body`: This object contains the information that will be sent to the server. It contains another object with the `mode` and `raw` properties.\n\n7. `mode`: The mode is \"raw\". This refers to the raw body content of the HTTP request. The \"raw\" mode here means that we are sending a raw request body, which is not formatted in any specific way.\n\n8. `raw`: This is the raw request body. It's in the form of a JSON object. It contains three properties: \"unlockCode\", \"sessionId\", and \"accountId\".\n   - `unlockCode`: This is the unlock code used for account verification.\n   - `sessionId`: This refers to the unique identifier of a user session.\n   - `accountId`: This refers to the unique identifier of the account to be verified.\n   \nThis endpoint should be used when you want to verify an account by sending a POST request to the server. The request will contain the user's unlock code, session ID and account ID as parameters.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"unlockCode\\\":\\\"unlockCode\\\",\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\"}\""
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/verify/email": {
      "post": {
        "tags": [
          "AccountVerify"
        ],
        "summary": "Account - Verify - Email Address",
        "description": "This endpoint is named \"Account - Verify - Email Address\". It is designed to verify an email address linked to an account. \n\nIt uses the `POST` method, which allows it to send data to the server to create a new entry in the database. The `POST` method is often used when submitting filled forms.\n\nThe URL for this endpoint is `\"http://localhost:3000/api/account/verify/email\"`. This endpoint lies within your local server running on port 3000. Its path is `/api/account/verify/email`, whereby it's within the 'api', 'account', 'verify', then finally, 'email' subdirectory.\n\nCurrently, it does not contain any custom `headers`. Headers are often used to provide information about the request body and the response, such as its MIME type, or to provide authentication information. If necessary, headers could be added accordingly.\n\nThe `body` of the request is being sent in `raw` mode. Raw mode is used when you want to send information without any encoding. This is useful when you want to send JSON or XML data to the server.\n\nThe raw data being sent consists of two key-value pairs:\n\n- `verificationToken`: The token used to verify the email. This would typically be a unique string that the server generates and sends to the email address for verification.\n- `email`: The email address to be verified. This must match the email address that the server has on record for the associated verification token.\n\nIn normal usage, both `verificationToken` and `email` would need to be replaced with actual data.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"verificationToken\\\":\\\"verificationToken\\\",\\\"email\\\":\\\"email\\\"}\""
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/verify/phone": {
      "post": {
        "tags": [
          "AccountVerify"
        ],
        "summary": "Account - Verify - Phone Number",
        "description": "This endpoint is for the `Account - Verify - Phone Number` API.\n\n**Method**: POST\nThe HTTP method used for this endpoint is a POST request. It's typically used to send data to a server to create a new resource.\n\n**URL**: `http://localhost:3000/api/account/verify/phone`\nThis is the URL at which the API needs to be hit. Since we're in a local development environment, we're using `localhost`. The port we're using to access the local server is `3000`. The path of the API is `/api/account/verify/phone`, which is used to verify an account's phone number.\n\n**Headers**: []\nThis field is empty, meaning we're not sending any additional metadata in the header of this HTTP request. Headers often include items like authorization tokens, content type etc. However, none of that is required by this endpoint.\n\n**Body**:\nThe body of the HTTP request is sent in a `raw` format. This is the data that the API takes as input in order to verify a phone number.\n\n- `verificationCode`: This is the code that is used to verify a phone number. Typically, it's sent by an SMS to the phone number that needs to be verified. \n\n- `phone`: This is the phone number that needs to be verified. It needs to be provided so the API knows which phone number it's supposed to verify.\n\nThis endpoint requires both `verificationCode` and `phone` to be present in the raw JSON body of the HTTP request in order to work correctly.\n\nExample of the request body would be:\n```\n{\n  \"verificationCode\": \"123456\",\n  \"phone\": \"+1234567890\"\n}\n```\n\nMake sure to replace the values with the actual verification code received and the phone number to be verified.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"verificationCode\\\":\\\"verificationCode\\\",\\\"phone\\\":\\\"phone\\\"}\""
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/verify/unlock": {
      "post": {
        "tags": [
          "AccountVerify"
        ],
        "summary": "Account - Verify - Security Code",
        "description": "This endpoint is labeled as \"Account - Verify - Security Code\" and it represents an API operation for verifying a security code for a specific user account.\n\n1. Method: POST\n   This endpoint uses the HTTP POST method, which is typically used to send (or create) data to the server.\n\n2. URL: `http://localhost:3000/api/account/verify/unlock`\n   This is the endpoint's URL. The base URL is `http://localhost:3000`, which denotes your local server when the application is run locally. The path `/api/account/verify/unlock` is the specific route in your application where the data will be sent to be processed.\n\n3. Headers: []  \n   The headers field is currently empty. This is where you'd usually provide additional information, like content type or authentication tokens.\n\n4. Body: \n     In body, we have the following fields:\n   \n   - `mode`: `raw`  \n     The mode property specifies how the request data is being sent. The value `raw` means the data is being sent as a string in the body of the request.\n\n   - `raw`:  \n     This is the actual data payload in string format that's being sent in the request.\n   \n     It contains three fields:\n\n     - `accountId`: The unique identifier of the account. This is a placeholder and should be replaced with actual account Id during the API request.\n  \n     - `sessionId`: Represents a session identifier, typically used for tracking or authenticating user sessions. Replace this placeholder with an actual session Id.\n    \n     - `unlockCode`: This is the security code that needs to be verified for the account. Replace the placeholder with the actual unlock code.\n\nThis endpoint is used to verify a security code (unlockCode) pertaining to a user's session (sessionId) for a specific account (accountId). The payload should be formed by replacing the placeholders with real data and sent as a raw JSON string.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"accountId\\\":\\\"accountId\\\",\\\"sessionId\\\":\\\"sessionId\\\",\\\"unlockCode\\\":\\\"unlockCode\\\"}\""
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/verify/link": {
      "post": {
        "tags": [
          "AccountVerify"
        ],
        "summary": "Account - Verify - Verification Link",
        "description": "The endpoint is named \"Account - Verify - Verification Link\". It is used to validate a user account through a verification link. This endpoint uses the POST method, which is mainly for sending data.\n\nEndpoint URL: This is the URL where the request is sent. In this case, the URL is http://localhost:3000/api/account/verify/link. \n\nThe endpoint does not require any specific headers. Headers are often used to provide additional information that the server needs to process the request.\n\nBody of the request: Here, the body is provided in raw format and contains two data fields that you need to fill:\n\n1. verificationToken: This is the token that is unique to each user and is used to verify the user's identity.\n \n2. email: This is the email address of the user who is trying to verify their account. \n\nRemember to replace \"verificationToken\" and \"email\" with the actual values before sending the request.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"verificationToken\\\":\\\"verificationToken\\\",\\\"email\\\":\\\"email\\\"}\""
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/verify/code": {
      "post": {
        "tags": [
          "AccountVerify"
        ],
        "summary": "Account - Verify - Unlock Code",
        "description": "This endpoint is labeled as `Account - Verify - Unlock Code`. The purpose of this endpoint is to verify and unlock a specific code for an account. \n\nThe method used for this API call is `POST`, indicating that this endpoint is used to send data to the server to create a resource.\n\nThe URL or endpoint where the API call is made is `http://localhost:3000/api/account/verify/code`. This is the path in your API where resources related to verifying and unlocking the account code can be created.\n\nThis endpoint does not use any predefined HTTP headers. Headers are often used to provide information about the request body or response, or about the server or client. Since there are no headers indicated here, the request doesn't carry any additional information in the headers.\n\nThe `body` of the request consists of raw data sent to the server. It is in JSON format which is a standard data format with a diverse range of functionality. Two parameters are passed in this request body:\n\n1. `securityCode`: This is an alphanumeric code associated with the account that needs verification. This will be unique per individual account and must be supplied by the user.\n  \n2. `email`: This is the email address associated with the user's account. It is used to identify the user's account that is being processed for the unlock code.\n\nRemember to replace `securityCode` and `email` placeholders with actual values when you are using this endpoint.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"securityCode\\\":\\\"securityCode\\\",\\\"email\\\":\\\"email\\\"}\""
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/account/verify/username": {
      "post": {
        "tags": [
          "AccountVerify"
        ],
        "summary": "Account - Verify - Username",
        "description": "The given endpoint is called \"Account - Verify - Username\". It is configured to make a POST request to the URL: http://localhost:3000/api/account/verify/username. \n\nHere's a detailed description of each data it includes:\n\n1. \"name\": This is the title or name of the endpoint. You can think of this as a label to identify what the endpoint does. \n\n2. \"request\": This is a complex object that includes all the information necessary for the request. It includes several child objects and data fields.\n\n   a. \"method\": This denotes the HTTP method of the request. In this case, it's a POST request, which implies that this endpoint is used to send data to be processed to a specified resource.\n\n   b. \"url\": This is the URL where the request will be made. Our requests get sent to \"http://localhost:3000/api/account/verify/username\". This is typically the location of the server that will process our request.\n\n   c. \"headers\": This is an array that should include any HTTP headers we want to send with our request. However, in this case, it's empty, which means no additional headers are being sent with the request.\n\n   d. \"body\": This contains the actual data that we're sending with our request. \n\n3. \"body\": This is a complex object that includes the data we're sending and the format we're sending it in. \n\n   a. \"mode\": This describes the format of the data. The value \"raw\" tells us that the data in \"raw\" field is sent as is, and not in any specific format like form-data or x-www-form-urlencoded.\n\n   b. \"raw\": This is the actual data we're sending for processing. In this case, we're sending a JSON object with three properties: \n      \n       i. \"username\": The username of the account that needs verification.\n      \n      ii. \"accountId\": The ID related to the account that is currently being verified.\n     \n     iii. \"sessionId\": The session ID associated with the current user or current verification process.\n  \nIn a nutshell, this endpoint is used to verify a username for a given account ID and session ID in our system by making a POST request to the given URL.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"username\\\":\\\"fortunevieyra1\\\",\\\"accountId\\\":\\\"accountId\\\",\\\"sessionId\\\":\\\"sessionId\\\"}\""
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/article/category/create": {
      "post": {
        "tags": [
          "ArticleCategory"
        ],
        "summary": "Article - Category - Create",
        "description": "This endpoint is labeled as \"Article - Category - Create\" and is designated for creating a new category within an article domain. It uses the POST method and makes a request to \"http://localhost:3000/api/article/category/create\". The endpoint uses Bearer token type for authorization. You need to replace the \"BearerToken\" with your actual bearer token to get authenticated.\n\nIn this request, the following key-value pairs are sent:\n\n1. `sessionId`: Represents the session ID of the active user. Replace \"sessionId\" with the actual ID of the user session.\n\n2. `accountId`: Represents the account ID of the user. Replace \"accountId\" with the actual ID of the user account.\n\n3. `name`: The unique, short, and URL-friendly name of the category. For example, \"Miami Art Week 4\".\n\n4. `displayName`: The full user-friendly name of the category to display in the UI, for instance, \"Miami Art Week 2024\".\n\n5. `description`: A brief explanation about the category. For example, \"An immersive celebration of art and culture during Miami Art Week.\"\n\n6. `tags`: A list of keywords associated with the category, separated by commas. For example, \"Art,Exhibition,Miami,Culture\".\n\nNote: The entire body parameters are in raw JSON format. The format of the JSON data should be as highlighted in the `body.raw` key.\n\nThe endpoint currently contains no custom headers, as indicated by the empty \"key\" and \"value\" fields in `headers`. However, the `type` is set to \"default\", and the `disabled` field is set to `true`, indicating these headers are not currently in use.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "sessionId": "sessionId",
                  "accountId": "accountId",
                  "name": "Miami Art Week 4",
                  "displayName": "Miami Art Week 2024",
                  "description": "An immersive celebration of art and culture during Miami Art Week.",
                  "tags": "Art,Exhibition,Miami,Culture"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/article/category/createBulk": {
      "post": {
        "tags": [
          "ArticleCategory"
        ],
        "summary": "Article - Category - Create Bulk",
        "description": "This endpoint is titled \"Article - Category - Create Bulk\", suggesting that it's used for creating various article categories in one batch.\n\n1. `auth`: This contains the authentication information. It's a bearer authentication type where a token (key-value pair `token: BearerToken`) is sent in the header of the request for authorization. The `type` field defines the data type of the token, in this case, it's a string.\n\n2. `method`: This is a POST request indicating the intention to send data to create new resources at the specified URL.\n\n3. `url`: This is the URL or path endpoint to API that accepts the request. In this case, the server will be running on localhost using port number 3000 with a specific path `/api/article/category/createBulk`.\n\n4. `headers`: An array holder for HTTP headers to be included when sending the request. The provided header fields are blank and disabled by default in this instance.\n\n5. `body`: This contains the actual request payload/data. The `mode` is set to `raw`, allowing you to input JSON data directly. The `raw` field contains the JSON data being transmitted. The `options` field insinuates that the `raw` input should be interpreted as JSON which lets formatting and syntax highlighting applicable.\n\n6. Within the `body`, `sessionId` and `accountId` are unique identifiers for the current session and account. `categories` is an array of objects, each containing information about a category of articles:\n   - `name`: The unique name identifying the category\n   - `displayName`: The name as it will appear to users\n   - `description`: Brief explanation of what the category is about\n   - `tags`: A string of comma-separated values that act as keywords related to the category.\n\nThis endpoint is used for creating multiple article categories at once, with each category having a name, display name, description, and associated tags.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "sessionId": "sessionId",
                  "accountId": "accountId",
                  "categories": [
                    {
                      "name": "Miami Art Week 4",
                      "displayName": "Miami Art Week 2024",
                      "description": "An immersive celebration of art and culture during Miami Art Week.",
                      "tags": "Art,Exhibition,Miami,Culture"
                    },
                    {
                      "name": "Tech Fest 2024",
                      "displayName": "Technology Festival 2024",
                      "description": "A celebration of innovation and technology.",
                      "tags": "Technology,Innovation,Festival,Tech"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/article/category/update": {
      "put": {
        "tags": [
          "ArticleCategory"
        ],
        "summary": "Article - Category - Update",
        "description": "This is the data description for the endpoint named 'Article - Category - Update'. It consists of various components as listed below:\n\n1. **Auth:** This refers to the authentication needed to access this endpoint. It uses a 'Bearer' token type, which should be provided as a string value. The key for this token is 'token' and its value would be a 'BearerToken'. \n\n2. **Method:** This endpoint uses the 'PUT' method which means it is used for updating an existing resource.\n\n3. **URL:** The url 'http://localhost:3000/api/article/category/update' represents the location on the server where the request should be sent to update an article category.\n\n4. **Headers:** Under this, a 'Client-UUID' key is provided with a value 'ClientUUID'. ClientUUID's are universally unique identifiers for a client device.\n\n5. **Body:** The body contains the request payload in raw JSON format. Fields include:\n   - **categoryId:** Unique identifier for the category which needs to be updated.\n   - **sessionId:** Unique identifier for the current session.\n   - **accountId:** Unique identifier for the account that is performing the update.\n   - **name:** New name of the category.\n   - **displayName:** New display name of the category.\n   - **description:** New description of the category.\n   - **tags:** New tags associated with the category, divided by commas.\n\n6. **Options:** This is an extension of the body where the format of raw data is specified. Here, the raw data language is JSON.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "categoryId": "articleCategoryId",
                  "sessionId": "sessionId",
                  "accountId": "accountId",
                  "name": "Miami Art Week 2",
                  "displayName": "Miami Art Week 2024",
                  "description": "An immersive celebration of art and culture during Miami Art Week.",
                  "tags": "Art,Exhibition,Miami,Culture"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Client-UUID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "ClientUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/article/category/get": {
      "get": {
        "tags": [
          "ArticleCategory"
        ],
        "summary": "Article - Category - Get By Short ID",
        "description": "This endpoint is called \"Article - Category - Get By Short ID\". It is used to retrieve a specific article category by a shorter identifier known as \"shortId\". Now let's dive into each aspect of this endpoint:\n\n1. \"name\": This property indicates the name of the endpoint, which is \"Article - Category - Get By Short ID\".\n\n2. \"request\": This property contains the majority of the data for running this API call. \n\n3. \"auth\": This property describes the authentication method used for this API request. This endpoint uses the 'bearer' token type. The \"bearer\" array includes:\n    - \"key\": This signifies the type of data being sent in the bearer token. In this case, it is \"token\".\n    - \"value\": The \"BearerToken\" specifies the expected value. It should be replaced with a valid token string while using this endpoint.\n    - \"type\": This characterizes the data type of the token. As mentioned here, it's a string.\n\n4. \"method\": This property mentions the HTTP method to be used, which in this case is \"GET\".\n\n5. \"url\": This is the API's endpoint URL where the Get request is being sent. \"http://localhost:3000/api/article/category/get/?shortId=articleCategoryShortId\" is the URL, and 'articleCategoryShortId' at the end is a placeholder for the short identifier that should be used to fetch the specific article category.\n\n6. \"headers\": This array usually contains any additional HTTP headers to be sent with the API request. However, in this case, the \"key\" and \"value\" fields are empty, and the header is set to disabled. It would appear that there are no additional headers required for this endpoint.\n\n7. \"body\": This part of the request contains the data that is going out with the request. In this case, the mode is set to 'raw', and the 'raw' field is empty since there's no data to be sent with the GET request. \n\nIn summary, this endpoint is intended to fetch a specific article category by its 'shortId' using a GET request. It requires a bearer token for authentication.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "shortId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "articleCategoryShortId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/article/category/all": {
      "get": {
        "tags": [
          "ArticleCategory"
        ],
        "summary": "Article - Category - Get All",
        "description": "This endpoint is named \"Article - Category - Get All\". It is intended to retrieve all categories associated with articles.\n\nThe \"request\" object holds all necessary information to make the HTTP request itself.\n\n\"auth\" is an object containing the authentication details. It is of type \"Bearer\". The \"bearer\" array consists of an object with three properties - \"key\", \"value\", and \"type\".\n\n- \"key\" is the constant string \"token\"\n- \"value\" will be your Bearer token. This is typically a long series of alphanumeric characters generated by the server for authenticating requests.\n- \"type\" indicates that the value should be a string, so ensure that the token is a string in your routine.\n\nThe \"method\" is \"GET\". This HTTP method is used to retrieve data from the server.\n\n\"url\": This is the URL endpoint that you will use in order to carry out the aforementioned \"GET\" request. The specified URL is \"http://localhost:3000/api/article/category/all\".\n\n\"headers\": An array of header objects that can be sent along with the request. Currently, this includes a default empty header object that is disabled.\n\nThe \"body\" object holds the details of the body of the request. In this case, the \"mode\" is set to \"raw\", which means you can insert raw data into the body. However, as this is a \"GET\" request, the \"raw\" field is empty as \"GET\" requests generally do not include a body.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/article/category/alll": {
      "get": {
        "tags": [
          "ArticleCategory"
        ],
        "summary": "Article - Category - Get All By Account ID",
        "description": "This endpoint, named \"Article - Category - Get All By Account ID\", is used to retrieve all articles by a specific account ID via a GET request. The details of each segment in this endpoint are as follows:\n\n1. \"name\": This is the key that refers to the name of the API endpoint. In this case, it is \"Article - Category - Get All By Account ID\".\n\n2. \"request\": This is where the configuration of the API request is defined. It includes:\n\n- \"auth\": This defines the type of authorization required to access this endpoint. The endpoint uses 'Bearer token' authorization. The token is provided in the \"bearer\" field with a key named \"token\" and a value of \"BearerToken\".\n\n- \"method\": Method used to get the information for the API. It's a 'GET' request which is used when you want to retrieve data.\n\n- \"url\": This is the URL which the request will be sent to. It is \"http://localhost:3000/api/article/category/all/?accountId=accountId\". The accountId at the end indicates where you would replace it with the actual ID of the account.\n\n- \"headers\": These are metadata in the form of key-value pairs, sent in the request. In this case, no headers are defined which is why the key and value fields are empty and \"disabled\" is set to true\n\n- \"body\": This is the data that you send to the path in the HTTP protocol. However, in this case, it has no content; the mode is \"raw\" and the raw field is empty.\n\nRemember to replace 'BearerToken' and 'accountId' with actual values in your application.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "accountId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/article/category/delete": {
      "post": {
        "tags": [
          "ArticleCategory"
        ],
        "summary": "Article - Category - Delete",
        "description": "This endpoint is named \"Article - Category - Delete\". Here's a detailed breakdown of all components of this endpoint: \n\n1. **Name**: The name \"Article - Category - Delete\" gives a clear indication of the function of this endpoint. It's probably for deleting a specific category associated with an article in your application/system.\n\n2. **Request**: This is the main part of the endpoint that carries the necessary information for processing the request on the server.\n\n   - **Auth**: Refers to the authentication type used. Here \"bearer\" token type is used. It contains a key named \"token\", which should hold a string type value which here is termed as \"sessionId\". This is likely for authenticating the request.\n\n   - **Method**: This is the HTTP method used, which is \"POST\". It's generally used to send data to a server to create a new resource.\n\n   - **URL**: This is the address to which this request is going to be sent. Here, it is \"http://localhost:3000/api/article/category/delete\".\n\n   - **Headers**: This is an array of various properties that can be sent along the request. In this case, it's empty and disabled. It can be used for different purposes like specifying content type, authentication etc.\n\n   - **Body**: This part contains all the major data that's going to be sent to the server. Here the mode used is \"raw\", meaning you are sending the data as directly inputted without any alterations.\n   \n       - The raw data contains three properties: \"sessionId\", \"accountId\", and \"categoryId\". These are likely to be identifiers for the session, the account, and the category of the article that is being deleted.\n        \nThis endpoint sends a POST request to delete a specific article's category from your application. It uses a bearer token authentication and requires the session ID, account ID, and category ID to be included in the body of the request.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\",\\\"categoryId\\\":\\\"articleCategoryId\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/article/general/create": {
      "post": {
        "tags": [
          "ArticleGeneral"
        ],
        "summary": "Article - General - Create Auto",
        "description": "This endpoint is titled \"Article - General - Create Auto\". It is used to create a new article through an HTTP POST request, with the URL specified as \"http://localhost:3000/api/article/general/create\".\n\nThe authentication used for this endpoint is \"Bearer Authentication\". It requires a bearer token provided in the format: \"BearerToken\".\n\nThere's also a placeholder for potential additional headers, although it's currently disabled by default.\n\nThe input body of the endpoint request is in raw JSON format. These are:\n\n1. \"accountId\" - The account identifier string representing the user.\n2. \"sessionId\" - The session identifier string representing the session.\n3. \"category\" - Represents the main categorization of the article.\n4. \"subCategory\" - Represents the sub categorization under the main category.\n5. \"topic\" - The primary discussion point of the article.\n6. \"title\" - The title of the article.\n7. \"author\" - The name of the author of the article.\n8. \"estimatedTime\" - The estimated time to read the article.\n9. \"date\" - The date the article was written.\n10. \"image\" - A URL string to an image related to the article.\n11. \"tags\" - An array of strings including various tags related to the article.\n12. \"content\" - An object containing extended content for the article like:\n     - \"startDate\" and \"endDate\": Event duration for the article feature\n     - \"location\": Where the event of the featured article takes place\n     - \"featuredArtists\": Artists who are highlighted in the article\n     - \"collections\": The collections featured or mentioned in the article.\n     - \"article\": An array of objects where each object represents an event related to the article with fields like:\n        - \"type\": Type of the event\n        - \"date\": Date of the event\n        - Various other fields depending on the type of event (like \"time\", \"activities\", \"chef\" based on context)\n\nThe language type of the input request body is set to JSON. This confirms that the server expects the body content to be in JSON format.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "accountId": "accountId",
                  "sessionId": "sessionId",
                  "category": "My New Shiny Category",
                  "subCategory": "My New Shiny Sub Category",
                  "topic": "My New Interesting Topic",
                  "title": "Invisible Luggage Exhibition",
                  "author": "Fortune Vieyra",
                  "estimatedTime": "5 minutes",
                  "date": "2024-12-02",
                  "image": "https://www.beladed.com/img/logo.png",
                  "tags": [
                    "Art",
                    "Exhibition",
                    "SocialJustice",
                    "GenderIdentity",
                    "Immigration"
                  ],
                  "content": {
                    "startDate": "2024-12-02",
                    "endDate": "2024-12-15",
                    "location": "Historic Hampton House, Miami, FL",
                    "featuredArtists": [
                      "Beth Rudin DeWoody",
                      "Zoe Lukov",
                      "Laura Dvorkin",
                      "Maynard Monrow"
                    ],
                    "collections": [
                      "Rubell Family Collection",
                      "Bernard Lumpkin Collection",
                      "Joy Simmons Collection"
                    ],
                    "article": [
                      {
                        "type": "Opening Night",
                        "date": "2024-12-02",
                        "time": "18:00",
                        "activities": [
                          "Cocktails",
                          "Preview Dinner",
                          "Artist Introductions"
                        ]
                      },
                      {
                        "type": "Panel Discussion",
                        "date": "2024-12-05",
                        "time": "15:00",
                        "topic": "Art and Social Justice"
                      },
                      {
                        "type": "VIP Dinner",
                        "date": "2024-12-10",
                        "time": "19:00",
                        "chef": "Jessica Harris"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/article/general/createBulk": {
      "post": {
        "tags": [
          "ArticleGeneral"
        ],
        "summary": "Article - General - Create Bulk Auto",
        "description": "The endpoint `Article - General - Create Bulk Auto` is a HTTP `POST` request used to create multiple (\"bulk\") articles in the system.\n\nThe `auth` object is how the API handles authentication. It uses a `type` of \"bearer\", which means it's expecting a bearer token in the request header. The `bearer` array holds key-value pair objects, where the `key` is the \"token\" and its corresponding `value` is the \"BearerToken\" we provide.\n\nThe `url` is the path where the request is sent. In this case, it's a local development server (`localhost`) on port `3000`.\n\nThe `headers` object in the request is currently empty and has `disabled` set to `true`, which means no specific HTTP headers are set for this request.\n\nThe `body` encompasses the actual content of the request. It is sent as `raw` JSON. \n\nThe data in the `body` includes:\n\n- `sessionId`: The unique identifier for the ongoing session.\n- `accountId`: The unique identifier for the user's account.\n- `articles`: An array of objects, with each object representing an individual article and containing:\n  - `title`: The article's title.\n  - `category`: The category the article belongs to.\n  - `subCategory`: Subcategory of the article.\n  - `topic`: Topic of the article.\n  - `date`: The date of the article.\n  - `author`: Author of the article.\n  - `estimatedTime`: Estimated reading time of the article.\n  - `image`: URL of the image related to the article.\n  - `content`: An array representing sections of the article's content. Each section is an object that includes a `type` (either \"text\" or \"section\"), `title` (for \"section\" type), and `content`.\n  - `tags`: An array of tags associated with the article.\n\nNote: The `title` of each article must be unique in the bulk creation. The `date` needs to be in a recognized format like \"DD MM YYYY\". The `image` URL needs to be a valid, publicly accessible URL.\n\nThe `options` object (inside `body`) defines the language of the `raw` input as `json`.\n\nIn summary, this endpoint allows the bulk creation of articles based on the provided JSON data, including details as article title, category, sub-category, author, estimated reading time, image URL, content, and tags. It requires a bearer token for authentication.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": "{\n  \"sessionId\": \"sessionId\",\n  \"accountId\": \"accountId\",\n  \"articles\": [\n    {\n      \"title\": \"how to change your email address on beladed\",\n      \"category\": \"Account Management\",\n      \"subCategory\": \"Account and Security\",\n      \"topic\": \"Update my account\",\n      \"date\": \"15 May 2024\",\n      \"author\": \"Alex Johnson\",\n      \"estimatedTime\": \"5 mins\",\n      \"image\": \"https://www.bldcdn.com/images/articles/how%20to%20change%20your%20email%20address%20on%20beladed.webp\",\n      \"content\": [\n        {\n          \"type\": \"text\",\n          \"content\": \"Keeping your email address up-to-date on Beladed is crucial for account security and communication. Follow these steps to change your email address quickly and securely.\"\n        },\n        {\n          \"type\": \"section\",\n          \"title\": \"Step 1: Log In to Your Beladed Account\",\n          \"content\": \"Start by logging into your Beladed account using your current credentials at beladed.com.\"\n        },\n        {\n          \"type\": \"section\",\n          \"title\": \"Step 2: Navigate to Account Settings\",\n          \"content\": \"Once logged in, click on your profile icon in the top-right corner and select 'Account Settings' from the dropdown menu.\"\n        },\n        {\n          \"type\": \"section\",\n          \"title\": \"Step 3: Locate Email Settings\",\n          \"content\": \"In the Account Settings page, find the 'Email' or 'Contact Information' section.\"\n        },\n        {\n          \"type\": \"section\",\n          \"title\": \"Step 4: Enter New Email Address\",\n          \"content\": \"Click on the 'Change Email' button and enter your new email address in the provided field. You may need to enter your current password for security verification.\"\n        },\n        {\n          \"type\": \"section\",\n          \"title\": \"Step 5: Verify New Email\",\n          \"content\": \"Beladed will send a verification link to your new email address. Check your inbox (and spam folder) for this email and click the verification link to confirm the change.\"\n        },\n        {\n          \"type\": \"section\",\n          \"title\": \"Step 6: Confirmation\",\n          \"content\": \"Once verified, log out and log back in to ensure the change has taken effect. You should now receive all Beladed communications at your new email address.\"\n        },\n        {\n          \"type\": \"text\",\n          \"content\": \"Remember to update your email on any linked accounts or services to maintain seamless integration with your Beladed account.\"\n        }\n      ],\n      \"tags\": [\n        \"Account Management\",\n        \"Email\",\n        \"Security\",\n        \"Profile Settings\"\n      ]\n    },\n    {\n      \"title\": \"resetting your password on beladed\",\n      \"category\": \"Account Management\",\n      \"subCategory\": \"Account and Security\",\n      \"topic\": \"Update my account\",\n      \"date\": \"20 May 2024\",\n      \"author\": \"Sam Lee\",\n      \"estimatedTime\": \"4 mins\",\n      \"image\": \"https://www.bldcdn.com/images/articles/resetting%20your%20password%20on%20beladed.webp\",\n      \"content\": [\n        {\n          \"type\": \"text\",\n          \"content\": \"Forgot your password? Don't worry! Beladed makes it easy to reset your password and regain access to your account. Follow these simple steps to create a new, secure password.\"\n        },\n        {\n          \"type\": \"section\",\n          \"title\": \"Step 1: Access the Login Page\",\n          \"content\": \"Go to the Beladed login page at beladed.com/login.\"\n        },\n        {\n          \"type\": \"section\",\n          \"title\": \"Step 2: Click 'Forgot Password'\",\n          \"content\": \"Look for the 'Forgot Password?' link below the login form and click on it.\"\n        },\n        {\n          \"type\": \"section\",\n          \"title\": \"Step 3: Enter Your Email\",\n          \"content\": \"On the password reset page, enter the email address associated with your Beladed account and click 'Submit' or 'Reset Password'.\"\n        },\n        {\n          \"type\": \"section\",\n          \"title\": \"Step 4: Check Your Email\",\n          \"content\": \"Beladed will send a password reset link to your email. Check your inbox (and spam folder) for an email from Beladed support.\"\n        },\n        {\n          \"type\": \"section\",\n          \"title\": \"Step 5: Click the Reset Link\",\n          \"content\": \"Open the email and click on the password reset link provided. This will take you to a page where you can create a new password.\"\n        },\n        {\n          \"type\": \"section\",\n          \"title\": \"Step 6: Create a New Password\",\n          \"content\": \"Enter your new password. Make sure it's strong and unique. Beladed may have specific requirements for password strength, so follow the guidelines provided.\"\n        },\n        {\n          \"type\": \"section\",\n          \"title\": \"Step 7: Confirm and Log In\",\n          \"content\": \"After setting your new password, you'll be redirected to the login page. Use your email and new password to log in to your account.\"\n        },\n        {\n          \"type\": \"text\",\n          \"content\": \"Remember to use a unique, strong password for your Beladed account to ensure the best security. Consider using a password manager to keep track of your passwords securely.\"\n        }\n      ],\n      \"tags\": [\n        \"Account Management\",\n        \"Password\",\n        \"Security\",\n        \"Login\"\n      ]\n    },\n    {\n      \"title\": \"updating your profile information on beladed\",\n      \"category\": \"Account Management\",\n      \"subCategory\": \"Profile Customization\",\n      \"topic\": \"Updating profile picture and banner\",\n      \"date\": \"25 May 2024\",\n      \"author\": \"Jamie Smith\",\n      \"estimatedTime\": \"6 mins\",\n      \"image\": \"https://www.bldcdn.com/images/articles/updating%20your%20profile%20information%20on%20beladed.webp\",\n      \"content\": [\n        {\n          \"type\": \"text\",\n          \"content\": \"Keeping your Beladed profile up-to-date helps viewers find and connect with you more easily. This guide will walk you through the process of updating your profile information to ensure your Beladed presence is current and engaging.\"\n        },\n        {\n          \"type\": \"section\",\n          \"title\": \"Step 1: Log In to Beladed\",\n          \"content\": \"Start by logging into your Beladed account at beladed.com using your email and password.\"\n        },\n        {\n          \"type\": \"section\",\n          \"title\": \"Step 2: Access Your Profile Settings\",\n          \"content\": \"Click on your profile icon in the top-right corner of the page, then select 'Profile Settings' from the dropdown menu.\"\n        },\n        {\n          \"type\": \"section\",\n          \"title\": \"Step 3: Edit Basic Information\",\n          \"content\": \"In the profile settings, you can update your display name, bio, and profile picture. Click on the 'Edit' button next to each section to make changes.\"\n        },\n        {\n          \"type\": \"section\",\n          \"title\": \"Step 4: Update Your Stream Information\",\n          \"content\": \"Scroll down to find sections for updating your stream title, game category, and tags. Keep these current to help viewers find your content.\"\n        },\n        {\n          \"type\": \"section\",\n          \"title\": \"Step 5: Manage Social Media Links\",\n          \"content\": \"Look for the 'Social Links' section where you can add or update links to your other social media profiles. This helps viewers connect with you on other platforms.\"\n        },\n        {\n          \"type\": \"section\",\n          \"title\": \"Step 6: Customize Your Channel Appearance\",\n          \"content\": \"Beladed offers options to customize your channel's look. Explore the 'Channel Appearance' settings to update your banner image, accent colors, and other visual elements.\"\n        },\n        {\n          \"type\": \"section\",\n          \"title\": \"Step 7: Save Your Changes\",\n          \"content\": \"After making all desired updates, scroll to the bottom of the page and click the 'Save Changes' button to apply your updates.\"\n        },\n        {\n          \"type\": \"text\",\n          \"content\": \"Remember to review and update your profile regularly to keep your information fresh and relevant. A well-maintained profile can help attract and retain viewers on Beladed.\"\n        }\n      ],\n      \"tags\": [\n        \"Profile Management\",\n        \"Customization\",\n        \"Account Settings\"\n      ]\n    },\n    {\n      \"title\": \"recovering a hacked beladed account\",\n      \"category\": \"Account Management\",\n      \"subCategory\": \"Account and Security\",\n      \"topic\": \"Account issues\",\n      \"date\": \"30 May 2024\",\n      \"author\": \"Chris Taylor\",\n      \"estimatedTime\": \"8 mins\",\n      \"image\": \"https://www.bldcdn.com/images/articles/recovering%20a%20hacked%20beladed%20account.webp\",\n      \"content\": [\n        {\n          \"type\": \"text\",\n          \"content\": \"If you suspect your Beladed account has been hacked, it's crucial to act quickly to regain control and secure your account. Follow these steps to recover your hacked account.\"\n        },\n        {\n          \"type\": \"section\",\n          \"title\": \"Step 1: Reset Your Password\",\n          \"content\": \"Immediately change your password by using the 'Forgot Password' feature on the login page. This will help prevent further unauthorized access.\"\n        },\n        {\n          \"type\": \"section\",\n          \"title\": \"Step 2: Enable Two-Factor Authentication\",\n          \"content\": \"After regaining access, enable two-factor authentication (2FA) to add an extra layer of security to your account.\"\n        },\n        {\n          \"type\": \"section\",\n          \"title\": \"Step 3: Review Account Activity\",\n          \"content\": \"Check your account's recent activity, including stream history, chat logs, and any changes to your profile or settings.\"\n        },\n        {\n          \"type\": \"section\",\n          \"title\": \"Step 4: Update Email and Recovery Options\",\n          \"content\": \"Ensure your email address is up-to-date and add additional recovery options like a phone number or backup email.\"\n        },\n        {\n          \"type\": \"section\",\n          \"title\": \"Step 5: Contact Beladed Support\",\n          \"content\": \"If you're still experiencing issues or notice unauthorized changes you can't reverse, contact Beladed support for further assistance.\"\n        },\n        {\n          \"type\": \"text\",\n          \"content\": \"Remember to use strong, unique passwords for all your accounts and be cautious about phishing attempts to prevent future hacking incidents.\"\n        }\n      ],\n      \"tags\": [\n        \"Account Security\",\n        \"Hacking\",\n        \"Recovery\",\n        \"Security\"\n      ]\n    },\n    {\n      \"title\": \"creating engaging stream overlays\",\n      \"category\": \"Streaming Essentials\",\n      \"subCategory\": \"Getting Started with Streaming\",\n      \"topic\": \"Streaming software setup\",\n      \"date\": \"1 June 2024\",\n      \"author\": \"David Park\",\n      \"estimatedTime\": \"12 mins\",\n      \"image\": \"https://www.bldcdn.com/images/articles/creating%20engaging%20stream%20overlays.webp\",\n      \"content\": [\n        {\n          \"type\": \"text\",\n          \"content\": \"Learn how to design and implement professional-looking stream overlays that enhance viewer experience.\"\n        },\n        {\n          \"type\": \"section\",\n          \"title\": \"Essential Overlay Elements\",\n          \"content\": \"Discover the key components that make up an effective stream overlay, from alerts to social media displays.\"\n        }\n      ],\n      \"tags\": [\n        \"Stream Design\",\n        \"Overlays\",\n        \"Customization\",\n        \"Branding\"\n      ]\n    },\n    {\n      \"title\": \"maximizing revenue through channel memberships\",\n      \"category\": \"Monetization\",\n      \"subCategory\": \"Earning Revenue\",\n      \"topic\": \"Channel Subscriptions\",\n      \"date\": \"3 June 2024\",\n      \"author\": \"Rachel Kim\",\n      \"estimatedTime\": \"15 mins\",\n      \"image\": \"https://www.bldcdn.com/images/articles/maximizing%20revenue%20through%20channel%20memberships.webp\",\n      \"content\": [\n        {\n          \"type\": \"text\",\n          \"content\": \"Explore strategies to create valuable membership tiers and increase subscriber retention.\"\n        },\n        {\n          \"type\": \"section\",\n          \"title\": \"Designing Membership Tiers\",\n          \"content\": \"Learn how to structure your membership levels to provide value at every price point.\"\n        }\n      ],\n      \"tags\": [\n        \"Monetization\",\n        \"Memberships\",\n        \"Revenue\",\n        \"Subscriber Benefits\"\n      ]\n    },\n    {\n      \"title\": \"setting up streamlabs alerts effectively\",\n      \"category\": \"Technical Troubleshooting\",\n      \"subCategory\": \"Software Issues\",\n      \"topic\": \"Integration Issues\",\n      \"date\": \"5 June 2024\",\n      \"author\": \"Marcus Chen\",\n      \"estimatedTime\": \"8 mins\",\n      \"image\": \"https://www.bldcdn.com/images/articles/setting%20up%20streamlabs%20alerts%20effectively.webp\",\n      \"content\": [\n        {\n          \"type\": \"text\",\n          \"content\": \"Configure your Streamlabs alerts to enhance viewer engagement and show appreciation for support.\"\n        }\n      ],\n      \"tags\": [\n        \"Streaming Tools\",\n        \"Alerts\",\n        \"Streamlabs\",\n        \"Stream Setup\"\n      ]\n    },\n    {\n      \"title\": \"building a moderation team for your channel\",\n      \"category\": \"Safety and Community Guidelines\",\n      \"subCategory\": \"Community Standards\",\n      \"topic\": \"Moderation Tools\",\n      \"date\": \"7 June 2024\",\n      \"author\": \"Sophie Martinez\",\n      \"estimatedTime\": \"10 mins\",\n      \"image\": \"https://www.bldcdn.com/images/articles/building%20a%20moderation%20team%20for%20your%20channel.webp\",\n      \"content\": [\n        {\n          \"type\": \"text\",\n          \"content\": \"Learn how to recruit, train, and manage effective moderators for your streaming community.\"\n        }\n      ],\n      \"tags\": [\n        \"Moderation\",\n        \"Community Management\",\n        \"Safety\",\n        \"Team Building\"\n      ]\n    },\n    {\n      \"title\": \"optimizing your stream for mobile viewers\",\n      \"category\": \"Mobile Streaming\",\n      \"subCategory\": \"Mobile Setup\",\n      \"topic\": \"Technical Requirements\",\n      \"date\": \"9 June 2024\",\n      \"author\": \"James Wilson\",\n      \"estimatedTime\": \"7 mins\",\n      \"image\": \"https://www.bldcdn.com/images/articles/optimizing%20your%20stream%20for%20mobile%20viewers.webp\",\n      \"content\": [\n        {\n          \"type\": \"text\",\n          \"content\": \"Ensure your stream looks great on all devices with these mobile-friendly optimization tips.\"\n        }\n      ],\n      \"tags\": [\n        \"Mobile Streaming\",\n        \"Optimization\",\n        \"Technical Setup\"\n      ]\n    },\n    {\n      \"title\": \"creating compelling channel panels\",\n      \"category\": \"Content Creation\",\n      \"subCategory\": \"Stream Planning\",\n      \"topic\": \"Stream Preparation\",\n      \"date\": \"11 June 2024\",\n       \"Content Rights\"\n      ]\n    }\n  ]\n}"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/article/general/update": {
      "put": {
        "tags": [
          "ArticleGeneral"
        ],
        "summary": "Article - General - Update Auto",
        "description": "The given endpoint updates a general-type article. Here are the data details:\n\n- **name**: The name is \"Article - General - Update Auto\", which indicates that this endpoint is used for updating general articles automatically.\n\n- **request**: This is the main configuration for making the request.\n\n  - **auth**: The \"auth\" field is used for API authentication. It is using bearer token authentication. The \"token\" key should be replaced with a valid bearer token for successful authentication.\n\n  - **method**: The request method is \"PUT\", which means it is used to update an existing resource.\n\n  - **url**: The URL for this request is \"http://localhost:3000/api/article/general/update\".\n\n  - **headers**: In the headers, we have the \"Client-UUID\" that is a unique identifier for the client making the request.\n\n  - **body**: The content of the request with mode as \"raw\" and language as \"json\". This body needs to be filled with proper data for updating the article. Here are the body fields:\n    \n    - **articleId**: The unique identifier of the article\n    - **accountId**: The unique identifier for the account\n    - **sessionId**: The unique identifier for a session\n    - **category, subCategory, and topic**: Category and subcategory of the article, and the topic it refers to.\n    - **title and author**: Title of the article and the author's name.\n    - **estimatedTime**: An estimate of how long it will take to read the article.\n    - **date**: Publication date of the article\n    - **image**: URL of the article image\n    - **tags**: Tags associated with the article\n    - **content**: It contains further details like start date, end date, location, featured artists, collections, details about each event in the article like event type, date, time, and specific details about the event like activities, topic, chef etc.\n    \n  - **options**: It specifies that the raw body language is in JSON format.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "articleId": "articleId",
                  "accountId": "accountId",
                  "sessionId": "sessionId",
                  "category": "My New Shiny Category",
                  "subCategory": "My New Shiny Sub Category",
                  "topic": "My New Interesting Topic",
                  "title": "Invisible Luggage Exhibition 3.0",
                  "author": "Fortune Vieyra",
                  "estimatedTime": "5 minutes",
                  "date": "2024-12-02",
                  "image": "https://www.beladed.com/img/logo.png",
                  "tags": [
                    "Art",
                    "Exhibition",
                    "SocialJustice",
                    "GenderIdentity",
                    "Immigration"
                  ],
                  "content": {
                    "startDate": "2024-12-02",
                    "endDate": "2024-12-15",
                    "location": "Historic Hampton House, Miami, FL",
                    "featuredArtists": [
                      "Beth Rudin DeWoody",
                      "Zoe Lukov",
                      "Laura Dvorkin",
                      "Maynard Monrow"
                    ],
                    "collections": [
                      "Rubell Family Collection",
                      "Bernard Lumpkin Collection",
                      "Joy Simmons Collection"
                    ],
                    "article": [
                      {
                        "type": "Opening Night",
                        "date": "2024-12-02",
                        "time": "18:00",
                        "activities": [
                          "Cocktails",
                          "Preview Dinner",
                          "Artist Introductions"
                        ]
                      },
                      {
                        "type": "Panel Discussion",
                        "date": "2024-12-05",
                        "time": "15:00",
                        "topic": "Art and Social Justice"
                      },
                      {
                        "type": "VIP Dinner",
                        "date": "2024-12-10",
                        "time": "19:00",
                        "chef": "Jessica Harris"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Client-UUID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "ClientUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/article/general/get": {
      "get": {
        "tags": [
          "ArticleGeneral"
        ],
        "summary": "Article - General - Get By Account ID",
        "description": "This API endpoint is titled \"Article - General - Get By Account ID\". \n\n1. Request Type: It is a GET request used to fetch data.\n\n2. Authentication: The authentication type is 'Bearer'. It uses a bearer token to authenticate the request. You need to replace \"BearerToken\" with your valid token for access.\n\n3. URL: The URL for the request is http://localhost:3000/api/article/general/get?accountId=accountId. In this URL, replace \"accountId\" query parameter with the actual account id whose articles you want to retrieve.\n\n4. Headers: No additional headers are required for this API request. Default headers will automatically be added when the request is made.\n\n5. Body: The body part is empty, as it's not needed in a GET request. \n\nIn a nutshell, this endpoint fetches the articles related to a specific account based on its ID. This is done through a GET request, which requires the use of a bearer token for authentication.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "accountId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/article/general/all": {
      "get": {
        "tags": [
          "ArticleGeneral"
        ],
        "summary": "Article - General - Get All By Topic ID",
        "description": "This endpoint is titled \"Article - General - Get All By Topic ID\". Here is a detailed explanation of each field:\n\n- `name`: This is the title of the endpoint. It is an essential brief description used to identify the endpoint's purpose. In this case, it is used to retrieve all general articles associated with a given topic ID.\n\n- `request`: This field contains the details of the API request to be made.\n\n   - `auth`: This part specifies the authentication required for making the API request.\n        - `type`: Shows the type of authentication. Here it is \"bearer\" authentication.\n        - `bearer`: Contains an array with information about the bearer token. \n            - `key`: This is the name of the field required for the token, which in this case is \"token\".\n            - `value`: This is the placeholder for the token value.\n            - `type`: Shows the type of the field. For the \"token\" field, the type is \"string\".\n        \n   - `method`: Describes the type of API request. For this endpoint, a \"GET\" method is used, meaning it retrieves information from the server without modifying any data.\n\n   - `url`: This specifies the URL to which the API request is made. It includes a parameter, \"topicId\", where the topic ID to filter articles by should be inputted.\n\n   - `headers`: This section contains details regarding the headers to be sent with the request. In this case, it's an empty field, disabled, and set to the default type.\n\n   - `body`: This section contains information about the body of the request.\n       - `mode`: Represents how the data in the body is being sent. In this case, it is set to \"raw\", indicating that the data must be sent exactly as provided, but it's empty in this request since \"GET\" method is used.\n\nNote: The bearer token should be replaced by a real token when sending the request for authentication. Furthermore, a real topic ID should be included in the URL instead of the placeholder \"articleTopicId\".",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "topicId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "articleTopicId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/article/general/delete": {
      "post": {
        "tags": [
          "ArticleGeneral"
        ],
        "summary": "Article - General - Delete",
        "description": "This endpoint is called \"Article - General - Delete\". As the name suggests, it is used to delete a general article. This is what each part of the endpoint does:\n\n1. `auth`: This section deals with authentication. This endpoint uses `bearer` authentication. Here, `token` is the key, `sessionId` is the value and the type of the `bearer token` is a `string`. This means you need to input a valid session ID as your bearer token to be able to successfully access this endpoint.\n\n2. `method`: The method used here is `POST`. This means you're sending data to the server with the request to delete a specific general article.\n\n3. `url`: This is the URL you must send your request to. In this case, it is http://localhost:3000/api/article/general/delete.\n\n4. `headers`: The headers are set to `default` and `disabled`, which means no extra HTTP headers are included in the request.\n\n5. `body`: This section specifies the data you send to the server. The `mode` specified here is `raw`, which means you're sending a string of text.\n   \n   Inside the `raw` string, there are three properties:\n   - `sessionId`: This is where you input the ID of the session.\n   - `accountId`: This is where you input the ID of the account that wants to delete the article.\n   - `article`: This is where you input the article that you want to delete.\n\nMake sure to replace `sessionId`, `accountId` and `article` with the actual information during your request.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\",\\\"article\\\":\\\"article\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/article/subcategory/create": {
      "post": {
        "tags": [
          "ArticleSubcategory"
        ],
        "summary": "Article - SubCategory - Create Auto",
        "description": "1. `name`: This represents the name of the API endpoint. In this case, it's \"Article - SubCategory - Create Auto\". This is also likely what the endpoint is used for, which is to create auto subcategories for articles.\n\n2. `request`: This includes all the details related to the HTTP request method, endpoint URL, headers, body, and authorization type used in the API call. \n\n3. `auth`: This section provides details about the type of authentication being used. Here, the type is \"bearer\", which indicates bearer token authentication is used for this request. A bearer token, represented by the `key` value pair of \"token\" and \"BearerToken\", is sent for authorization.\n\n4. `method`: The HTTP method for this request is \"POST\", which is mostly used to send data to a server to create a new resource.\n\n5. `url`: This is the URL endpoint where the API call is being made. This endpoint is used to create a new subcategory under the article's category.\n\n6. `headers`: These are the default headers for the request. In this case, the header key and value are both empty and disabled.\n\n7. `body`: This is the data which is sent to the server. This data is sent in raw JSON format. It contains several fields: \n\n   - `sessionId`: This is likely an identifier for the session in which the API call is being made.\n   - `accountId`: This could be an identifier for the user or system making the API call.\n   - `displayName`: This is the name that will be displayed for the new subcategory.\n   - `description`: Provides a description of the new subcategory being created.\n   - `tags`: These are keywords associated with the new subcategory.\n   - `category`: This is the parent category under which the new subcategory is created.\n\n8. `options`: This field specifies that the request body \"raw\" data is in JSON format.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "sessionId": "sessionId",
                  "accountId": "accountId",
                  "displayName": "Miami Art Week 2024",
                  "description": "An immersive celebration of art and culture during Miami Art Week.",
                  "tags": "Art,Exhibition,Miami,Culture",
                  "category": "My Very Own Category"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/article/subcategory/createBulk": {
      "post": {
        "tags": [
          "ArticleSubcategory"
        ],
        "summary": "Article - SubCategory - Create Bulk Auto",
        "description": "1. `name`: This specifies the name of the API endpoint, i.e., \"Article - SubCategory - Create Bulk Auto\". This denotes that this endpoint is used to create multiple subcategories automatically in articles.\n\n2. `request`: This constitutes the main body of the API request and includes several subparts:\n\n   2.1. `auth`: This dictates the type of authentication used for this API endpoint. In this case, `type` is \"bearer\", implying bearer token authentication is required. `bearer` consists further of a `key` termed as \"token\", and a `value` signaled as \"BearerToken\". It should be replaced with the actual token for authentication.\n\n   2.2. `method`: This mentions the HTTP method (or verb) used for the API request. In this case, it specifies \"POST\", which means this request will be used to send data to the server to create new resources.\n\n   2.3. `url`: This represents the URL where the API request will be sent. Here, it signifies our local host URL targeted at creating bulk subcategories in articles.\n\n   2.4. `headers`: This usually holds metadata associated with the API request. Currently, it has no definite value enabled.\n\n   2.5. `body`: This forms the main content of the API request.\n\n       2.5.1. `mode`: It states that data is sent in a \"raw\" format.\n   \n       2.5.2. `raw`: It encompasses the actual JSON data to be sent in the request. It contains `sessionId`, `accountId`, and `subCategories`. Subcategories field is an array of objects. Each object in the array has `name`, `displayName`, `categoryId`, `category`, `description`, and `tags`. These fields provide detailed information about each subcategory such as its name, id, associated category, and brief description along with relevant tags.\n   \n       2.5.3. `options`: It defines how the `raw` data should be interpreted, with `language` stating that the raw data is JSON formatted.\n\nThe above data constitutes a detailed description of all the information present in the `POST` request API endpoint for creating multiple subcategories in articles.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "sessionId": "sessionId",
                  "accountId": "accountId",
                  "subCategories": [
                    {
                      "name": "Digital Art",
                      "displayName": "Digital Art Subcategory",
                      "categoryId": "12345",
                      "category": "Art",
                      "description": "Subcategory for digital artworks.",
                      "tags": "Digital,Art,Subcategory"
                    },
                    {
                      "name": "AI Innovations",
                      "displayName": "AI in Art",
                      "category": "Art",
                      "description": "Subcategory for AI-based artistic innovations.",
                      "tags": "AI,Art,Innovation"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/article/subcategory/update": {
      "put": {
        "tags": [
          "ArticleSubcategory"
        ],
        "summary": "Article - SubCategory - Update Auto",
        "description": "This endpoint is used to update an auto-generated subcategory under the 'Article' main category.\n\nHere's a detailed explanation of each field that needs to be provided:\n\n1. Name: This is the title or name of the endpoint, namely \"Article - SubCategory - Update Auto\". \n\n2. Request: This section contains all the details regarding the HTTP request.\n\n3. Auth: Here, the type of authorisation is 'bearer', which means OAuth 2.0 authentication is used. The bearer key is where you have to input your bearer token.\n\n4. Method: The HTTP request method for this endpoint is 'PUT', indicating that you are updating information.\n\n5. Url: This is the API call's endpoint. By making a PUT request at this URL, \"http://localhost:3000/api/article/subcategory/update\", you request the server to update the specified subcategory.\n\n6. Headers: In this field, there is one key-value pair defined, 'Client-UUID'. It uniquely identifies the client sending the request. \n\n7. Body: This section contains the specific data that should be updated. \n\n- Mode: Here, the chosen mode is 'raw', which allows you to write the data as needed in text format.\n  \n- Raw: This field contains JSON text with keys for 'subCategoryId', 'sessionId', 'accountId', 'category', 'displayName', 'description' and 'tags'. \n\n- 'subCategoryId': This is the unique identifier for the sub-category you want to update.\n  \n- 'sessionId': Input the session identifier here, which is used to maintain session state between requests.\n  \n- 'accountId': Input the account identifier, which is related to the user account making the change.\n  \n- 'category': This is the category name which you want to change or update.\n  \n- 'displayName':  This field is for renaming the display name of the category.\n  \n- 'description': This is for updating the description of the category.\n  \n- 'tags': The tags related to this category can be updated and should be comma-separated strings.\n\n- Options: In this field, the language specified is 'json' for the raw body data.\n\nEnsure to replace the placeholders with actual data before making the request.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "subCategoryId": "articleSubCategoryId",
                  "sessionId": "sessionId",
                  "accountId": "accountId",
                  "category": "My Shiny New Category 2.0",
                  "displayName": "Miami Art Week 2025",
                  "description": "An immersive celebration of art and culture during Miami Art Week.",
                  "tags": "Art,Exhibition,Miami,Culture"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Client-UUID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "ClientUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/article/subcategory/get": {
      "get": {
        "tags": [
          "ArticleSubcategory"
        ],
        "summary": "Article - SubCategory - Get By Short ID",
        "description": "**Endpoint Name: Article - SubCategory - Get By Short ID**\n\nThis is the name of the given endpoint. It specifies the purpose of the endpoint indicating that it's used to retrieve (Get) a SubCategory of an Article by its Short ID.\n\n**Authentication: Bearer Token**\n\nThis endpoint uses Bearer authentication. This type of authentication is an HTTP authentication scheme that involves security tokens called bearer tokens. The token value is labeled as 'BearerToken'. This data must be string type.\n\n**Request Method: GET**\n\nThis is an HTTP method used by the client to request data from a server. In this instance, the method is 'GET' which is used to request data from a specified resource.\n\n**URL**\n\nThis is the endpoint to which the request is sent. In this case, it's http://localhost:3000/api/article/subcategory/get/?shortId=articleSubCategoryShortId. It specifies that the endpoint lives on a localhost server, running on port 3000, and is part of an API dealing with an article's subcategory retrieval (get) by its Short ID.\n\n**Headers**\n\nThis section denotes the HTTP headers to be included with the request. Currently, there is a placeholder for a header, but it's been disabled and left empty, therefore, it's non functional.\n\n**Body**\n\nAs this is a 'GET' request, typically no body is included and the body section is therefore set to 'raw', but no value ('') is provided.\n\n**Parameters: shortId**\n\nThis query parameter specifies the shortId of an article's subcategory. This shortId is used to identify the specific subcategory that needs to be retrieved from the server. \n\nNote: Replace 'articleSubCategoryShortId' with the actual Short ID of the Article's SubCategory.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "shortId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "articleSubCategoryShortId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/article/subcategory/all": {
      "get": {
        "tags": [
          "ArticleSubcategory"
        ],
        "summary": "Article - SubCategory - Get All",
        "description": "This endpoint is titled \"Article - SubCategory - Get All\". As the name suggests, it provides functionality to retrieve all the subcategories for articles in the database.\n\n1. \"name\": 'Article - SubCategory - Get All' : This refers to the title or name of the API endpoint. It signifies what the API endpoint will do.\n\n2. \"request\": This represents the details of the HTTP request that will be executed. \n\nWithin the \"request\" object:\n\n   2.1 \"auth\": This section is for authentication and authorizing the request.\n       \"auth\" includes an authentication type 'bearer' and its value - a token as a string labeled \"BearerToken\". Bear in mind, you would need to replace 'BearerToken' with an actual token. In the context of HTTP, Bearer authentication (also called token authentication) is an HTTP authentication scheme that involves security tokens.\n\n   2.2 \"method\": 'GET'. This denotes the HTTP method being used for the request. 'GET' is used to retrieve information from the given URL.\n\n   2.3 \"url\": This is the URL endpoint where the request will be sent. It targets localhost on port 3000 and specifically the route '/api/article/subcategory/all', which is likely to return a collection of all subcategories of articles.\n\n   2.4 \"headers\": This part includes additional HTTP headers that you want to include in your request. Here, the header is disabled and the key-value pair is empty, and will thus not be playing any role in the request.\n\n   2.5 \"body\": This section contains the details about the data sent in the HTTP body. Since the 'GET' method is being used here which does not include a body, this section, in this case, has the \"mode\" as \"raw\", but does not include any actual data (\"raw\": \"\"). Therefore, no body data will be sent with this request.\n\n3. Lastly, do note for a successful request, your server must be running on 'localhost' with the port '3000' and your API should be set up to return all subcategories of articles for this '/api/article/subcategory/all' endpoint.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/article/subcategory/alll": {
      "get": {
        "tags": [
          "ArticleSubcategory"
        ],
        "summary": "Article - SubCategory - Get All By Category ID",
        "description": "This endpoint is called \"Article - SubCategory - Get All By Category ID\". Here is a detailed description of each data:\n\n- \"name\": It is the name of the endpoint. It indicates that this endpoint is used to retrieve all the subcategories of articles under a specific category, identified by a category ID.\n\n- \"request\": The object contains all the necessary details required to make the HTTP request.\n\n  - \"auth\": The authentication method required for this endpoint. It is of type \"bearer\". Bearer authentication (also called token authentication) is an HTTP authentication scheme that involves security tokens called bearer tokens. \n    - \"bearer\": An array containing details about the bearer authentication token required for the endpoint. \n      - \"key\": The name of the token, which is \"token\".\n      - \"value\": The placeholder for the bearer token, which should replaced with your actual bearer token (BearerToken).\n      - \"type\": The datatype of the value, here it is \"string\".\n\n  - \"method\": The HTTP method used for this request, which is \"GET\" in our case.\n\n  - \"url\": The URL where the request needs to be sent. Here it should be pointing to the place where your server is running, followed by the specific route to get the article subcategories. Replace 'articleCategoryId' with your actual article category id to fetch respective subcategories.\n\n  - \"headers\": An array where you can add additional headers. Currently, there are no additional headers required for the call, hence it's empty and disabled.\n\n  - \"body\": Details of the body of the request. Since this is a GET request, no body data is necessary and hence the \"mode\" is \"raw\" and \"raw\" data is empty.\n  \nRemember, this endpoint requires a bearer token for authentication, so ensure to include it in your request.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "articleCategoryId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/article/subcategory/delete": {
      "post": {
        "tags": [
          "ArticleSubcategory"
        ],
        "summary": "Article - SubCategory - Delete",
        "description": "This endpoint is labeled as \"Article - SubCategory - Delete\". It required bearer authentication type which means the API won't work without a proper authorization. The authentication uses a bearer token which usually represents the logged-in user session, identified by the key \"token\" and takes a string value \"sessionId\".\n\nThe HTTP request method for this endpoint is POST. It's typically used to send data to a server to create a new resource. \n\nThe URL for this endpoint is \"http://localhost:3000/api/article/subcategory/delete\". This URL suggests that it will be interacting with the subcategories under articles. Specifically, it appears that it will be used to delete an item based on the route \"/delete\". It's highly likely that it's used to delete an article's subcategory.\n\nThe default header key is not provided in the endpoint, hence the empty strings (\"\"). The \"disabled\" field indicates the headers are disabled for this endpoint, meaning that the headers won't be sent along with the request.\n\nThe request body is in raw json format, which directly embodies all the information needed for the request. Within that message body, there are three fields included: \n\n1. \"sessionId\" which probably is used to keep the current logged-in user's session. \n2. \"accountId\" might be used to represent a specific user account that the session belong to. \n3. \"subCategoryId\" that seemingly represents the identification of the subcategory in an article that you want to delete. \n\nThis endpoint appears to be deleting an article's subcategory of an account with a verified session.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\",\\\"subCategoryId\\\":\\\"articleSubCategoryId\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/article/topic/create": {
      "post": {
        "tags": [
          "ArticleTopic"
        ],
        "summary": "Article - Topic - Create Auto",
        "description": "1. `name`: This is the name of the endpoint, which in this case is \"Article - Topic - Create Auto\". It is used to give a description of the action being carried out by this endpoint.\n\n2. `request`: The request object consists of several key properties:\n\n    - `auth`: This object provides information about the authentication method used for this API endpoint. The authentication type here is Bearer token authentication which typically involves sending a token in the authorization header of the HTTP request.\n        - `type`: It describes the type of authentication used. Here, 'bearer' authentication is used.\n        - `bearer`: This array contains the bearer token details.\n            - `key`: The key is \"token\" which is the standard key value when using bearer token authentication.\n            - `value`: This stands for the actual token value which is to be replaced with the actual bearer token.\n            - `type`: The type of the token. Here, it is a string.\n\n    - `method`: HTTP method being used for the request. Here it is \"POST\" which is used to send data to a server to create a resource.\n\n    - `url`: It is the endpoint URL where the HTTP request is sent. Here the URL is \"http://localhost:3000/api/article/topic/create\".\n\n    - `headers`: This is an object that contains all the HTTP headers that you want to include in your request. Here, no specific headers have been provided and the disabled property set to true indicating that there's no active header being used for this API request.\n\n    - `body`: Contains the actual content/data you're sending with the request. Here, it is in raw JSON format and contains the following fields:\n        - `sessionId`: This is most likely a unique identifier for the current user session.\n        - `accountId`: Possibly the account ID of the user creating the article or the topic.\n        - `category`: This contains the category for the new article or topic.\n        - `subCategory`: This contains the sub category for the new article or topic.\n        - `name`: This is the name of the new article or topic.\n        - `displayName`: The human-readable name for the new article or topic.\n        - `description`: A brief description of the new article or topic.\n        - `tags`: These are the tags related to the new article or topic. They seem to be a comma-separated list of words related to the article or topic. \n\n    - `options`: Contains additional options related to the body of the request.\n          - `raw`: It possesses an object which states the language format of the raw data, in this instance, the language choice is JSON.\n\nIn summary, this endpoint is for creating a new article or topic within a certain category and sub-category using their account ID and session ID, as well as providing a name, display name, description and related tags. The bearer token used for authenticated requests is expected to be provided.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "sessionId": "sessionId",
                  "accountId": "accountId",
                  "category": "My Brand New Category",
                  "subCategory": "My Brand New Sub Category",
                  "name": "Miami Art Week 8",
                  "displayName": "Miami Art Week 2028",
                  "description": "An immersive celebration of art and culture during Miami Art Week.",
                  "tags": "Art,Exhibition,Miami,Culture"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/article/topic/createBulk": {
      "post": {
        "tags": [
          "ArticleTopic"
        ],
        "summary": "Article - Topic - Create Bulk Auto",
        "description": "This endpoint, named \"Article - Topic - Create Bulk Auto\", is a POST method used for creating multiple topics under an article in a single request. It requires bearer token authorization and is located at \"http://localhost:3000/api/article/topic/createBulk\".\n\nThe authorization field includes \"auth\" which is of type \"bearer\". This includes the \"key\" which should be called \"token\", and its \"value\" should be your Bearer access token. This token should be of \"string\" type.\n\nThe \"request\" element includes the HTTP method type which is \"POST\" in this case as well as the \"url\" for the API endpoint. Headers for the request are included in the \"headers\" object but they are currently blank and disabled.\n\nThe \"body\" of the request contains the data that will be sent to the server. The \"mode\" is set to \"raw\", so raw input data can be provided. The \"language\" key in \"options\" is set to \"json\", meaning the body data should be in JSON format. \n\nThe \"raw\" string contains a JSON object, which includes:\n- \"sessionId\": This is a special identifier for the session, replace it with your session ID.\n- \"accountId\": This denotes the account id for the user, replace it with the user's account ID.\n- \"topics\": This is an array of objects where each object represents a unique article topic that is to be created. Each topic object includes the following:\n  - \"sessionId\" & \"accountId\": Similar to above.\n  - \"category\": This represents the category of the article topic.\n  - \"subCategory\": This represents the sub-category within the main category.\n  - \"name\": This is the name of the topic.\n  - \"displayName\": This is the displayed name of the topic.\n  - \"description\": This is a brief summary of the topic.\n  - \"tags\": Comma-separated keywords related to the topic for search optimization. \n\nNote: Replace the placeholders \"sessionId\" and \"accountId\" with real values for all instances inside the topics array.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "sessionId": "sessionId",
                  "accountId": "accountId",
                  "topics": [
                    {
                      "sessionId": "sessionId",
                      "accountId": "accountId",
                      "category": "My Brand New Category",
                      "subCategory": "My Brand New Sub Category",
                      "name": "Miami Art Week 8",
                      "displayName": "Miami Art Week 2028",
                      "description": "An immersive celebration of art and culture during Miami Art Week.",
                      "tags": "Art,Exhibition,Miami,Culture"
                    },
                    {
                      "sessionId": "sessionId",
                      "accountId": "accountId",
                      "category": "Technology Innovations",
                      "subCategory": "AI and Machine Learning",
                      "name": "Tech Trends 2028",
                      "displayName": "Technology Trends 2028",
                      "description": "An exploration of cutting-edge technology trends.",
                      "tags": "Tech,AI,Innovation"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/article/topic/update": {
      "put": {
        "tags": [
          "ArticleTopic"
        ],
        "summary": "Article - Topic - Update Auto",
        "description": "\"name\": This is the endpoint's name, \"Article - Topic - Update Auto\". It's mainly used for identification purposes.\n\n\"request\": This includes all the details required to make a HTTP request. \n\nInside \"request\":\n   \"auth\": Contains authentication details required for authorizing the request.\n   \"type\": The auth type, which is \"bearer\" in this case. It means the authorization is following the Bearer scheme.\n   \"bearer\": An array containing the bearer token details which are key-value pairs with the key named \"token\" and value named \"BearerToken\"\n\n\"method\": This is the HTTP verb to use for the request. Here we are using the \"PUT\" method, which is generally used for updating resources.\n\n\"url\": This is the web address to which the request will be sent. \"http://localhost:3000/api/article/topic/update\" is the endpoint URL.\n\n\"headers\": This is an array containing all the header information required for processing the HTTP request. \"Client-UUID\" is a unique client identifier that's being passed here.\n\n\"body\": The data to be sent with the request comes under this. The mode is set as \"raw\", indicating that we are sending raw bytes in the body of our request.\n  \nInside \"body\":\n   \"raw\": Raw text to be included in the body of the request. This contains all the basic information required to update an article topic. It includes fields such as \"topicId\", \"sessionId\", \"accountId\", \"category\", \"subCategory\", \"name\", \"displayName\", \"description\", \"tags\".\n   \"options\": Parameters to configure the way raw data is interpreted. Here it's set to \"json\", meaning that the raw text included must be written in json format.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "topicId": "articleTopicId",
                  "sessionId": "sessionId",
                  "accountId": "accountId",
                  "category": "My Brand New Category",
                  "subCategory": "My Brand New Sub Category",
                  "name": "Miami Art Week",
                  "displayName": "Miami Art Week 2024",
                  "description": "An immersive celebration of art and culture during Miami Art Week.",
                  "tags": "Art,Exhibition,Miami,Culture"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Client-UUID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "ClientUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/article/topic/get": {
      "get": {
        "tags": [
          "ArticleTopic"
        ],
        "summary": "Article - Topic - Get By Short ID",
        "description": "1. \"name\": This field represents the name of the API endpoint, which in this case is \"Article - Topic - Get By Short ID\". This name is used to identify the API endpoint within the collection.\n\n2. \"request\": This field is an object containing information about the HTTP request to be made to the server.\n\n3. \"auth\": This is a part of the request object specifying authorization details to be sent along with the request. The \"type\" field under \"auth\" represents the type of Authorization which in this case is \"bearer\".\n\n4. \"bearer\": This field is part of the auth object that contains an array of bearer tokens. Each bearer token object has three properties:\n\n    - \"key\": It represents the attribute name or identifier of the token. In this case, it's \"token\".\n    - \"value\": It holds the actual value of the key. Here, it is \"BearerToken\".\n    - \"type\": It represents the data type of the value. In this case, it's a \"string\".\n\n5. \"method\": This is a part of the request object and specifies the HTTP method to be used when making a request to the server. The HTTP method here is \"GET\".\n\n6. \"url\": This is the URL to which the request is to be sent. Here, it is \"http://localhost:3000/api/article/topic/get/?shortId=articleTopicShortId\".\n\n7. \"headers\": This field is an array of objects representing the headers to be sent along with the request. Each object has four properties: \"key\", \"value\", \"type\", and \"disabled\". In this case, they are all empty or set to default, meaning no additional headers are required for the request.\n\n8. \"body\": This object specifies the body of the request. It has two properties: \"mode\" and \"raw\". The \"mode\" specifies the format in which the data is sent in the body of the request. Here, the mode is \"raw\", meaning the data is sent as is. The \"raw\" field, which is empty, is where the raw data to be sent in the body would be entered.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "shortId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "articleTopicShortId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/article/topic/all": {
      "get": {
        "tags": [
          "ArticleTopic"
        ],
        "summary": "Article - Topic - Get All",
        "description": "- \"name\": This is the name of the endpoint. In this case, the name given is \"Article - Topic - Get All\", which implies that this endpoint probably fetches all topic-related articles.\n\n- \"request\": A descriptor for the type of HTTP request being made. The properties that follow within this hierarchy present more specific details about the request.\n\n- \"auth\": This is an authorization object. In this case, it's of type 'bearer', which is a method of authentication that involves sending a bearer token.\n\n    - \"type\": Specifies the authentication method used. Here, the \"Bearer\" HTTP authentication scheme is being used.\n  \n    - \"bearer\": This array contains the information for bearer authentication which includes:\n      - \"key\": This is the header field name used to pass the bearer token, in this instance it's 'token' \n      - \"value\": This is where the actual bearer token is placed. In this instance, the placeholder is 'BearerToken'.\n      - \"type\": The data type of the 'value'. In this case, it's a string.\n\n- \"method\": The type of HTTP method used for the request. Here, it's a \"GET\" method, used to retrieve data from a server.\n\n- \"url\": The URL to where the request is being sent. Here, the request is being sent to \"http://localhost:3000/api/article/topic/all\", which is likely to be an API endpoint for getting all topics of articles.\n\n- \"headers\": HTTP headers that will be included in the request. In this example, no specific headers are included as the key-value field is kept empty and it is disabled. If it was enabled, the listed key-value pair would have been sent as an HTTP header.\n\n- \"body\": Defines the body of the request. In this case, the \"mode\" is set to \"raw\", meaning the HTTP request body will contain raw (unprocessed) data. However, no raw content has been provided in this endpoint, so it's left as an empty string. This makes sense since, for a \"GET\" request, you usually do not need a request body.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/article/topic/alll": {
      "get": {
        "tags": [
          "ArticleTopic"
        ],
        "summary": "Article - Topic - Get All By SubCategory ID",
        "description": "This endpoint is named \"Article - Topic - Get All By SubCategory ID\". It basically gets all articles under a specific topic identified by its subcategory ID. Here's the breakdown:\n\n1. **name**: The name of this endpoint is \"Article - Topic - Get All By SubCategory ID\", which explains the primary function of this endpoint. It's designed to fetch all articles within a specified topic that falls under a certain subcategory.\n\n2. **auth**: This section outlines the expected authentication mechanism. The `type` is \"bearer\", indicating that bearer token authentication is required. The bearer token itself should be supplied as the value of the `token` key. Here, \"BearerToken\" is a placeholder for the actual token you need to provide.\n\n3. **method**: This endpoint uses the \"GET\" HTTP method, which is typically used to retrieve information.\n\n4. **url**: This is the URL where the request should be sent. This example uses a local server running on port 3000. The route is \"/api/article/topic/all\". A query parameter `subCategoryId` is required where you are supposed to provide the subcategory ID (`articleSubCategoryId`) of the articles that you want to retrieve.\n\n5. **headers**: This is usually where you define any necessary HTTP headers for your request. However, in this case, a default header without a key-value pair is defined, but it is disabled.\n\n6. **body**: This outlines the structure and mode of the body of your request. However, since we're using a GET method, the body is not required and thus the `raw` field is empty. The `mode` is set to \"raw\", but it won't be used here.\n\nPlease remember to replace placeholders with real values when using this endpoint. Specifically, you should provide a valid bearer token and a valid subcategory ID.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "subCategoryId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "articleSubCategoryId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/article/topic/delete": {
      "post": {
        "tags": [
          "ArticleTopic"
        ],
        "summary": "Article - Topic - Delete",
        "description": "This endpoint named \"Article - Topic - Delete\" allows you to delete a specific topic from an article. Here is a detailed description for each datum:\n\n1. \"name\": It signifies the identifier of this endpoint which is \"Article - Topic - Delete\".\n   \n2. \"request\": This is an object which contains multiple properties under it. Let's consider each one.\n\n   - \"auth\": This property is used for handling authentication. It uses bearer token authentication where you need to provide a token.\n      \n     - \"type\": The type of the provided token which is \"bearer\".\n      \n     - \"bearer\": This is an array of objects containing bearer's key, type and value. \n         - \"key\": This denotes the token name. Here, the key is \"token\".\n         - \"value\": This stands for the passed value for the key which in this case is \"sessionId\".\n         - \"type\": Identifies the datatype of value (i.e., \"sessionId\"). It is a \"string\". \n\n   - \"method\": An HTTP method used. This endpoint uses \"POST\" method.\n      \n   - \"url\": It provides the URL where this endpoint hits, which is \"http://localhost:3000/api/article/topic/delete\".\n   \n   - \"headers\": This is an array primarily meant for passing additional information while sending requests. It's set to empty here, and being ignored as it's \"disabled\": True.\n\n   - \"body\": It carries the data which needs to be processed in the HTTP request. Here, the data is in \"raw\" mode.\n\n       - \"mode\": Since the mode is set to \"raw\", you can write JSON or XML directly in the text input field.\n\n       - \"raw\": It holds JSON string which contains sessionId, accountId and topicId.\n           - \"sessionId\": It is the session identity of the user. Replace the placeholder \"sessionId\" with a valid one.\n           - \"accountId\": It represents the account identity that is associated with this action. Replace \"accountId\" with actual account identifier.\n           - \"topicId\": It is the specific identifier to an article's topic that you wish to delete. Enter the actual topicId instead of \"articleTopicId\".\n           \nPlease replace all placeholders with actual values while using this endpoint.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\",\\\"topicId\\\":\\\"articleTopicId\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/chat/comment/create": {
      "post": {
        "tags": [
          "ChatComment"
        ],
        "summary": "Chat - Comment - Create",
        "description": "This endpoint, named \"Chat - Comment - Create\", is used to create a new comment in a chat. It is a HTTP POST request to the URL http://localhost:3000/api/chat/comment/create. Here is a deeper look at the different pieces of data provided in this endpoint:\n\n1. **auth**: This contains the authorization method which is of type \"bearer\". The bearer authentication (also called token authentication) is an HTTP authentication scheme that involves security tokens called bearer tokens. \n\n   **key**: The key field contains the name of the header, which is \"token\".\n\n   **value**: The value field contains the actual Bearer token that needs to be added in the header for access.\n\n   **type**: This defines the data type of the value, in this case, it is a string.\n\n2. **method**: The HTTP method used for this request is POST. HTTP POST requests are used to send data to the server, like when you fill out a form and hit 'submit'. In this case, it is used to create a new chat comment.\n\n3. **url**: This is the endpoint where the POST request is to be sent. \n\n4. **headers**: This is currently empty but would typically contain any extra headers that need to be added to the request.\n\n5. **body**: This is the data that is sent with the POST request. The data is in raw format and the mode type is \"raw\" under the body field.\n\n   **raw**: This is the actual data being sent in the request. It contains:\n   \n  - `commentText`: The text of the comment that is being created.\n  \n  - `threadId`: The unique identifier for the thread where the comment is being posted.\n  \n  - `replyToId`: The id of the comment this new comment is responding to, in case the new comment is a reply.\n  \n  - `accountId`: The id of the account creating the comment.\n  \n  - `sessionId`: The id of the current session.\n\n   **options**: In the options field, raw is defined with language as json. It means that the raw data is written in JSON format.\n\nRemember to replace \"BearerToken\", \"threadId\", \"replyToId\", \"accountId\", and \"sessionId\" with actual values when using this endpoint.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "commentText": "Hello, this is a comment!",
                  "threadId": "threadId",
                  "replyToId": "replyToId",
                  "accountId": "accountId",
                  "sessionId": "sessionId"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/chat/comment/update": {
      "put": {
        "tags": [
          "ChatComment"
        ],
        "summary": "Chat - Comment - Update",
        "description": "This endpoint \"Chat - Comment - Update\" is used to update an existing comment in a chat thread.\n\nIt uses the `PUT` method indicating that it's used to update existing resources.\n\nHere is a detailed breakdown of each data in this endpoint:\n\n1. `auth`: This is the way your API handles authentication. In this endpoint, it is using `Bearer Token` authentication.\n   - `type`: The type of authentication used. Here, it's `bearer`.\n   - `bearer`: An array holding bearer token data.\n       - `key`: The keyword `token` used to identify this authentication method.\n       - `value`: The bearer token which should be replaced with an actual bearer access token.\n   \n2. `method`: This is the HTTP method used for the request. The endpoint uses `PUT`, which is used to update existing resources.\n\n3. `url`: This is the endpoint URL to which the request will be sent. Here, the URL is `http://localhost:3000/api/chat/comment/update`.\n\n4. `headers`: This array will hold any headers that need to be sent with the request. In this case, no headers are specified.\n\n5. `body`: This contains the data sent to the server. It is written in raw mode.\n   - `mode`: Defines how the body will be sent. Here, it is sent in `raw`.\n   - `raw`: This is the raw request body which contains the comment details that are to be updated.\n      - `commentId`: The ID of the comment to be updated.\n      - `commentText`: The updated text for the comment.\n      - `threadId`: The ID of the thread in which this comment is present.\n      - `accountId`: The ID of the account making the update.\n      - `sessionId`: The ID of the session in which the request is made.\n   \n6. `options`: Options for how the data in `raw` should be interpreted.\n   - `raw`: Options specific to when the data is sent as `raw`.\n       - `language`: The language in which the `raw` data is written. In this case, it's `json`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "commentId": "commentId",
                  "commentText": "Updated comment text",
                  "threadId": "threadId",
                  "accountId": "accountId",
                  "sessionId": "sessionId"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/chat/comment/delete": {
      "post": {
        "tags": [
          "ChatComment"
        ],
        "summary": "Chat - Comment - Delete",
        "description": "This endpoint is known as \"Chat - Comment - Delete\". It's used to delete a specific comment from a chat. There are several parameters to understand in this endpoint:\n\n1. \"name\" - A unique identifier for the endpoint. This endpoint's name is \"Chat - Comment - Delete\", referring to the task it is specifically designed to perform.\n\n2. \"auth\" - This section specifies the authentication method required to access this endpoint. In this case, it uses bearer authentication (\"type\": \"bearer\"), meaning you need to provide a token (Bearer token) in the request header to authenticate yourself.\n\n3. \"request\" - This is the actual command sent when the API is called. \n\n4. \"method\" - This refers to the type of HTTP request method used. In this case, it's a POST method, which is typically used when you want to send data to be processed to a specified resource.\n\n5. \"url\" - The URL is the specific address where the request will be sent. For this endpoint, the request will be sent to \"http://localhost:3000/api/chat/comment/delete\".\n\n6. \"headers\" - Headers let the client and the server pass additional information with an HTTP request or response. This endpoint does not require any additional headers.\n\n7. \"body\" - This is the part of the request where you specify the data you want to send. In this endpoint, a raw JSON object is sent in the body, containing following fields:\n    - \"commentId\": The ID of the comment to be deleted.\n    - \"threadId\": The ID of the thread where the comment resides.\n    - \"accountId\": The account ID related to the session making the request.\n    - \"sessionId\": It is the unique id of the session attempting to delete the comment.\n\n8. \"options\" - This section provides additional details about how the body of the request is formatted. It specifies that the body is raw data and the language used is JSON.\n\nPlease ensure you replace \"BearerToken\", \"commentId\", \"threadId\", \"accountId\" and \"sessionId\" with actual values in your request.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "commentId": "commentId",
                  "threadId": "threadId",
                  "accountId": "accountId",
                  "sessionId": "sessionId"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/chat/comment/get": {
      "get": {
        "tags": [
          "ChatComment"
        ],
        "summary": "Chat - Comment - Get",
        "description": "1. **name**: This data point contains the name of the transactions that we are performing. In this case, the name is \"Chat - Comment - Get\". This is essentially denoting that this API call is to get comments of a chat.\n\n2. **request**: This data point represents the HTTP request information including the authentication method, HTTP method, URL, and the headers.\n\n   - **auth**: This object includes information about the authorization needed to execute this API call. \n        - **type**: This defines the type of authorization being used. Here, it is \"bearer\", which suggests that we are using bearer token for authorization.\n        - **bearer**: This is an array carrying information about the bearer token\n          - **key**: This is the key used for bearer token. In this case, the key is \"token\".\n          - **value**: This is the value of the aforementioned key. Here, the value is \"BearerToken\".\n          - **type**: This defines the data type of the key. Here, it is a string.\n\n   - **method**: This data point tells us about the HTTP method being used for the request. Here, it directs us to use the GET method.\n\n   - **url**: This field contains the URL for the call. The URL is followed by a string of parameters added to the end of the actual URL in the form of a query string. The parameters are `commentId`, `threadId`, `accountId`, and `sessionId`. These parameters represent the comment's id, thread's id, user's account id, and session id respectively.\n\n   - **headers**: This field represents the headers used in your HTTP request. Headers let the client and the server pass additional information with an HTTP request or response. Currently, it is an empty array indicating no header data is added to the request.\n\nPlease note that the `BearerToken` and the values in the `url` query string are placeholders and should be replaced with actual data for the API call to be successful.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "commentId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "commentId"
          },
          {
            "name": "threadId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "threadId"
          },
          {
            "name": "accountId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "accountId"
          },
          {
            "name": "sessionId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "sessionId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/chat/comment/all": {
      "get": {
        "tags": [
          "ChatComment"
        ],
        "summary": "Chat - Comment - Get All With Deleted",
        "description": "The endpoint, Chat - Comment - Get All With Deleted, fetches all chat comments including the deleted ones from the server. It comprises the following elements:\n\n1. \"name\": This is the name of the endpoint that's used to describe its purpose. For this endpoint, the name is \"Chat - Comment - Get All With Deleted\", implying its function to retrieve all chat comments, including those deleted.\n\n2. \"request\": This object consists of the specifications for the HTTP request that's made to the endpoint. \n\n   \ti. \"auth\": This object signifies an authorization method is used for the endpoint, the \"type\" indicates it's a bearer token authentication. \n\n   \tii. \"bearer\": This array holds an object containing details about the bearer token used for authentication. The \"key\" is the identifier for the token found in the request header. The \"type\" field specifies the data type of the token, here it is of \"string\" type. The \"value\", is the actual token value; \"BearerToken\" is just a placeholder indicating where the token should go.\n\n   \tiii. \"method\": This field specifies the HTTP method associated with the request. The value \"GET\" implies data is being fetched from the server.\n\n   \tiv. \"url\": This is the URL of the endpoint where the request is being sent. It is formatted as follows: \n\"localhost:3000/api/chat/comment/all?threadId=threadId&accountId=accountId&sessionId=sessionId&deleted=1\". The parameters after \"?\" are called query parameters and are used to filter the results. Here, \"threadId\", \"accountId\", \"sessionId\" are used to specify which thread's, account's, session's chat comments you want to retrieve, while \"deleted=1\" indicates also to include deleted comments.\n\n   \tv. \"headers\": This is an empty array, which signifies no additional HTTP headers are included in the request.\n\nPlease replace \"BearerToken\", \"threadId\", \"accountId\", \"sessionId\" with actual values before making a request.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threadId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "threadId"
          },
          {
            "name": "accountId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "accountId"
          },
          {
            "name": "sessionId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "sessionId"
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "example": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/chat/message/create": {
      "post": {
        "tags": [
          "ChatMessage"
        ],
        "summary": "Chat - Message - Create",
        "description": "This endpoint, named \"Chat - Message - Create\", is a method to create a new chat message on the server. \n\nIt uses the 'POST' method, aiming at the URL \"http://localhost:3000/api/chat/message/create\". The authentication type required for this endpoint is \"bearer\". We use the BearerToken as the authentication token provided under \"auth\" property with key \"token\".\n\nThe body of the request contains raw JSON data with the following fields:\n\n1. \"messageText\": This should contain the text of the chat message being sent. Type for this field is a string.\n   \n2. \"messagePriority\": This is to mark the priority of the message. It's a string where \"0\" could perhaps denote a standard message.\n   \n3. \"fromAccountId\": This refers to the account id from which the message is originating. It should be a string presenting an accountId.\n   \n4. \"toAccountId\": This is the account id to which the message should be sent. A string is expected here as well.\n   \n5. \"threadId\": This could be used for threading or grouping messages. The current message will belong to this thread. It's expected to be represented as a string.\n   \n6. \"replyToId\": If the current message is a reply to any other message, that message's id should be specified here. This field should be a string.\n   \n7. \"accountId\": This could denote the user who is currently logged in and performing the action. The representation of this field is a string.\n   \n8. \"sessionId\": It may be used to maintain the session of the user who is making the request. The value here is expected to be a string.\n\nAll these fields are marked as strings wrapped in JSON format, according to \"options -> raw -> language\". This endpoint doesn't require any specific headers to be set.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "messageText": "Hello, this is a message!",
                  "messagePriority": "0",
                  "fromAccountId": "fromAccountId",
                  "toAccountId": "toAccountId",
                  "threadId": "threadId",
                  "replyToId": "replyToId",
                  "accountId": "accountId",
                  "sessionId": "sessionId"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/chat/message/update": {
      "put": {
        "tags": [
          "ChatMessage"
        ],
        "summary": "Chat - Message - Update",
        "description": "This endpoint, named \"Chat - Message - Update\", is used to update an existing message in the chat. Details of this endpoint are:\n\n1. Authentication: It uses 'bearer' authentication, which requires a token. This token is a string and should be passed in the 'BearerToken' field.\n\n2. Request Method: PUT is the HTTP method used. PUT is used to update an existing resource.\n\n3. URL: The URL where this request will be sent is 'http://localhost:3000/api/chat/message/update'. It is the location of the server that will process the request.\n\n4. Headers: There are no additional headers required in this request.\n\n5. Request Body: The body of the request contains the data to be updated and it should be in 'raw' mode. The data should be provided as a JSON object with the following properties:\n\n    - messageId : The unique identifier of the message to be updated.\n    - messageText : The updated text for the message.\n    - messagePriority : The new priority of the message. This is represented as a string, such as \"2\".\n    - threadId : The unique identifier of the chat thread to which the message belongs.\n    - accountId : The unique identifier of the account initiating the update.\n    - sessionId : The unique identifier of the user session in which the update is being made.\n\nThe format of the request body is JSON, as specified under the 'options' section of the request body.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "messageId": "messageId",
                  "messageText": "Updated message text",
                  "messagePriority": "2",
                  "threadId": "threadId",
                  "accountId": "accountId",
                  "sessionId": "sessionId"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/chat/message/delete": {
      "post": {
        "tags": [
          "ChatMessage"
        ],
        "summary": "Chat - Message - Delete",
        "description": "This API endpoint is called \"Chat - Message - Delete\". It facilitates the deletion of a specific chat message from a thread. Below are the detailed descriptions of each data:\n\n1. **Name**: The name of the endpoint, which signifies its purpose. Here, \"Chat - Message - Delete\" suggests that it is used for deleting a chat message.\n\n2. **Request**: This contains all the information required to make an API call. \n\n   - **Auth**: The \"Auth\" field specifies the type of authentication used. It has a \"type\" sub-field that denotes the kind of authorization, which in this case is a \"Bearer\" token authorization. The \"bearer\" sub-field is an array that holds the token information. Each array element has a \"key\", a \"value\", and a \"type\". The \"key\" is \"token\", the \"value\" is \"BearerToken\", which should be replaced with the actual bearer token for authentication, and the \"type\" is \"string\", indicating the data type of the token.\n\n   - **Method**: The HTTP method used for sending the request. Here, the method is \"POST\", denoting that it is requesting to create or update the resources.\n\n   - **URL**: This is the address to which the request is to be sent. In this case, the request will be sent to \"http://localhost:3000/api/chat/message/delete\".\n   \n   - **Headers**: An array for specifying HTTP headers to send with the request. It is empty here, which means no additional headers are required.\n   \n   - **Body**: This contains the actual content or data to send in the request.\n   \n     - **Mode**: The setting that defines how to interpret the body of the request. In this case, the mode is \"raw\", denoting that raw data is sent in the request.\n\n     - **Raw**: It represents the actual data to be sent in the body of the request which is in the raw JSON format. It includes \"messageId\", \"threadId\", \"accountId\", and \"sessionId\". These are identifiers for the message to be deleted, the thread where the message resides, the account that owns the message, and the active session, respectively.\n\n     - **Options**: It is used to specify any additional options. For instance, the \"raw\" option specifies that the language of the body content is JSON.\n\nNote: All the string placeholders in this data should be replaced with actual values when making a request.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "messageId": "messageId",
                  "threadId": "threadId",
                  "accountId": "accountId",
                  "sessionId": "sessionId"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/chat/message/get": {
      "get": {
        "tags": [
          "ChatMessage"
        ],
        "summary": "Chat - Message - Get",
        "description": "This API endpoint is called \"Chat - Message - Get\". It retrieves a specific chat message from the server. Here's a detailed description of each data included in the endpoint:\n\n1. \"**name**\": This represents the name of the API endpoint, in this case - \"Chat - Message - Get\".\n\n2. \"**request**\": This contains all the details related to the API request to be made.\n\n3. \"**auth**\": This object is used for providing authorization details that are sent with the request.\n  - \"**auth.type**\": It indicates the type of authorization used for the radio request. In this case, it is set to \"bearer\".\n  - \"**auth.bearer**\": This is an array containing information about the bearer token.\n    - \"**auth.bearer[0].key**\": The key for the bearer token, here it is \"token\".\n    - \"**auth.bearer[0].value**\": The value of the bearer token that you have generated.\n    - \"**auth.bearer[0].type**\": The datatype of the bearer token, in this case, it's a string.\n\n4. \"**method**\": This is the HTTP method used for the request. For this API endpoint, the GET method is being used. This means it is intended to retrieve data from the server.\n\n5. \"**url**\": This represents the URL endpoint where the request is sent. It involves server address, API path, and query parameters. In this case, these parameters include:\n  - \"**messageId**\": The unique identifier of the message.\n  - \"**threadId**\": The unique identifier for the thread in which the message is located.\n  - \"**accountId**\": The unique identifier associated with the user account. \n  - \"**sessionId**\": The unique identifier representing the session.\n\n6. \"**headers**\": This is a list containing any headers that should be included with the request. In this API endpoint, there are no additional headers set.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "messageId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "messageId"
          },
          {
            "name": "threadId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "threadId"
          },
          {
            "name": "accountId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "accountId"
          },
          {
            "name": "sessionId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "sessionId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/chat/message/all": {
      "get": {
        "tags": [
          "ChatMessage"
        ],
        "summary": "Chat - Message - Get All With Deleted",
        "description": "This API endpoint is named `Chat - Message - Get All With Deleted`. It is designed for retrieving all chat messages in a given thread, including those messages that have been deleted.\n\n1. `Auth`: This section describes the type of authorization used by this endpoint i.e., Bearer Authentication. This type of authorization validates requests based on the bearer token included in the header. A bearer token must be provided, the key should be `token`, and the value must be the assigned `BearerToken` for the current session.\n\n2. `Method`: The HTTP method used for this request is `GET`. This method is typically used for retrieving data from a server.\n\n3. `URL`: The URL where the endpoint is available is `http://localhost:3000/api/chat/message/all`. Note that some query parameters are required in the URL:\n\n    - `threadId`: This parameter is expected to be replaced with the real ID of the thread of interest.\n  \n    - `accountId`: This represents the ID of an account or user. You need to replace this with the actual account ID.\n  \n    - `sessionId`: This represents the ID of a chat session. You must replace this with the valid session ID.\n  \n    - `deleted`: This query parameter is a flag which specifies whether to include deleted messages in the response or not. If it's set to `1`, deleted messages will be included.\n\n4. `Headers`: This field is currently empty, which means that there are no additional headers required for this request. In case of changes, new headers such as `Content-Type` or `Accept` may be needed in future.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threadId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "threadId"
          },
          {
            "name": "accountId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "accountId"
          },
          {
            "name": "sessionId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "sessionId"
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "example": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/chat/thread/create": {
      "post": {
        "tags": [
          "ChatThread"
        ],
        "summary": "Chat - Thread - Create Video",
        "description": "This endpoint is labeled \"Chat - Thread - Create Video.\" It's used to create a new chat thread for video comments using a POST request.\n\n1. `auth`: This indicates the type of authentication used for this endpoint. The auth type is \"bearer\", which usually involves a bearer token provided in the headers of the HTTP request for user identification. Its key is \"token,\" which holds the value \"BearerToken.\"\n\n2. `method`: It states the HTTP request method that we're using. In this case, \"POST,\" which is generally used for sending data to the API server to create a new resource.\n\n3. `url`: This is the URL to where the API request is sent. This particular endpoint is \"http://localhost:3000/api/chat/thread/create\".\n\n4. `headers`: Headers allow the client and server to share additional information with the HTTP request or response. The request doesn't include any specific headers in this case. \n\n5. `body`: This contains the data we're sending with our POST request. In this case, it's in the \"raw\" mode, meaning the data is sent as a string in JSON format. \n\n   Included in the request body are: \n    - `ownerId`: A string that refers to the account ID of the owner of this chat thread. \n    - `accountId`: A string that specifies the account ID attempting to create this chat thread.\n    - `sessionId`: This could be a unique identifier for the specific session during which this chat thread is created.\n    - `threadName`: A string that provides the name for this chat thread. For this endpoint, it seems to be specified as \"Video Comments.\"\n    - `threadType`: This indicates the type of thread being created. In this case, it's a \"video\".\n    - `threadTypeId`: A string that refers to the ID of the video associated with this thread.\n\n6. `options`: This contains extra payload options for the \"raw\" request body. They're set to indicate the language of the request body is JSON. Note this doesn't affect the API request itself, but can make it easier for people to understand the data if they're reading it.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "ownerId": "accountId",
                  "accountId": "accountId",
                  "sessionId": "sessionId",
                  "threadName": "Video Comments",
                  "threadType": "video",
                  "threadTypeId": "videoId"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/chat/thread/update": {
      "put": {
        "tags": [
          "ChatThread"
        ],
        "summary": "Chat - Thread - Update",
        "description": "This endpoint is named \"Chat - Thread - Update\". It uses the HTTP method PUT and is used to update the information in a chat thread.\n\nThe endpoint requires bearer authentication, specified through a token. The \"auth\" field requires an object with the \"type\" field as \"bearer\". Under the \"bearer\" array, a key-value pair is given, with the \"key\" as \"token\" and its relevant value being \"BearerToken\".\n\nThe request is made to the URL: \"http://localhost:3000/api/chat/thread/update\".\n\nThe request carries with it headers. One such header is \"Client-UUID\", with its value being \"ClientUUID\". This UUID represents a universal identifier for the client using this API endpoint.\n\nThe request also includes a body with the \"mode\" key set to \"raw\", indicating that the data being sent in raw format(i.e., just a sequence of characters). The raw data being sent in the body is in JSON format {\"threadId\":\"threadId\",\"accountId\": \"accountId\",\"sessionId\": \"sessionId\",\"threadName\": \"General Discussion 3\"} which includes:\n\n- \"threadId\": The unique identifier of the thread that you want to update\n- \"accountId\": The unique identifier of the user account making the update\n- \"sessionId\": The unique identifier of the session within which the update is made\n- \"threadName\": The new name that you want to assign to the thread\n\nThe \"options\" key in the body contains an object, with \"raw\" key containing another object {\"language\": \"json\"} which is specifying the format of data that we have in the body, which in this case is JSON.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "threadId": "threadId",
                  "accountId": "accountId",
                  "sessionId": "sessionId",
                  "threadName": "General Discussion 3"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Client-UUID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "ClientUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/chat/thread/get": {
      "get": {
        "tags": [
          "ChatThread"
        ],
        "summary": "Chat - Thread - Get By Owner With Deleted",
        "description": "This endpoint, called \"Chat - Thread - Get By Owner With Deleted,\" is designed to allow you retrieve chat threads from the database. It specifically fetches chat threads that are owned by a specific user and considers both active and deleted threads. \n\nHere's a breakdown of the components:\n\n1. **name**: This is the title or name of the endpoint, which describes what the endpoint does. In this case, \"Chat - Thread - Get By Owner With Deleted\" suggests that this endpoint retrieves chat threads (both deleted and active) owned by a user.\n\n2. **request**: This details the actual request that will be made to the endpoint.\n\n3. **auth**: This section contains authentication details required to get access to the endpoint. It's using Bearer authentication, which expects a token to be provided. \n\n   - **type**: It indicates the type of authorization being used which is \"bearer\" in this case.\n   \n   - **bearer**: This is an array containing a single object that describes the token needed for authorization:\n     - **key**: This field indicates that a \"token\" is required.\n     - **value**: It shows the placeholder for the value of the bearer token.\n     - **type**: The data type of the \"token\", which is a \"string\".\n\n4. **method**: The type of HTTP request that is being made. In this case, it's a \"GET\" request, meaning it retrieves data from the server.\n\n5. **url**: This is the actual URL where the request will be sent. It includes three query parameters: threadType, threadTypeId, and deleted, which respectively represent the type of thread, ID related with the thread, and the status of deletion.\n\n6. **headers**: The headers field is currently empty and disabled. When enabled, it can contain additional information which will be sent with the HTTP request. For now, no additional information is being passed.\n\n7. **body**: The body carries essential data needed in processing the request. However, for a GET request, no additional body data is required, hence it remains empty.\n\nRemember to replace the \"BearerToken\" with a valid token while making an actual API call. Also, replace the query parameters in the URL with valid threadType, threadTypeId and deleted status to get the desired result.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threadType",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "account"
          },
          {
            "name": "threadTypeId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "accountId"
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "example": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/chat/thread/all": {
      "get": {
        "tags": [
          "ChatThread"
        ],
        "summary": "Chat - Thread - Get All By Thread With Deleted",
        "description": "This endpoint, \"Chat - Thread - Get All By Thread With Deleted\", allows you to retrieve all threads, including deleted ones, associated with a specific chat. There are different components of the data in this endpoint.\n\n1. \"auth\": This represents the authentication section. It uses bearer token authentication. \n   - \"type\" denotes the type of the authorization, here it is \"bearer\".\n   - \"bearer\" denotes the array containing authentication token, with three properties: \"key\", \"value\", and \"type\". \n   - \"key\" is \"token\".\n   - \"value\" - This should hold the value of the bearer token required for authorization.\n   - \"type\" indicates the data type of token, which is \"string\".\n\n2. \"method\": This property denotes the HTTP method used for the request. Here, \"GET\" method is used which is typically for retrieving data.\n\n3. \"url\": This is the URL for the API endpoint. It points to the specific location in your application where the request should go. Here, it's \"http://localhost:3000/api/chat/thread/all/?threadId=threadId&deleted=1\". The URL contains two query parameters \"threadId\" and \"deleted\". \n   - \"threadId\" is parameter used to specify the particular Thread you're looking to access.\n   - \"deleted\" parameter is set to 1, indicating that deleted messages are also to be fetched.\n\n4. \"headers\": Contains an array of objects with information to be sent as headers with the request. Currently, it is empty and disabled. \n\n5. \"body\": Contains the format and content of the body of the request. In this endpoint, it's indicated as 'raw' mode, which means you can send whatever data you wish. But here the raw data is empty string denoting no additional data is sent with this request. \n\nPlease remember to replace 'BearerToken' and 'threadId' with your actual bearer token and thread ID while using it.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threadId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "threadId"
          },
          {
            "name": "deleted",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "example": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/chat/thread/delete": {
      "post": {
        "tags": [
          "ChatThread"
        ],
        "summary": "Chat - Thread - Delete",
        "description": "Endpoint Name: Chat - Thread - Delete\n\n1. Authentication: This API request requires a bearer token for authentication. The token should be a session ID which is to be provided as a string data type.\n\n2. Method: This API uses a POST method. POST is used to send data to the server to create/update a resource.\n\n3. URL: This is the uniform resource locator (URL) to which the API request is sent. In this case, it is \"http://localhost:3000/api/chat/thread/delete\". It suggests that this API endpoint is used to delete a chat thread.\n\n4. Headers: In this request, there aren't any additional headers required as suggested by the empty key-value pair. The \"disabled\" field set as true signifies that this property is not currently in use.\n\n5. Body: This contains the information that needs to be sent to the server. The mode is set as \"raw\" which suggests the format of the body content is in raw JSON format. The raw JSON is a stringified object that needs three properties to perform the operation.\n\n    - sessionId: The session ID for which the chat thread will be deleted. This should be a string that corresponds to a valid session in your application.\n    \n    - accountId: The account ID who is a part of this thread. This ID helps ensure that the requester has the authority to delete the thread.\n    \n    - threadId: The specific ID of the chat thread that is to be deleted. This should correspond to a valid thread in your application.\n\nPlease ensure your request adheres to this specification for successful operation.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\",\\\"threadId\\\":\\\"threadId\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/ad/create": {
      "post": {
        "tags": [
          "ConnectAd"
        ],
        "summary": "Connect - Ads - Create",
        "description": "This is a 'POST' request named \"Connect - Ads - Create\", used for creating advertisement data. \n\n1. **Authentication:** Uses 'Bearer' token authentication. You have to provide a 'token' in the bearer authorization field. The value of this token is 'BearerToken' string.\n\n2. **Headers:** There's a header field provided in the request, but it's disabled by default, so it won't have any effect on your request.\n\n3. **Request Body:** The needed data with their types and typical values are:\n\n    - **sessionId (String):** The ID of the session. \n    - **accountId (String):** The ID of the account creating the advertisement.\n    - **name (String):** The name of the advertisement e.g., 'MyNikeAds'.\n    - **description (String):** A brief description about the advertisement.\n    - **tags (String):** Tags associated with the advertisement separated by commas.\n    - **profilePhotoUrl (String):** The URL of the profile picture for the advertisement.\n    - **coverPhotoUrl (String):** The URL of the cover picture for the advertisement.\n    - **minimumTipAmount (Number):** The minimum tip amount for the advertisement.\n    - **unlockAmount (Number):** The amount to unlock the advertisement.\n    - **category (String):** The category for the advertisement.\n    - **subCategory (String):** The subcategory of the advertisement.\n    - **searchType (String):** The type of search to be made.\n    - **isEnabled (Boolean):** Indicating if the advertisement is enabled or not.\n    - **isAdsPrivate (Boolean):** Indicating if the advertisement is private or not.\n    - **isTournamentOnly (Boolean):** True if the advertisement is only for tournaments else false.\n    - **isAdsDefault (Boolean):** If true, makes this advertisement the default one.\n    - **isPreLiveConnectAds (Boolean):** Check if this is a pre-live ad.\n    - **isPostLiveConnectAds (Boolean):** Check if this is a post-live ad.\n    - **breakPreLiveConnectUrl (String):** URL for the pre-live break media.\n    - **breakLivePauseConnectUrl (String):** URL for the paused-live break media.\n    - **breakPostLiveConnectUrl (String):** URL for the post-live break media.\n\nThe request body is JSON formatted. Please make sure you input the correct types against each key. \n\nFinally, you can send the request to the provided URL: 'http://localhost:3000/api/connect/ad/create'.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "sessionId": "sessionId",
                  "accountId": "accountId",
                  "name": "MyNikeAds",
                  "description": "This ad is my second ad",
                  "tags": "second,ad",
                  "profilePhotoUrl": "https://example.com/profile.jpg",
                  "coverPhotoUrl": "https://example.com/cover.jpg",
                  "minimumTipAmount": 10,
                  "unlockAmount": 1,
                  "category": "General",
                  "subCategory": "Specific",
                  "searchType": "Game",
                  "isEnabled": true,
                  "isAdsPrivate": true,
                  "isTournamentOnly": false,
                  "isAdsDefault": true,
                  "isPreLiveConnectAds": true,
                  "isPostLiveConnectAds": true,
                  "breakPreLiveConnectUrl": "https://example.com/break-pre-live.mp4",
                  "breakLivePauseConnectUrl": "https://example.com/break-paused-live.mp4",
                  "breakPostLiveConnectUrl": "https://example.com/break-post-live.mp4"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/ad/update": {
      "put": {
        "tags": [
          "ConnectAd"
        ],
        "summary": "Connect - Ads - Update",
        "description": "1. \"name\": This is the name of the API endpoint. For this particular endpoint, the name is \"Connect - Ads - Update\". This indicates that the endpoint is used to update ads within a connect feature.\n  \n2. \"request\": This specifies the details needed to make the HTTP request. \n\n3. \"auth\": This indicates the type of authorization used to access this endpoint. This endpoint uses Bearer Token for authorization.\n\n4. \"bearer\": This contains the bearer token details. The \"key\" is \"token\", the \"value\" is \"BearerToken\", and the \"type\" is \"string\".\n\n5. \"method\": This denotes the HTTP method to be used for the request. The endpoint uses the PUT method, used for updating the resource.\n\n6. \"url\": This is where the request will be sent. The API link is \"http://localhost:3000/api/connect/ad/update\".\n\n7. \"headers\": This contains additional parameters sent with the request. There's one header where the \"key\" is \"Client-UUID\", the \"value\" is \"ClientUUID\", and the \"type\" is \"default\".\n\n8. \"body\": This is the data to be sent as the request body. The request body should be sent in the raw format.\n\n9. \"mode\": This indicates the format of the body data. The \"mode\" is \"raw\".\n\n10. \"raw\": This contains the data to be sent for an update. The data to be sent here includes adId, sessionId, accountId, name, description, tags, profilePhotoUrl, coverPhotoUrl, minimumTipAmount, unlockAmount, category, subCategory, searchType, isEnabled, isAdsPrivate, isTournamentOnly, isAdsDefault, isPreLiveConnectAds, isPostLiveConnectAds, breakPreLiveConnectUrl, breakLivePauseConnectUrl, and breakPostLiveConnectUrl. All these parameters are contained in a JSON object.\n\n11. \"options\": This indicates the options for processing the body data. In this case, only the \"raw\" option is specified and the \"language\" is \"json\". This means the incoming data is expected to be a raw JSON. \n\nPlease note: All bool parameters (isEnabled, isAdsPrivate, etc.) accept true or false. URL parameters (profilePhotoUrl, etc.) accept valid URL strings. Other parameters accept mostly string values. Numeric parameters like minimumTipAmount and unlockAmount accept integer values.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "adId": "adId",
                  "sessionId": "sessionId",
                  "accountId": "accountId",
                  "name": "MyNikeAds",
                  "description": "This ad is my second ad",
                  "tags": "second,ad",
                  "profilePhotoUrl": "https://example.com/profile.jpg",
                  "coverPhotoUrl": "https://example.com/cover.jpg",
                  "minimumTipAmount": 10,
                  "unlockAmount": 100,
                  "category": "General",
                  "subCategory": "Specific",
                  "searchType": "Game",
                  "isEnabled": true,
                  "isAdsPrivate": true,
                  "isTournamentOnly": false,
                  "isAdsDefault": true,
                  "isPreLiveConnectAds": true,
                  "isPostLiveConnectAds": true,
                  "breakPreLiveConnectUrl": "https://example.com/break-pre-live.mp4",
                  "breakLivePauseConnectUrl": "https://example.com/break-paused-live.mp4",
                  "breakPostLiveConnectUrl": "https://example.com/break-post-live.mp4"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Client-UUID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "ClientUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/ad/get": {
      "get": {
        "tags": [
          "ConnectAd"
        ],
        "summary": "Connect - Ads - Get",
        "description": "This endpoint is named \"Connect - Ads - Get\". This is a call to fetch specific advertisement data based upon the adId provided. Here is a more detailed explanation of its components:\n\n1. `name`: The name of the endpoint. It is denoted as \"Connect - Ads - Get\". It indicates the operation of connecting and fetching data related to ads.\n\n2. `request`: This indicates an HTTP request that is to be sent. \n\n3. `auth`: The authentication type used for this request. It is using 'bearer' authentication which means that a bearer token will be used to validate the request. The `token` key is the actual location where the bearer token must be inserted. The token value should be of string type.\n\n4. `method`: This is the HTTP method type. The \"GET\" method is used which means this request fetches data from the server at the specified resource.\n\n5. `url`: This is the URL where the request will be sent. The base URL is `http://localhost:3000/api/connect/ad/get/` and it should be appended by `?adId=` followed by the actual id of the ad you want to retrieve.\n\n6. `headers`: This section is for specifying additional HTTP request options. No key-value pair is provided in this request so, by default, no additional headers will be included in the request.\n\n7. `body`: This is the part of HTTP request where additional data is sent along with the request. In this case, `mode` is set to 'raw' but no actual data is being sent as the `raw` field is empty. So, 'raw' body mode will not affect this request.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "adId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "adId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/ad/all": {
      "get": {
        "tags": [
          "ConnectAd"
        ],
        "summary": "Connect - Ads - Get All",
        "description": "This endpoint, named \"Connect - Ads - Get All\", is designed to fetch all ads associated with a specified account. \n\nBelow are the details of the endpoint parameters:\n\n- The `name` field signifies the title of the endpoint, here it is \"Connect - Ads - Get All\", indicating that this endpoint is used to retrieve all the ads from a destination (typically a server or cloud).\n\n- The `request` field contains the characteristics of the API request. This request type is a \"GET\" method as indicated in the `method` field. A GET request is used to retrieve data from a server. \n\nIn the `auth` subfield:  \n\n- `type` indicates which type of authorization is used. Here it's \"bearer\", which represents Bearer Authentication, often used for authentication requests with tokens.\n  \n- Under `bearer`:\n     - `key`: Refers to what kind of authorization detail is required. In this case, it is a \"token\".\n     - `value`: Displays the value of the authorization detail required; place your Bearer token here (represented by \"BearerToken\").\n     - `type`: Defines the data type of the `value`, it's a \"string\" in this case.  \n\n- The `url` field provides the endpoint for the API request, here it is \"http://localhost:3000/api/connect/ad/all/?accountId=accountId\". This is the link to your local server or cloud where the request will fetch all the ads based on the 'accountId' provided.\n\n- The `headers` subfield contains an array of objects where you can specify additional HTTP headers. In this case, the input is blank and set to \"default\" with the disabled status set to true. It indicates that the header is not participating in the current API request.\n\n- The `body` field is used for data that needs to be sent to the server. Since this is a GET request, there is typically no need to send a body. Here, `mode` is set to \"raw\", indicating that unprocessed data will be sent, however its `raw` value is currently set to an empty string (\"\").",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "accountId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/ad/delete": {
      "post": {
        "tags": [
          "ConnectAd"
        ],
        "summary": "Connect - Ads - Delete",
        "description": "This endpoint is named \"Connect - Ads - Delete\". It is designed to delete specific advertisements using a specific URL and requires a bearer authentication type. Here are detailed descriptions of each of its data components:\n\n1. `name`: This parameter determines the endpoint's name. In this case, the name is \"Connect - Ads - Delete\". This name indicates that the action supported by this endpoint is the deletion of ads.\n\n2. `request`: This object envelops all the necessary information required to make a valid request to the endpoint.\n\n3. `auth`: This is a security configuration that enforces the type of authentication required by this endpoint. The current authorization type is \"bearer\". It necessitates you to provide a token in order to access the endpoint.\n\n   - `type`: Specifies the type of authentication. Value is \"bearer\".\n   - `bearer`: This is an array that contains all the bearer token details:\n        - `key`: Specifies the name of the token, which in this case is \"token\".\n        - `value`: The actual placeholder for the token value. The current placeholder is \"sessionId\".\n        - `type`: The type of value the key holds, which in this case is string.\n\n4. `method`: The HTTP method that this endpoint uses. It currently uses the \"POST\" method, implying that this endpoint is used to send data to be processed to the specified resource.\n\n5. `url`: This is the actual URL at which the endpoint resides. The current URL is \"http://localhost:3000/api/connect/ad/delete\".\n\n6. `headers`: This is an array that would typically hold any additional header elements required by the endpoint. Currently, there are no additional headers needed, and hence everything has been set to blank or disabled.\n\n7. `body`: This marks where the payload of the request should be defined.\n   - `mode`: Relevantly indicates the format of the body payload. It's set to \"raw\", which means you can send anything in the body, but most often it is used to send JSON formatted string in unprocessed format.\n   - `raw`: Contains the actual information payload that will be sent to the server. This needs to be a string. The included information are \"sessionId\", \"accountId\" and \"adId\".\n\nIn summary, this endpoint deletes an ad by taking the adId from the user, and it authorizes using bearer tokens. The endpoint URL is \"http://localhost:3000/api/connect/ad/delete\", and it follows a POST HTTP method.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\",\\\"adId\\\":\\\"adId\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/comment/create": {
      "post": {
        "tags": [
          "ConnectComment"
        ],
        "summary": "Connect - Comment - Create",
        "description": "\"Connect - Comment - Create\" API endpoint:\n\nThis endpoint is given a name \"Connect - Comment - Create\". This suggests the API endpoint is used for creating a new comment in the connect section of the application.\n\nAuthentication:\n\nThe \"auth\" field defines the type of authorization required to access this API endpoint. Authentication is done through a \"bearer\" token that has a key-value format, with a key of \"token\" and a string value of the actual token.\n\nRequest Type:\n\nThe \"method\" field defines the HTTP method used for this API endpoint. In this case, the POST method is used which means that the client is sending data to the server to create a new resource.\n\nAPI URL:\n\nThe \"url\" field explains the address where a request is being sent. For this endpoint, it is \"http://localhost:3000/api/connect/comment/create\". The 'localhost' suggests that the API is local to the server.\n\nHeaders:\n\nIn the \"headers\" array, it's specified that no additional headers are provided for the request. The default headers are disabled.\n\nRequest Body:\n\nThe API receives the request body in a \"raw\" format, meaning the body content is presented as a string. The language of the raw string content is JSON.\n\nThe raw data contains information necessary to create a new comment, including:\n- User's session and account IDs.\n- Comment's name, description, tags, photo URL, and cover photo URL.\n- Minimum tip amount and unlock amount for the comment.\n- The category and subcategory of the comment.\n- Type of search associated with the comment.\n- Various state flags suggesting if the comment is enabled, private, part of a tournament only, default, has pre/post/live ads.\n- The URLs for pre-live, paused-live, and post-live breaks for the comment.\n\nOptions:\n\nThe \"options\" field indicates optional configurations for request body. It specifies that the raw data uses \"json\" language format.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "sessionId": "sessionId",
                  "accountId": "accountId",
                  "name": "MyNikeComment",
                  "description": "This comment is my second comment",
                  "tags": "second,comment",
                  "commentPhotoUrl": "https://example.com/comment.jpg",
                  "coverPhotoUrl": "https://example.com/cover.jpg",
                  "minimumTipAmount": 10,
                  "unlockAmount": 1,
                  "category": "General",
                  "subCategory": "Specific",
                  "searchType": "Game",
                  "isEnabled": true,
                  "isCommentPrivate": true,
                  "isTournamentOnly": false,
                  "isCommentDefault": true,
                  "isPreLiveConnectAds": true,
                  "isPostLiveConnectAds": true,
                  "breakPreLiveConnectUrl": "https://example.com/break-pre-live.mp4",
                  "breakLivePauseConnectUrl": "https://example.com/break-paused-live.mp4",
                  "breakPostLiveConnectUrl": "https://example.com/break-post-live.mp4"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/comment/update": {
      "put": {
        "tags": [
          "ConnectComment"
        ],
        "summary": "Connect - Comment - Update",
        "description": "This endpoint is named \"Connect - Comment - Update\". It uses the PUT method, suggesting that it's used for updating existing records. The URL for this endpoint is \"http://localhost:3000/api/connect/comment/update\". \n\nIt requires Bearer token authentication, where the token needs to be provided as a string in the 'token' key.\n\nThe 'Client-UUID' which is of default type needs to be provided in the headers. It uniquely identifies the client making the request.\n\nIn the body of the request, the data needs to be in raw JSON format. Below is a description of each field that is expected in the request body:\n\n- `commentId`: The unique identifier of the comment that is being updated.\n- `sessionId`: The unique identifier of the session.\n- `accountId`: The unique identifier of the account.\n- `name`: The name of the comment.\n- `description`: A descriptive text about the comment.\n- `tags`: Related tags for the comment separated by commas.\n- `commentPhotoUrl`: The URL of the photo related to the comment.\n- `coverPhotoUrl`: The URL of the cover photo.\n- `minimumTipAmount`: The minimum amount for tipping.\n- `unlockAmount`: The amount required to unlock.\n- `category`: The category of the comment.\n- `subCategory`: A more specific category under the main category.\n- `searchType`: The type of game related to the comment.\n- `isEnabled`: A boolean field to indicate if the comment is enabled or not.\n- `isCommentPrivate`: A boolean field to indicate if the comment is private or not.\n- `isTournamentOnly`: A boolean field to indicate if the comment is for tournaments only.\n- `isCommentDefault`: A boolean field to indicate if the comment is the default.\n- `isPreLiveConnectAds`: A boolean field to indicate if ads should be displayed before the live connect.\n- `isPostLiveConnectAds`: A boolean field to indicate if ads should be displayed after the live connect.\n- `breakPreLiveConnectUrl`: The URL where the break pre-live connect would be directed.\n- `breakLivePauseConnectUrl`: The URL where the paused live connect would be directed.\n- `breakPostLiveConnectUrl`: The URL where the break post-live connect would be directed.\n\nThe language used for raw data in options is JSON.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "commentId": "commentId",
                  "sessionId": "sessionId",
                  "accountId": "accountId",
                  "name": "MyNikeComment",
                  "description": "This comment is my second comment",
                  "tags": "second,comment",
                  "commentPhotoUrl": "https://example.com/comment.jpg",
                  "coverPhotoUrl": "https://example.com/cover.jpg",
                  "minimumTipAmount": 10,
                  "unlockAmount": 100,
                  "category": "General",
                  "subCategory": "Specific",
                  "searchType": "Game",
                  "isEnabled": true,
                  "isCommentPrivate": true,
                  "isTournamentOnly": false,
                  "isCommentDefault": true,
                  "isPreLiveConnectAds": true,
                  "isPostLiveConnectAds": true,
                  "breakPreLiveConnectUrl": "https://example.com/break-pre-live.mp4",
                  "breakLivePauseConnectUrl": "https://example.com/break-paused-live.mp4",
                  "breakPostLiveConnectUrl": "https://example.com/break-post-live.mp4"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Client-UUID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "ClientUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/comment/get": {
      "get": {
        "tags": [
          "ConnectComment"
        ],
        "summary": "Connect - Comment - Get",
        "description": "This endpoint is labeled \"Connect - Comment - Get\". It provides a functionality to retrieve a comment from the connect API. \n\n1. \"auth\": This is the authorization method required for the API. It uses a 'bearer token' for authorization. A bearer token is a type of access token that is sent as a part of the header in API requests to authenticate the user making the request. \n    - \"type\": Is \"bearer\", indicating the type of authorization method in use.\n    - \"bearer\": This is an array containing bearer token information.\n        - \"key\": Specifies \"token\" as the key.\n        - \"value\": The value is expected to be the actual \"BearerToken\" to authenticate the request.\n        - \"type\": Is \"string\", specifying that the value of the token will be a string.\n\n2. \"method\": The method to be used to request the particular endpoint. In this case, it is \"GET\", meaning the request will retrieve information from the API.\n\n3. \"url\": This is the address where the API is located. Here it is \"http://localhost:3000/api/connect/comment/get/?commentId=commentId\". It also includes a parameter \"commentId\", which allows users to specify the comment they want to retrieve information about.\n\n4. \"headers\": This field is used to send additional information in the request header. In this endpoint, it is set to empty (both key and value) and is also disabled.\n\n5. \"body\": This section contains any data that needs to be sent with a request. Here, the \"mode\" is set to \"raw\", indicating that the body content should be taken 'as is'. In this endpoint, no body data (raw content) should be sent as it's a GET request and so, \"raw\" is set to an empty string.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "commentId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "commentId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/comment/all": {
      "get": {
        "tags": [
          "ConnectComment"
        ],
        "summary": "Connect - Comment - Get All",
        "description": "This endpoint is named \"Connect - Comment - Get All\". It is designed to retrieve all comments associated with a specified account ID from a Connect application. The request sent to this endpoint involves several data components:\n\n- \"auth\": This required field specifies the authentication method for accessing this endpoint. For this case, it uses bearer authentication, where the credentials are sent in the HTTP header. The bearer token is expected to be a string data type. A valid token is required to access this resource.\n\n- \"method\": This endpoint utilizes the GET method. It's primarily designed to retrieve data from a server.\n\n- \"url\": This is where the server needs to send the request. The URL is 'http://localhost:3000/api/connect/comment/all/?accountId=accountId'. It is designed to run on the local server on port 3000. The path '/api/connect/comment/all' indicates it's accessing the Connect application's comment feature to get all comments. It requires an 'accountId' query parameter representing the user's account ID.\n\n- \"headers\": Headers can be used to pass additional information to/from a server. In this case, the field is left empty and disabled, indicating no extra header information is transmitted with the request.\n\n- \"body\": Defines the data to be sent to the server. The 'mode' signifies how the information is sent, 'raw' means the information is sent unformatted. However, in this case, the 'raw' data is empty, indicating this GET request does not send any data in the body since it's only retrieving comments.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "accountId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/comment/delete": {
      "post": {
        "tags": [
          "ConnectComment"
        ],
        "summary": "Connect - Comment - Delete",
        "description": "This endpoint is called \"Connect - Comment - Delete\". \n\n1. **name**: This field denotes the name of the endpoint. It indicates that this API endpoint is used to manage (delete) comments within a connect feature set.\n\n2. **request**: This field contains all the necessary components to make a HTTP request such as the authentication process, the HTTP method, the URL of the request, headers (if any), and the body of the request.\n\n3. **auth**: This is part of the request that deals with the authentication process to access the endpoint. Here, it uses Bearer Token authentication. This type of authentication is an HTTP authentication scheme that involves security tokens called Bearer Tokens.\n    - **type**: The type of token required is called a \"bearer\".\n    - **bearer**: An array containing an object that holds information about the token.\n    - **key**: The name of the token which is \"token\".\n    - **value**: The value of the token is \"sessionId\", which indicates that a session id will be used for the authentication process.\n    - **type**: Indicates that the field requires a string value.\n\n4. **method**: This specifies the HTTP method for the request, which is 'POST' in this case. It is used here because we are deleting information on the server. \n\n5. **url**: This the URL where the server will receive the HTTP request. Here, the request is sent to a local server 'http://localhost:3000/api/connect/comment/delete'.\n\n6. **headers**: This is an array that contains an object which could potentially hold information to be sent as part of the request header. Though in this case, there is no key-value pair provided and has been disabled.\n\n7. **body**: This is the part where additional information or data that is needed to complete the HTTP request is provided.\n    - **mode**: Tells the mode of the data/input sent with the request. Here it is 'raw', which indicates that the data/input is not processed and is sent as is.\n    - **raw**: This is actual data being sent with the request. For this endpoint, the raw data includes a JSON object containing a \"sessionId\", \"accountId\", and a \"commentId\" all of which have respective values. The values need to be replaced with a valid session id, account id, and comment id respectively before sending the request.\n  \nNote: It is very important that you have the necessary authorization and follow the description precisely to successfully make a request to this endpoint.\n",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\",\\\"commentId\\\":\\\"commentId\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/contact/create": {
      "post": {
        "tags": [
          "ConnectContact"
        ],
        "summary": "Connect - Contact - Create",
        "description": "This API endpoint, `Connect - Contact - Create`, creates a new contact using the `POST` method. The URL of the endpoint is `http://localhost:3000/api/connect/contact/create`.\n\nThe `auth` object specifies the type of authentication: Bearer Token. The `token` key needs to hold the value of the Bearer Token. This should be of `string` data type.\n\nIn `request headers`, there's a default key-value pair which is disabled. You can add necessary headers if needed.\n\nThe `body` of the request contains raw JSON data, specified by the `mode`. It contains several key-value pairs:\n\n- `sessionId`: This should hold the session id.\n- `accountId`: This should hold the account id.\n- `name`: This represents the name of the contact we are trying to create.\n- `description`: A short description about the contact.\n- `tags`: Labels or keywords related to the contact.\n- `profilePhotoUrl`: The URL of the profile photo.\n- `coverPhotoUrl`: The URL of the cover photo.\n- `minimumTipAmount`: The minimum amount of tip that can be given to the contact.\n- `unlockAmount`: The amount required to unlock something regarding the contact.\n- `category`: The general category of the contact.\n- `subCategory`: The more specific category inside the general category.\n- `searchType`: The type of search associated with the contact.\n- `isEnabled`: A boolean indicating whether the contact is enabled.\n- `isContactPrivate`: A boolean indicating whether the contact is private.\n- `isTournamentOnly`: A boolean indicating whether the contact is only for tournaments.\n- `isContactDefault`: A boolean indicating whether the contact is set as default.\n- `isPreLiveConnectAds`: A boolean indicating whether pre-live connect ads are enabled.\n- `isPostLiveConnectAds`: A boolean indicating whether post-live connect ads are enabled.\n- `breakPreLiveConnectUrl`: The URL to the pre-live connect ad break content.\n- `breakLivePauseConnectUrl`: The URL to the paused-live connect ad break content.\n- `breakPostLiveConnectUrl`: The URL to the post-live connect ad break content.\n\nYou should format the body as JSON before sending the request, as indicated by the `language` option inside the `options` object of the `body`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "sessionId": "sessionId",
                  "accountId": "accountId",
                  "name": "MyNikeContact",
                  "description": "This contact is my second contact",
                  "tags": "second,contact",
                  "profilePhotoUrl": "https://example.com/profile.jpg",
                  "coverPhotoUrl": "https://example.com/cover.jpg",
                  "minimumTipAmount": 10,
                  "unlockAmount": 1,
                  "category": "General",
                  "subCategory": "Specific",
                  "searchType": "Game",
                  "isEnabled": true,
                  "isContactPrivate": true,
                  "isTournamentOnly": false,
                  "isContactDefault": true,
                  "isPreLiveConnectAds": true,
                  "isPostLiveConnectAds": true,
                  "breakPreLiveConnectUrl": "https://example.com/break-pre-live.mp4",
                  "breakLivePauseConnectUrl": "https://example.com/break-paused-live.mp4",
                  "breakPostLiveConnectUrl": "https://example.com/break-post-live.mp4"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/contact/update": {
      "put": {
        "tags": [
          "ConnectContact"
        ],
        "summary": "Connect - Contact - Update",
        "description": "1. **name**: The name of the function or endpoint. Here, it represents an operation to update contact in the 'Connect' functionality.\n\n2. **request**: This object contains data relevant to making HTTP requests.\n\n3. **auth**: The authorization method to be used. Here, it is 'bearer' token-based auth.\n\n   - **type**: The type of authorization used. In this case, it is 'bearer'.\n   - **bearer**: An array that includes the token details to be sent along with an API request.\n     - **key**: The label of the auth token that we are sending. Here it is \"token\".\n     - **value**: This is the actual auth token which is called 'BearerToken'.\n     - **type**: Specifies the data type of the value, here it is 'string'.\n\n4. **method**: The HTTP method to be used for the request. Here it is PUT, which means we're updating existing data.\n\n5. **url**: The URL to hit for the API endpoint. The given endpoint is for updating contact in the 'Connect' functionality.\n\n6. **headers**: An array that includes additional data to be sent along with an API request.\n   - **key**: The label of the header that we are sending. Here it is \"Client-UUID\".\n   - **value**: This is the actual header value which is 'ClientUUID'.\n   - **type**: Specifies how the header is to be utilized, here it is 'default'.\n\n7. **body**: This provides data that is sent as the body of the request.\n   - **mode**: Specifies how the body data is presented, here it is 'raw'.\n   - **raw**: The raw format of the data to be sent. It is in JSON format and contains various keys describing the contact's details like 'contactId', 'sessionId', 'accountId'.\n   - **options**: This provides additional settings for how the body data should be handled.\n     \n     Following are some of the essential parameters in the body you should be mindful of:\n     \n     - **contactId**: Uniquely identifies a contact to be updated.\n     - **sessionId**: Represents the unique Id for current session.\n     - **accountId**: The unique identifier of the user making the request.\n     - **name**: The name of the contact.\n     - **description**: Gives a brief about the contact.\n     - **tags**: Comma-separated values to categorize contacts. \n     - **profilePhotoUrl**: URL of the profile image of the contact.\n     - **coverPhotoUrl**: URL of the cover image of the contact.\n     - **minimumTipAmount**: Smallest amount a user can tip the contact.\n     - **unlockAmount**: The amount required to unlock the contact.\n     - **category**: The general category under which the contact falls.\n     - **subCategory**: More specific category of the contact.\n     - **searchType**: Specifies the search type for the contact.\n     - **isContactPrivate**: A boolean indicating if the contact is private or not.\n     - **isTournamentOnly**: A boolean indicating if the contact is only for tournaments.\n     - **isEnabled**: A boolean indicating if the contact is enabled or not.\n     - **isContactDefault**: A boolean indicating if the contact is a default contact or not.\n     - **isPreLiveConnectAds**: A boolean indicating if pre-live connect ads are enabled for this contact.\n     - **breakPreLiveConnectUrl**: URL of the break pre-live connect video.\n     - **breakLivePauseConnectUrl**: URL of the break live pause connect video.\n     - **breakPostLiveConnectUrl**: URL of the break post-live connect video.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "contactId": "contactId",
                  "sessionId": "sessionId",
                  "accountId": "accountId",
                  "name": "MyNikeContact",
                  "description": "This contact is my second contact",
                  "tags": "second,contact",
                  "profilePhotoUrl": "https://example.com/profile.jpg",
                  "coverPhotoUrl": "https://example.com/cover.jpg",
                  "minimumTipAmount": 10,
                  "unlockAmount": 100,
                  "category": "General",
                  "subCategory": "Specific",
                  "searchType": "Game",
                  "isEnabled": true,
                  "isContactPrivate": true,
                  "isTournamentOnly": false,
                  "isContactDefault": true,
                  "isPreLiveConnectAds": true,
                  "isPostLiveConnectAds": true,
                  "breakPreLiveConnectUrl": "https://example.com/break-pre-live.mp4",
                  "breakLivePauseConnectUrl": "https://example.com/break-paused-live.mp4",
                  "breakPostLiveConnectUrl": "https://example.com/break-post-live.mp4"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Client-UUID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "ClientUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/contact/get": {
      "get": {
        "tags": [
          "ConnectContact"
        ],
        "summary": "Connect - Contact - Get",
        "description": "1. \"name\": This contains the descriptive name of the API request. Here, the name is \"Connect - Contact - Get\" which signifies the functionality of this specific endpoint. This endpoint is used to establish a connection, specifically targeting the 'contact' part of an application/database to get information related to it.\n\n2. \"request\": This object encapsulates all the details of the API request.\n\n    a. \"auth\": This represents the type of authorization used for transactions. It is an object that specifies the authorization type and the required credentials. Here, bearer authentication is used where the type is marked as \"bearer\".\n    \n        i. \"type\": This field describes the type of authorization being used. In this case, it is 'bearer'.\n        \n        ii. \"bearer\": This is an array of objects where each object represents an authorization parameter. Here, there's only one authorization parameter.\n        \n            - \"key\": It is the name of the authorization parameter, in this case, it's 'token'.\n            \n            - \"value\": It represents the value of the authorization parameter, in this case, it indicates 'BearerToken'.\n            \n            - \"type\": This is the type of the authorization parameter, and here, it is a string.\n    \n    b. \"method\": This parameter refers to the HTTP method used for the request. Here the method is 'GET', which is typically used to retrieve data.\n    \n    c. \"url\": This is the link to the resource you are trying to access. Here, 'http://localhost:3000/api/connect/contact/get/?contactId=contactId' is the url.\n    \n    d. \"headers\": This is an array used for passing additional information to the server. There is one header object that doesn't contain any data and it is disabled by default.\n    \n        i. \"key\": The header’s name/key. In this case, it's empty.\n        \n        ii. \"value\": The value assigned to the specified key. This field is also empty.\n        \n        iii. \"type\": Describes the type of header, with 'default' as a common example. Here, it is 'default'.\n        \n        iv. \"disabled\": A switch indicating the state of the header. If 'true', the header is not applied during API requests. Here it is set to 'true', indicating that this header is disabled.\n    \n    e. \"body\": This object contains details of what data to send in the API request.\n    \n        i. \"mode\": This parameter describes the format the body data is sent as. In this case, it is 'raw'.\n        \n        ii. \"raw\": This field is used to include raw input (when 'mode' is 'raw'). Currently, it is blank, indicating no raw data is included in the request.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "contactId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "contactId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/contact/all": {
      "get": {
        "tags": [
          "ConnectContact"
        ],
        "summary": "Connect - Contact - Get All",
        "description": "This endpoint `Connect - Contact - Get All` is a GET Request which retrieves all the contact information tied to the specified `accountId`. Below is the detailed description of each element in the endpoint:\n\n- `name`: The title of the endpoint. It's called \"Connect - Contact - Get All\", which suggests that we are retrieving all the contact details associated with an account in the Connect service.\n\n- `request`: This is the main part that defines what the request does.\n\n  - `auth`: This section represents the type of authentication required for this endpoint. The \"auth\" stands for \"authentication\".\n    \n    - `type`: The type of the token used for the authentication. In this case, it is a \"bearer\" which is a method to send authentication data to the server.\n    \n    - `bearer`: This is an array that holds the authentication token details. The `key` attribute indicates how this token is referred in the headers - as 'token'. While the `value` attribute holds the variable 'BearerToken' which stores the actual token value. The `type` must always be a string.\n\n  - `method`: This refers to the HTTP verb used for this request. Here, it's a \"GET\" request, meaning you are retrieving information from the server.\n\n  - `url`: It contains the location to which the request is sent. `http://localhost:3000/api/connect/contact/all/?accountId=accountId` indicates that request is sending to the localhost on port 3000. The path `/api/connect/contact/all` indicates that we are accessing the 'all' operation in the 'contact' resource of the 'connect' service. The `accountId` is a query parameter that should hold the actual id of the account for which we want to fetch the contact information. \n\n  - `headers`: The headers that should be included in the HTTP request. In this case, there's a `key` and `value` pair which is set to empty by default and has been `disabled`. It means, we can disregard this from request headers as it has no impact on the current request\n\n  - `body`: This is usually where you specify the content of your request. However, for this GET Request, the body has `mode` set to 'raw' and `raw` set to an empty string, meaning, it doesn't need to send any additional data in the request body.\n  \nThis endpoint will respond with all the contact information related to the provided `accountId`.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "accountId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/contact/delete": {
      "post": {
        "tags": [
          "ConnectContact"
        ],
        "summary": "Connect - Contact - Delete",
        "description": "This endpoint is named \"Connect - Contact - Delete\". It's a POST request intended to delete a contact in the system. The detailed description for each field in the endpoint is as follows:\n\n1. **`name`**: The name of the endpoint, i.e., \"Connect - Contact - Delete\". It describes the operation performed by the endpoint.\n\n2. **`request`**: This object contains all the information needed to make the HTTP request. It is divided into several fields:\n   \n    a. **`auth`**: The method of authorization required to access this endpoint is set in this object.\n   \n        - **`type`**: The value \"bearer\" indicates the type of authorization is Bearer Token Authentication.\n         \n        - **`bearer`**: A list of objects specifying the details of the bearer token.\n          \n            - **`key`**: This is the term used in the header for the authentication token; in this case it's \"token\".\n          \n            - **`value`**: The value to be replaced by the actual session Id.\n            \n            - **`type`**: The data type of the value, in this case, it is \"string\".\n   \n    b. **`method`**: This field denotes the HTTP method to be used for the request. \"POST\" allows data to be sent as a body of the request.\n\n    c. **`url`**: This represents the endpoint where the request will be sent. In this case, it's http://localhost:3000/api/connect/contact/delete.\n\n    d. **`headers`**: A list of objects specifying the HTTP headers to be sent to the request. In this case, all fields are empty or default indicating no additional headers are needed for the request.\n\n    e. **`body`**: This contains the actual data to be sent with the request.\n\n        - **`mode`**: The mode of the body content, in this case, it's \"raw\", meaning the content will be sent as a raw string.\n        \n        - **`raw`**: The raw request payload, composed of key-value pairs represented as a string. The keys are: \"sessionId\", \"accountId\", and \"contactId\". Their values need to be replaced with the actual session id, account id, and contact id respectively.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\",\\\"contactId\\\":\\\"contactId\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/event/create": {
      "post": {
        "tags": [
          "ConnectEvent"
        ],
        "summary": "Connect - Event - Create",
        "description": "This endpoint, \"Connect - Event - Create\", is a Postman request for creating an event in application.\n\n1. \"name\": This is the name of the endpoint being defined.\n\n2. \"request\": Which includes the main properties of the request.\n\n   - \"auth\": The section that contains the security parameters required for the connection.\n     - \"type\": This specifies the used authorization type which is a \"bearer\" in this case.\n     - \"bearer\": This is an array that contains the bearer token needed for authentication.\n       - \"key\": This specifies the header field name for the token, which is \"token\".\n       - \"value\": This specifies the value of the token as \"BearerToken\".\n       - \"type\": The format of the token specified here, which is a \"string\".\n  \n   - \"method\": This specifies the HTTP method being used, which is \"POST\" in this case.\n   \n   - \"url\": The URL where the request will be sent, specifically: \"http://localhost:3000/api/connect/event/create\".\n\n   - \"headers\": Additional headers to be sent as part of the request. In this case, it's empty and is disabled.\n\n   - \"body\": The body of the request.\n     - \"mode\": This specifies the format of the body, which is \"raw\" in this case.\n     - \"raw\": It includes the raw JSON data to be sent in the request body.\n         The different properties include: sessionId, accountId, name, description, tags, profile photo URL, cover photo URL, minimum tip amount, unlock amount, category, subcategory, search type, and various boolean flags.\n     - \"options\": further options for body processing.\n       - \"raw\": Allows specifying the language to be used when processing the raw body, which is \"json\" in this case.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "sessionId": "sessionId",
                  "accountId": "accountId",
                  "name": "MyNikeEvent",
                  "description": "This event is my second event",
                  "tags": "second,event",
                  "profilePhotoUrl": "https://example.com/profile.jpg",
                  "coverPhotoUrl": "https://example.com/cover.jpg",
                  "minimumTipAmount": 10,
                  "unlockAmount": 1,
                  "category": "General",
                  "subCategory": "Specific",
                  "searchType": "Game",
                  "isEnabled": true,
                  "isEventPrivate": true,
                  "isTournamentOnly": false,
                  "isEventDefault": true,
                  "isPreLiveConnectAds": true,
                  "isPostLiveConnectAds": true,
                  "breakPreLiveConnectUrl": "https://example.com/break-pre-live.mp4",
                  "breakLivePauseConnectUrl": "https://example.com/break-paused-live.mp4",
                  "breakPostLiveConnectUrl": "https://example.com/break-post-live.mp4"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/event/update": {
      "put": {
        "tags": [
          "ConnectEvent"
        ],
        "summary": "Connect - Event - Update",
        "description": "This API endpoint, titled \"Connect - Event - Update\", is used to update the details of a specific event in your application. It is a PUT request, which typically is used to update existing resources.\n\nThis endpoint requires Bearer token authentication. The \"BearerToken\" is expected to be provided in the request header as the \"token\". \n\nThe request is sent to the following URL: \"http://localhost:3000/api/connect/event/update\". Alongside the standard headers, there is an additional header with the key \"Client-UUID\" which can be changed to the specific Client UUID.\n\nIn the body of the request, property values are provided in raw JSON format. Let's break down each of these:\n\n- \"eventId\": This is the unique identifier of the event that is to be updated.\n- \"sessionId\": This is the session ID associated with the user or event.\n- \"accountId\": This is the user account ID associated with the event.\n- \"name\": This refers to the name of the event.\n- \"description\": This is the description of the event.\n- \"tags\": This field can be used to apply searchable tags to the event.\n- \"profilePhotoUrl\" & \"coverPhotoUrl\": These are URLs of the event's profile and cover pictures.\n- \"minimumTipAmount\": This is the minimum tip amount for this event.\n- \"unlockAmount\": This is the amount required to unlock the event.\n- \"category\" & \"subCategory\": This categorizes the event within the system.\n- \"searchType\": This specifies the search type for the event.\n- \"isEnabled\" & \"isEventPrivate\" & \"isTournamentOnly\" & \"isEventDefault\" & \"isPreLiveConnectAds\" & \"isPostLiveConnectAds\": These boolean flags enable or disable certain features of the event.\n- \"breakPreLiveConnectUrl\", \"breakLivePauseConnectUrl\" & \"breakPostLiveConnectUrl\": These are the URLs where the break clips for pre-live, live paused, and post-live moments of the event are located.\n\nAll of these details are provided in raw JSON format, as specified in the \"options\" property.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "eventId": "eventId",
                  "sessionId": "sessionId",
                  "accountId": "accountId",
                  "name": "MyNikeEvent",
                  "description": "This event is my second event",
                  "tags": "second,event",
                  "profilePhotoUrl": "https://example.com/profile.jpg",
                  "coverPhotoUrl": "https://example.com/cover.jpg",
                  "minimumTipAmount": 10,
                  "unlockAmount": 100,
                  "category": "General",
                  "subCategory": "Specific",
                  "searchType": "Game",
                  "isEnabled": true,
                  "isEventPrivate": true,
                  "isTournamentOnly": false,
                  "isEventDefault": true,
                  "isPreLiveConnectAds": true,
                  "isPostLiveConnectAds": true,
                  "breakPreLiveConnectUrl": "https://example.com/break-pre-live.mp4",
                  "breakLivePauseConnectUrl": "https://example.com/break-paused-live.mp4",
                  "breakPostLiveConnectUrl": "https://example.com/break-post-live.mp4"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Client-UUID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "ClientUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/event/get": {
      "get": {
        "tags": [
          "ConnectEvent"
        ],
        "summary": "Connect - Event - Get",
        "description": "The given data is essentially the structure and details of an API endpoint named 'Connect - Event - Get'. It is broken down as follows:\n\n- **name**: A string value, which represents the name of the endpoint. In this case, the name of the endpoint is \"Connect - Event - Get\". \n\n- **request**: An object containing the details of the request that will be sent to the API endpoint. \n\n  - **auth**: The authentication method used for the API request. Here, it is set to \"bearer\", which is a popular method used for API authentication.\n    \n      - **bearer**: An array where each element is an object representing the authentication token. \n          - **key**: Describes what sort of value the system should expect, here it is \"token\".\n          - **value**: The actual value for the key parameter is \"BearerToken\". The type of the value is a string, as indicated by the \"type\" field.\n\n  - **method**: A string that represents the HTTP method to use for the request. The method of this request is \"GET\", meaning this request is used to retrieve data from the server.\n\n  - **url**: Specifies the server URL that will receive the API request. Here, it's retrieving from an API 'event' with a query parameter of 'eventId' on a local server (http://localhost:3000/api/connect/event/get/).\n\n  - **headers**: An array that can contain multiple objects that represent the API request headers. Here, though, there is a single, blank, object within the array. The 'key', 'value' are empty, the 'type' is 'default', and this header is 'disabled'.\n\n  - **body**: Contains the details of the body contents of the HTTP request. In this case, the 'mode' is set to 'raw', meaning the contents of the 'body' would normally be presented in plain text format. However, the 'raw' field is empty, indicating that no body data is being sent with this request.\n  \nAll these fields contribute to the configuration of this API and have an integral part in the successful sending and receiving of data.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "eventId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/event/all": {
      "get": {
        "tags": [
          "ConnectEvent"
        ],
        "summary": "Connect - Event - Get All",
        "description": "This endpoint refers to \"Connect - Event - Get All\", implying that it aims to retrieve all events related to a particular account. Here's detailed information on each data:\n\n- `name`: This field represents the name of the endpoint. In this case, the endpoint name is \"Connect - Event - Get All\".\n\n- `request`: This is where we specify details about the HTTP request that is to be sent.\n\n    - `auth`: This indicates the type of authentication required to access the endpoint. The shown type here is \"bearer\", denoting bearer token authentication. A bearer token is a security token that gives the holder access to the API.\n        - `bearer`: An array of bearer tokens. A bearer token is represented as an object having a \"key\", \"value\", and \"type\". The \"key\" is `token`, the bearer token's value is going to replace \"BearerToken\", and the \"type\" which is `string`.\n\n    - `method`: This stipulates the type of HTTP method used for this request. In this case, it is a \"GET\" method which is used to fetch data from the server.\n\n    - `url`: This refers to the endpoint that the request will be sent to. The specified url is `http://localhost:3000/api/connect/event/all/?accountId=accountId`. The `accountId` will be replaced by a specific account ID to fetch all related events.\n\n   - `headers`: An array containing the information that the client (or browser) needs to send to the server in the header of the HTTP request. In the provided data, there are no explicit headers set, as both \"key\" and \"value\" are empty strings and \"disabled\" is set to true.\n\n   - `body`: This houses the content that you want to send to the API. Given that we're dealing here with a \"GET\" method, the body is typically not needed, and as shown here, the \"mode\" is set to \"raw\" but the \"raw\" value is provided as an empty string. There isn't any particular content sent within the body of the request.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "accountId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/event/delete": {
      "post": {
        "tags": [
          "ConnectEvent"
        ],
        "summary": "Connect - Event - Delete",
        "description": "\"name\": This field, with the value \"Connect - Event - Delete\", represents the name of the endpoint. It signifies the operation carried out by this API, which is deleting an event in the \"Connect\" module. \n\n\"request\": This field is an object containing all the necessary data to make the API request.\n\nWithin \"request\":\n\n  \"auth\": This is an object specifying the authorization method required for the API request. \n    \"type\": This is the type of authentication used, \"bearer\" in this case. Bearer authentication scheme is where the sender and receiver of an HTTP request agree on a secret key. \n    \"bearer\": This is an array containing the details of the bearer authentication, in this case, the token. \n\n  \"key\": This represents the name of the authentication parameter, in this case, \"token\". \n  \"value\": This contains the value of the authentication parameter. For our discussion, the value is \"sessionId\". \n  \"type\": This specifies the data type of the value of the authentication parameter, which is \"string\" in our case. \n\n\"method\": This field represents the HTTP method used for the request. For our case, the method is \"POST\". \n\n\"url\": This is the URL where the API request will be sent. For our case, the URL is \"http://localhost:3000/api/connect/event/delete\".\n\n\"headers\": This is an array that holds an object of key-value pairs of all header requests. In our case there is a single header object which is empty and disabled.\n\n\"body\": This object holds the details of the body of the request. In this case, the body is sent in 'raw' mode and contains a JSON string.\n\n\"mode\": This tells how the body data will be sent with the request. Possible values are \"raw\", \"urlencoded\" etc and in this case, it's \"raw\". \n\n\"raw\": This field holds the actual raw string data that is going to be sent in the body of the request. In our case, it consists of \"sessionId\", \"accountId\", and \"eventId\" fields that are crucial in deleting an event for a particular account.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\",\\\"eventId\\\":\\\"eventId\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/message/create": {
      "post": {
        "tags": [
          "ConnectMessage"
        ],
        "summary": "Connect - Message - Create",
        "description": "Here's a detailed description of each data in this endpoint:\n\n- \"name\": This field represents the name of the endpoint, in this case, it is \"Connect - Message - Create\".\n\n- \"request\": This field contains all the details regarding the http request. It includes authentication details, the request method, the URL for the request, headers, and the body of the request.\n\n- \"auth\": This field contains the details about the authentication. Here, the authentication type is 'bearer'.\n\n- \"type\" under \"auth\": This signifies the type of authentication. In this case it is a bearer authentication.\n\n- \"bearer\": This field contains a list of bearer tokens used for authentication. It consists of a key-value pair, where the key is 'token' and the value will be the bearer token string.\n\n- \"method\": This field signifies the HTTP request method. In this case, it is 'POST'.\n\n- \"url\": This field is the endpoint to which the request will be sent.\n\n- \"headers\": This field contains a list of all headers sent with the request. Each header is represented by a key-value pair. Here, no header information is provided.\n\n- \"body\": This field contains the data sent along with the request. The payload is in raw format.\n\n- \"mode\" under \"body\": It signifies in which format the payload/body is provided. It is in 'raw' format in this case.\n\n- \"raw\" under \"body\": This is the actual payload or body of the request which needs to be sent to the server. It consists of multiple key-value pairs, which include sessionId, accountId, provider, messageText, findUsername, and isEnabled. \n\n    - \"sessionId\": This corresponds to a unique identifier for the session.\n  \n    - \"accountId\": This corresponds to a unique identifier for a specific account.\n  \n    - \"provider\": This indicates the provider of the service. In this case, the provider is 'whatsapp'.\n  \n    - \"messageText\": This field contains the actual text of the message to be sent.\n  \n    - \"findUsername\": This field holds the username. In this case, it is 'Usama AUH'.\n  \n    - \"isEnabled\": This is a boolean value indicating whether the service is enabled or not.\n\n- \"options\" under \"body\": These are additional configurations for the payload. Here, the language option is set to 'json' specifying that the raw data provided in the body should be interpreted as a JSON object.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "sessionId": "sessionId",
                  "accountId": "accountId",
                  "provider": "whatsapp",
                  "messageText": "This message is my second test message",
                  "findUsername": "Usama AUH",
                  "isEnabled": true
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "undefined": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "example-0": {
                    "summary": "slack",
                    "value": null
                  },
                  "example-1": {
                    "summary": "facebook page",
                    "value": null
                  },
                  "example-2": {
                    "summary": "facebook profile",
                    "value": null
                  },
                  "example-3": {
                    "summary": "google chat",
                    "value": null
                  },
                  "example-4": {
                    "summary": "linkedIn",
                    "value": null
                  },
                  "example-5": {
                    "summary": "snapchat",
                    "value": null
                  },
                  "example-6": {
                    "summary": "telegram",
                    "value": null
                  },
                  "example-7": {
                    "summary": "x",
                    "value": null
                  },
                  "example-8": {
                    "summary": "tiktok",
                    "value": null
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/connect/message/search": {
      "post": {
        "tags": [
          "ConnectMessage"
        ],
        "summary": "Connect - Message - Search",
        "description": "The endpoint named \"Connect - Message - Search\" is designed to search for messages using various filtering criteria. It is a POST method API that sends requests to the URL \"http://localhost:3000/api/connect/message/search\". \n\nIn the request, the user will need to be authenticated with the backend server via the 'bearer' auth type. A token must be provided with the key as \"token\" and its respective value as \"BearerToken\". This token is a string type of data which is usually generated by the server upon successful login and sent to the client.\n\nIn the headers section, no specific values are required and the default is shown as being disabled.\n\nWithin the \"body\" section, a \"raw\" mode with JSON language set is used This raw body content should be a JSON string containing several items. \n\n- The \"sessionId\" key requires the corresponding ID of the session.\n- The \"accountId\" key requires the given account's ID. \n- The \"provider\" key requires the name of the social media provider like 'facebook' for this example. \n- The \"findUsername\" key is used to specify the username that you're trying to find messages for, like 'ahsan' as shown in the example. \n- The \"isEnabled\" key is a boolean field which, when set to true, indicates that this search operation is currently enabled.\n\nRemember that each key-value pair in the raw body content needs to be wrapped in double quotes (\"\") to adhere to the JSON format. It will help avoiding errors while parsing the data on the server side.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "sessionId": "sessionId",
                  "accountId": "accountId",
                  "provider": "facebook",
                  "findUsername": "ahsan",
                  "isEnabled": true
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "undefined": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "example-0": {
                    "summary": "slack",
                    "value": null
                  },
                  "example-1": {
                    "summary": "facebook page",
                    "value": null
                  },
                  "example-2": {
                    "summary": "facebook profile",
                    "value": null
                  },
                  "example-3": {
                    "summary": "google chat",
                    "value": null
                  },
                  "example-4": {
                    "summary": "linkedIn",
                    "value": null
                  },
                  "example-5": {
                    "summary": "snapchat",
                    "value": null
                  },
                  "example-6": {
                    "summary": "telegram",
                    "value": null
                  },
                  "example-7": {
                    "summary": "x",
                    "value": null
                  },
                  "example-8": {
                    "summary": "Youtube",
                    "value": null
                  },
                  "example-9": {
                    "summary": "tiktok",
                    "value": null
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/connect/message/update": {
      "put": {
        "tags": [
          "ConnectMessage"
        ],
        "summary": "Connect - Message - Update",
        "description": "This endpoint is named \"Connect - Message - Update\" and it uses the HTTP PUT method. Its purpose is to update a message in the \"Connect\" system. This operation needs Authorization, which is a Bearer token, passed in the Authorization header of the request.\n\nThe request URL is \"http://localhost:3000/api/connect/message/update\". It communicates with the api on the localhost server at port 3000.\n\nThere's a unique identifier for the client making the request, labeled as \"Client-UUID\". This refers to a unique identifier for the client application and it's passed as a default type header in the request.\n\nThe body of the request needs to be a raw JSON object with the specific properties as follows:\n\n1. messageId : Unique identifier of the message that needs to be updated.\n2. sessionId: Unique identifier for the current session.\n3. accountId: ID associated with the account.\n4. name: Name of the message, as a string.\n5. description: Description related to the message.\n6. tags: A string of tags related to the message.\n7. profilePhotoUrl: A URL leading to the profile picture associated with this message.\n8. coverPhotoUrl: A URL to a cover photo related to this message.\n9. minimumTipAmount: This is the minimum amount of tip that can be given.\n10. unlockAmount: The necessary amount to unlock.\n11. category: The general category the message falls under.\n12. subCategory: A more specific category within the general category for the message.\n13. searchType: This is the type of search.\n14. isEnabled: Flag indicating if the message is enabled or not.\n15. isMessagePrivate: A boolean indicating if the message is private.\n16. isTournamentOnly: This field determines if the message is only for tournament.\n17. isMessageDefault: Flag showing whether this message is set as default.\n18. isPreLiveConnectAds: This flag indicates if there are ads before live connect.\n19. isPostLiveConnectAds: Flag indicating if there are ads after live connect.\n20. breakPreLiveConnectUrl: This is the URL for pre-live break ads.\n21. breakLivePauseConnectUrl: URL for break ads during paused live session.\n22. breakPostLiveConnectUrl: URL for post-live break ads.\n\nThose details in the JSON body of the request provide information about the message being updated in the system. The request body also has language option set to JSON as it accepts JSON formatted data.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "messageId": "messageId",
                  "sessionId": "sessionId",
                  "accountId": "accountId",
                  "name": "MyNikeMessage",
                  "description": "This message is my second message",
                  "tags": "second,message",
                  "profilePhotoUrl": "https://example.com/profile.jpg",
                  "coverPhotoUrl": "https://example.com/cover.jpg",
                  "minimumTipAmount": 10,
                  "unlockAmount": 100,
                  "category": "General",
                  "subCategory": "Specific",
                  "searchType": "Game",
                  "isEnabled": true,
                  "isMessagePrivate": true,
                  "isTournamentOnly": false,
                  "isMessageDefault": true,
                  "isPreLiveConnectAds": true,
                  "isPostLiveConnectAds": true,
                  "breakPreLiveConnectUrl": "https://example.com/break-pre-live.mp4",
                  "breakLivePauseConnectUrl": "https://example.com/break-paused-live.mp4",
                  "breakPostLiveConnectUrl": "https://example.com/break-post-live.mp4"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Client-UUID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "ClientUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/message/get": {
      "get": {
        "tags": [
          "ConnectMessage"
        ],
        "summary": "Connect - Message - Get",
        "description": "\"Connect - Message - Get\" is the name of the API endpoint. This name is used to identify the specific API operation.\n\nThe \"request\" object stands for the details of the HTTP request being made to the endpoint. \n\nUnder the \"request\" object, \"auth\" specifies the authentication method for the API request. The \"type\" is set to \"bearer\", which means that it uses bearer token authentication. The \"bearer\" array contains an object with \"key\" as \"token\" and \"value\" as \"BearerToken\". The \"type\" is set to \"string\". This means a token string called \"BearerToken\" is expected as a part of the API access token for authentication.\n\nThe \"method\" denotes that this HTTP request is a \"GET\" method. \n\nThe \"url\" is the actual endpoint where the request will hit. In this case, it's \"http://localhost:3000/api/connect/message/get/?messageId=messageId\". The \"messageId\" is a dynamic value which you can replace with the actual message Id you want to fetch.\n\nUnder \"headers\", the \"key\" and \"value\" fields are empty in the provided object, and it is currently disabled. This typically serves to provide additional information for HTTP requests.\n\nLastly, \"body\" is used for the data sent by a HTTP request. In this case, the \"mode\" is set to \"raw\", and the \"raw\" field is empty. This implies there is no data body being sent with the request. This is not unusual for a GET request as these usually retrieve data from the specified URL, rather than sending information to it.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "messageId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "messageId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/message/createsettings": {
      "post": {
        "tags": [
          "ConnectMessage"
        ],
        "summary": "Connect - Message - Create Settings",
        "description": "This API endpoint is titled \"Connect - Message - Create Settings\". It is primarily used to create settings for messages in the connection.\n\nAuthentication for this API is implemented via the bearer authentication scheme. You will need a bearer token for authentication. \n\nThe bearer token is a string and is passed in the 'token' field in the authorization section.\n\nThis is a POST method API and is expected to receive a payload in the body part of the request. This endpoint's URL is - http://localhost:3000/api/connect/message/createsettings\n\nThere is a default header provided for this POST call. However, it is disabled and does not need to be filled with any data.\n\nIn the body of the request, there are numerous data fields, summarized below:\n\n- \"sessionId\" should be the Session ID of the user.\n- \"accountId\" holds the Account ID of the user.\n- \"name\" refers to the name of the user.\n- \"displayName\" is the username or the other form of user's name.\n- \"tags\" can contain tags related to this user setting.\n- \"title\" is the user's professional title (like 'Developer').\n- \"website\" is the link to the user's personal or professional website.\n- \"description\" field holds a brief description about the user.\n- \"identifierKey\" refers to the user's unique identifier key.\n- \"apiKey\", \"apiSecret\", and \"apiClientId\" are user's API access credentials.\n- \"authToken\" is the user's authentication token.\n- \"refreshToken\" is the token to refresh the authToken after it's expired.\n- \"providerName\" and \"providerId\" fields are to establish OAuth, api connection or other relevant sources.\n- \"uniqueKey\" is an additional unique identifier key for user.\n- \"authUsername\", \"authPassword\", \"authEmail\" are for user authentication.\n- \"authSecurity\" may be used for any additional security measure, currently, it's null.\n- \"recaptchaCode\" is for user validation process.\n\nPlease note that the 'body mode' has been set to 'raw', meaning it will accept a stringified JSON and also note that request-body content type is expected to be in JSON format.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "sessionId": "sessionId",
                  "accountId": "accountId",
                  "name": "Usama Nasir",
                  "displayName": "usamanasir",
                  "tags": "example, test, api",
                  "title": "Developer",
                  "website": "https://www.johndoe.com",
                  "description": "This is a sample description for John Doe.",
                  "identifierKey": "id123456",
                  "apiKey": "api_key_1234567890",
                  "apiSecret": "api_secret_0987654321",
                  "apiClientId": "client_id_abcdef123456",
                  "authToken": "auth_token_abcdef123456",
                  "refreshToken": "refresh_token_123456abcdef",
                  "providerName": "linkedin",
                  "providerId": "beladed_id_123456",
                  "uniqueKey": "unique_key_abcdef123456",
                  "authUsername": "usamanasir052@gmail.com",
                  "authPassword": "hearti001",
                  "authEmail": "usamanasir052@gmail.com",
                  "authSecurity": null,
                  "recaptchaCode": "recaptcha_code_abcdef123456"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/message/getsettings": {
      "get": {
        "tags": [
          "ConnectMessage"
        ],
        "summary": "Connect - Message - Get Settings",
        "description": "1. \"name\": This field indicates the name of the operation that is being performed. In this case, the name is \"Connect - Message - Get Settings\", implying that the operation intends to get settings from a connect message.\n\n2. \"request\": This field encapsulates all the information pertaining to the actual request to be made to the target URL.\n\n    a. \"auth\": This field represents the authentication mechanism in use. Currently, it is set to \"bearer\" denoting bearer authentication.\n    \n        i. \"type\": The authentication type, which here is \"bearer\". Bearer authentication (also known as token authentication) is an HTTP authentication scheme that involves security tokens called bearer tokens.\n      \n        ii. \"bearer\": Contains the bearer token for authenticating the request.\n        \n            - \"key\": This field specifies the key for the authentication header field. Here, it is set as \"token\".\n            \n            - \"value\": This is the actual token used for bearer authentication. It is named as \"BearerToken\" in this instance.\n            \n            - \"type\": Here, the type indicates the datatype of the value. In this case, it is a string.\n\n    b. \"method\": This field refers to the HTTP method to be used for making the request. In this case, it is \"GET\", which would get data from the server.\n\n    c. \"url\": It specifies the target endpoint where the request is to be sent. In this case, the URL is \"http://localhost:3000/api/connect/message/getsettings?accountId=accountId&sessionId=sessionId&providerName=meetup\". This endpoint is expected to fetch the respective settings pertaining to a given accountId, sessionId, and providerName.\n\n    d. \"headers\": It's an array of headers that can be sent along with a request. In this case, the array has only one object which is empty with no headers defined for this request as the \"disabled\" property is set to true.\n\nTake note that the URL contains parameters that need to be replaced with appropriate values like 'accountId', 'sessionId', and 'providerName' for successful requests. Further, an appropriate 'BearerToken' needs to be provided.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "accountId"
          },
          {
            "name": "sessionId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "sessionId"
          },
          {
            "name": "providerName",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "meetup"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/message/all": {
      "get": {
        "tags": [
          "ConnectMessage"
        ],
        "summary": "Connect - Message - Get All",
        "description": "This endpoint is named \"Connect - Message - Get All\". It is designed to retrieve all messages related to a specific account ID from the 'Connect' application. \n\nHere are details of each data point: \n\n1. `name`: \"Connect - Message - Get All\" - This defines the custom name of the endpoint. Its purpose is for humans to easily identify what the endpoint does.\n\n2. `request`: This object includes concrete details on what the request should contain and how it will be made.\n\n3. `auth`: Inside the `request` object, the `auth` key mentions that the request type is a bearer token authentication. This type of authentication uses security tokens called bearer tokens.\n\n   - `type`: Specifies the type of authentication required. In this case, it is 'bearer'.\n   - `key`: This represents the token name \"token\" which will be used for authentication.\n   - `value`: This should be the valid bearer token provided to be authenticated against the server. The placeholder here is 'BearerToken'.\n   - `type`: Specifies the datatype of the key-value pair, which is a string in this case.\n\n4. `method`: The HTTP method used for this request is \"GET\". It is used to fetch or get the data from a specified resource.\n\n5. `url`: This is the route where the request will be sent. In this case, it's \"http://localhost:3000/api/connect/message/all/?accountId=accountId\" where the accountId in the URL will be replaced by the actual account Id for which we want to retrieve messages.\n\n6. `headers`: In this case, it is an empty header and is disabled by default. If enabled and assigned with valid 'key' and corresponding 'value', it would provide additional information about the client or the request body.\n\n7. `body`: For this 'GET' request, the body is 'raw' and empty, as data is not sent via the body in this case. 'GET' requests usually contain all information in the URL itself.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "accountId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/message/delete": {
      "post": {
        "tags": [
          "ConnectMessage"
        ],
        "summary": "Connect - Message - Delete",
        "description": "This endpoint corresponds to the deletion of a message in a connection. The details for each data are as follows:\n\n1. `\"name\"`: This is the name of the endpoint. In this case, it is named \"Connect - Message - Delete\", meaning it's used to delete a message within a connection.\n\n2. `\"request\"`: This object contains the details of the request to be sent to the server.\n\n3. `\"auth\"`: This object houses the type and details of the authorization required for this endpoint. This uses bearer token authentication. The bearer token is typically generated by the server and must be sent with every request. \n\n   `\"key\"`: This is the key for the bearer token, which is 'token' in this case.\n   \n   `\"value\"`: This contains the placeholder value for the bearer token, 'sessionId'.\n   \n   `\"type\"`: This signifies the type of data for the bearer token, which in this case is a string.\n\n4. `\"method\"`: This is the HTTP method used for the request. Here it's 'POST', which is typically used for sending data to create/update a resource.\n\n5. `\"url\"`: This is the URL where the HTTP request will be sent. Here it is 'http://localhost:3000/api/connect/message/delete'.\n\n6. `\"headers\"`: This array represents any custom HTTP headers to be sent with the request. Currently it's empty and disabled. \n\n7. `\"body\"`: This object contains information that will be sent to the server. In this endpoint, it's sending raw JSON data.\n\n   `\"mode\"`: This refers to the format of the data being sent. In this case, it's 'raw' - the data will be sent exactly as it is.\n\n   `\"raw\"`: The raw field contains the raw data to be sent in the request. It's a JSON string with `sessionId`, `accountId` and `messageId`. Every field in the JSON string signifies -\n   - `sessionId`: The ID of the current session.\n   - `accountId`: The ID of the account from which the message is to be deleted.\n   - `messageId`: The ID of the message to be deleted.\n\nEach of these data points are integral in making an appropriate call to this endpoint.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\",\\\"messageId\\\":\\\"messageId\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/post/create": {
      "post": {
        "tags": [
          "ConnectPost"
        ],
        "summary": "Connect - Post- Create",
        "description": "1. \"name\" - This field represents the name of the endpoint. In this case, the name is \"Connect - Post- Create\", which indicates that it might be an endpoint used for creating a new post in a connection.\n\n2. \"request\" - This field contains all the information related to the request being made to the endpoint.\n\n3. \"auth\" - Represents the authorization needed to make a request to the endpoint. It has a \"type\" field which indicates the type of authorization, in this case, \"bearer\". The \"bearer\" field contains an array of objects each containing a \"key\", \"value\", and \"type.\" Here, the key is \"token\", and it requires a string value which is \"BearerToken\".\n\n4. \"method\" - Specifies the HTTP method used for the request. Here, \"POST\" method is used which is typically used for sending data to a server to create/update a resource.\n\n5. \"url\" - This is the URL of the endpoint where the request will be made. \n\n6. \"headers\" - Contain additional information that the client needs to pass along with the request. In this case, no headers are mentioned, just an empty default header is given which is also disabled.\n\n7. \"body\" - It includes the actual data that has to be sent in the request. Here, the \"mode\" is \"raw\" which specifies that the data is sent in raw text and the language used is JSON. It contains fields like \"sessionId\", \"accountId\", \"provider\", \"postText\", \"title\", and \"isEnabled\" which need to be passed in the request body. \n\nLet's know about data in the body section:\n- \"sessionId\": An identifier for the current user session.\n- \"accountId\": Identifier for the user account.\n- \"provider\": The blog provider's name, in this example it is mentioned as 'blogger'.\n- \"postText\": The text of the blog post.\n- \"title\": The title of the blog post.\n- \"isEnabled\": A flag to specify whether the post is enabled or not. This is a boolean field that accepts either true or false.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "sessionId": "sessionId",
                  "accountId": "accountId",
                  "provider": "blogger",
                  "postText": "This message is my second test message",
                  "title": "test title",
                  "isEnabled": true
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "undefined": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "example-0": {
                    "summary": "instagram",
                    "value": null
                  },
                  "example-1": {
                    "summary": "facebook page",
                    "value": null
                  },
                  "example-2": {
                    "summary": "facebook profile",
                    "value": null
                  },
                  "example-3": {
                    "summary": "Facebook Group",
                    "value": null
                  },
                  "example-4": {
                    "summary": "linkedIn",
                    "value": null
                  },
                  "example-5": {
                    "summary": "medium",
                    "value": null
                  },
                  "example-6": {
                    "summary": "google review",
                    "value": null
                  },
                  "example-7": {
                    "summary": "pinterest",
                    "value": null
                  },
                  "example-8": {
                    "summary": "reddit",
                    "value": null
                  },
                  "example-9": {
                    "summary": "slack",
                    "value": null
                  },
                  "example-10": {
                    "summary": "threads",
                    "value": null
                  },
                  "example-11": {
                    "summary": "tumblr",
                    "value": null
                  },
                  "example-12": {
                    "summary": "whatsapp",
                    "value": null
                  },
                  "example-13": {
                    "summary": "weebly",
                    "value": null
                  },
                  "example-14": {
                    "summary": "wordpress",
                    "value": null
                  },
                  "example-15": {
                    "summary": "x",
                    "value": null
                  },
                  "example-16": {
                    "summary": "patreon",
                    "value": null
                  },
                  "example-17": {
                    "summary": "g2",
                    "value": null
                  },
                  "example-18": {
                    "summary": "trustpilot",
                    "value": null
                  },
                  "example-19": {
                    "summary": "yelp",
                    "value": null
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/connect/post/update": {
      "put": {
        "tags": [
          "ConnectPost"
        ],
        "summary": "Connect - Post - Update",
        "description": "This API endpoint \"Connect - Post - Update\" is used to update an existing post. The update method uses the HTTP PUT verb. The URL of this API endpoint is \"http://localhost:3000/api/connect/post/update\".\n\nThe API uses \"Bearer\" type authentication. Bearer token is passed in the \"BearerToken\" key as a string type value.\n\nIt includes the \"Client-UUID\" in the headers. The client Universally Unique Identifier (UUID) is used to uniquely identify a client. The value for \"Client-UUID\" goes in the \"ClientUUID\" key.\n\nThe request body contains information about the post that needs to be updated. This information includes:\n- postId : The unique identifier of the post.\n- sessionId : Identifier of the session\n- accountId : Identifier of the account\n- name : Name of the post\n- description : Brief description of the post\n- tags : Tags associated with the post for better searchability, separated by commas.\n- profilePhotoUrl : URL of the profile photo\n- coverPhotoUrl : URL of the cover photo\n- minimumTipAmount : Minimum tip amount for the post\n- unlockAmount : Amount needed to unlock the post\n- category : Category to which the post belongs\n- subCategory : Specific sub-category within the main category\n- searchType : Type of search (\"Game\" in this case).\n- isEnabled : Flag indicating whether the post is enabled or not\n- isPostPrivate : Flag indicating whether the post is private or not\n- isTournamentOnly : Flag indicating whether the post is only for tournament or not\n- isPostDefault : Flag indicating whether the post is default or not\n- isPreLiveConnectAds : Flag indicating whether connect ads are established pre-live or not\n- isPostLiveConnectAds : Flag indicating whether connect ads are established post-live or not\n- breakPreLiveConnectUrl: URL for pre-live break video\n- breakLivePauseConnectUrl: URL for paused live break video\n- breakPostLiveConnectUrl : URL for post-live break video\n\nThe request body is sent in raw mode and the raw data is in JSON language. This is specified in the options field of the body.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "postId": "postId",
                  "sessionId": "sessionId",
                  "accountId": "accountId",
                  "name": "MyNikePost",
                  "description": "This post is my second post",
                  "tags": "second,post",
                  "profilePhotoUrl": "https://example.com/profile.jpg",
                  "coverPhotoUrl": "https://example.com/cover.jpg",
                  "minimumTipAmount": 10,
                  "unlockAmount": 100,
                  "category": "General",
                  "subCategory": "Specific",
                  "searchType": "Game",
                  "isEnabled": true,
                  "isPostPrivate": true,
                  "isTournamentOnly": false,
                  "isPostDefault": true,
                  "isPreLiveConnectAds": true,
                  "isPostLiveConnectAds": true,
                  "breakPreLiveConnectUrl": "https://example.com/break-pre-live.mp4",
                  "breakLivePauseConnectUrl": "https://example.com/break-paused-live.mp4",
                  "breakPostLiveConnectUrl": "https://example.com/break-post-live.mp4"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Client-UUID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "ClientUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/post/getsettings": {
      "get": {
        "tags": [
          "ConnectPost"
        ],
        "summary": "Connect - Post- Get Settings",
        "description": "1. \"name\": This is the name of endpoint that is being called. In this case, the endpoint name is \"Connect - Post- Get Settings\".\n\n2. \"request\": This value contains all the information required to make the HTTP request. It includes authentication details, the HTTP method, the URL of the request, and any headers.\n\n3. \"auth\": This is the authentication structure used for this endpoint. It specifies the type of authentication and the authentication details.\n   \n    a. \"type\": This field specifies the type of authorization required for this endpoint. In this case, it uses 'bearer' authorization.\n   \n    b. \"bearer\": This is an array of bearer tokens required for this endpoint.\n       \n       i. \"key\": The key for the bearer token needed for authorization - here, it is named 'token'.\n       \n       ii. \"value\": The value of the bearer token, defined here as 'BearerToken'.\n       \n       iii. \"type\": The type of bearer token used, which is a 'string'.\n\n4. \"method\": It specifies the HTTP method to be used for this request, which is 'GET'.\n\n5. \"url\": This is the URL where the request will be sent. It is 'http://localhost:3000/api/connect/post/getsettings?accountId=accountId&sessionId=sessionId&providerName=pinterest'. In this URL:\n    \n    a. 'accountId': The account ID used for this request.\n    b. 'sessionId': The session ID used for this request.\n    c. 'providerName': The provider name used in this request, which is 'pinterest' in this case.\n\n6. \"headers\": These are extra details sent with the request to provide additional information. In this case, the headers are not defined (empty) and are disabled.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "accountId"
          },
          {
            "name": "sessionId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "sessionId"
          },
          {
            "name": "providerName",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "pinterest"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/post/createsettings": {
      "post": {
        "tags": [
          "ConnectPost"
        ],
        "summary": "Connect - Post - Create Settings",
        "description": "This is the description of each data in the endpoint:\n\n1. \"name\": This is the identifier of the endpoint, in this case it is \"Connect - Post - Create Settings\".\n2. \"request\": This holds the details about the http request sent to the server.\n3. \"auth\": This section contains information about the authorization, where \"bearer\" authorization type is used in this case. The bearer token is passed as a string in the \"token\" field.\n4. \"method\": This is the http method used to send the request to the server. In this case, the \"POST\" method is used.\n5. \"url\": This is the URL of the server where the request will be sent.\n6. \"headers\": These are the additional information sent with the http request. Here, a default empty header is being sent which is currently disabled.\n7. \"body\": This contains the payload that is sent with the http request. Here, body is sent in \"raw\" format.\n8. \"raw\": This contains the JSON payload which includes various parameters like `sessionId`, `accountId`, `name`, `displayName`, `tags`, `title`, `website`, `description`, `identifierKey`, `apiKey`, `apiSecret`, `apiClientId`, `authToken`, `refreshToken`, `providerName`, `providerId`, `uniqueKey`, `authUsername`, `authPassword`, `authEmail`, `authSecurity`, `recaptchaCode`.\n9. \"options\": Contain settings for the body of the http request. The \"language\" option is set to \"json\" for this request, since JSON data is being sent in the body.\n\nPlease ensure that the appropriate values are put in place of placeholders for all the parameters in the body of the request before making the request. Also, the `authSecurity` field currently holds a null value and should be filled with a suitable value if required.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "sessionId": "sessionId",
                  "accountId": "accountId",
                  "name": "Usama Nasir",
                  "displayName": "usamanasir",
                  "tags": "example, test, api",
                  "title": "Developer",
                  "website": "https://www.globalexpressdelivery.org",
                  "description": "This is a sample description for John Doe.",
                  "identifierKey": "id123456",
                  "apiKey": "api_key_1234567890",
                  "apiSecret": "api_secret_0987654321",
                  "apiClientId": "client_id_abcdef123456",
                  "authToken": "auth_token_abcdef123456",
                  "refreshToken": "refresh_token_123456abcdef",
                  "providerName": "wordpress",
                  "providerId": "beladed_id_123456",
                  "uniqueKey": "unique_key_abcdef123456",
                  "authUsername": "beladeddev",
                  "authPassword": "Demopass1?",
                  "authEmail": "beladeddev",
                  "authSecurity": null,
                  "recaptchaCode": "recaptcha_code_abcdef123456"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/post/get": {
      "get": {
        "tags": [
          "ConnectPost"
        ],
        "summary": "Connect - Post - Get",
        "description": "1. \"name\": The \"name\" field refers to the title or alias for the API endpoint which is \"Connect - Post - Get\". It is a string that typically indicates the purpose of this endpoint.\n\n2. \"request\": This section contains data related to the API request itself. \n\n3. \"request.auth\": This part specifies the type of authorization needed to access this endpoint. Authorization can vary depending on the security standards of the API.\n\n   - \"type\": \"bearer\" means the authorization requires a Bearer token which must be sent in the header of the HTTP request.\n   \n   - \"bearer\": This is an array of bearer tokens needed for the authentication.\n   \n   - \"key\": \"token\", signifies the key of the bearer token which is \"token\" in this case.\n   \n   - \"value\": \"BearerToken\", This field contains the actual value of the API token. Replace \"BearerToken\" with the real valid token.\n   \n   - \"type\": \"string\", It indicates that the bearer token value should be of string type.\n   \n4. \"request.method\": The HTTP method used for this API request. In this case, it is \"GET\" which means retrieving data from the server.\n\n5. \"request.url\": This is the URL where the API request will be sent. \"http://localhost:3000/api/connect/post/get/?postId=postId\" is the base URL followed by the specific endpoint and query parameter.\n\n6. \"request.headers\": This section contains information that helps the server route the request, determine what response to provide, and other metadata. In this case, empty key-value pair suggests no additional headers are required.\n\n7. \"request.body\": The body of the HTTP request. Given the method of this request is \"GET\" and not \"POST\", the body might be blank.\n   \n   - \"mode\": \"raw\", specifies the type of data in the body.\n   \n   - \"raw\": \"\", since this is a GET request, there is no additional data provided in the body.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "postId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/post/all": {
      "get": {
        "tags": [
          "ConnectPost"
        ],
        "summary": "Connect - Post - Get All",
        "description": "1. \"name\": This field represents the title or identifier of the endpoint, which in this case is \"Connect - Post - Get All\". This is a descriptive title which gives an idea about the functionality of this endpoint.\n\n2. \"request\": This field contains all the essential data needed to make the API request.\n\n3. \"auth\": This field defines the authorization method utilized for the API request. Here, the \"bearer\" token authentication type is used.\n\n  i. \"type\": The authorization type. It is set to \"bearer\" in this context.\n  \n  ii. \"bearer\": This is an array of bearer tokens. It contains \"key-value\" pairs. Here, the key is \"token\" and its value is \"BearerToken\".\n\n  iii. \"key\": This denotes the type of token used to authenticate the request. It's set to \"token\".\n  \n  iv. \"value\": It's the actual token used to authenticate the request, Its provided value here is \"BearerToken\".\n  \n  v. \"type\": It denotes the type of value. In this case, it's a \"string\".\n\n4. \"method\": This field defines the HTTP method used for the request. Here, it's a \"GET\" request, typically used to retrieve data.\n\n5. \"url\": The URL where the request will be sent. It's set to \"http://localhost:3000/api/connect/post/all/?accountId=accountId\", where \"accountId\" is an expected parameter.\n\n6. \"headers\": An array containing all the headers that will be sent along with the request. In this case, the headers field is empty and \"disabled\" is set to \"true\", meaning no additional headers will be sent with this request.\n\n7. \"body\": This field represents the body of the HTTP request.\n\n  i. \"mode\": The formatting type of the request body, which is \"raw\" in this case, indicating that no specific format is applied to the body data.\n  \n  ii. \"raw\": The actual content of the request body. Here, it's empty as there's no body data to be sent for this GET request.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "accountId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/post/delete": {
      "post": {
        "tags": [
          "ConnectPost"
        ],
        "summary": "Connect - Post - Delete",
        "description": "This endpoint is called 'Connect - Post - Delete'. It's a POST method, meaning it is used to send data to the server to create a resource.\n\nThe 'auth' field indicates the type of authentication being used, which is 'bearer' type. The 'bearer' array contains a 'token' key needing a 'sessionId' value. It's of 'string' type, which indicates that the 'sessionId' must be a sequence of characters.\n\nThe 'method' is 'POST', which is typically used to submit data to be processed by the identified resource.\n\nThe 'url' is the web address where the POST request is sent. In this case, it's 'http://localhost:3000/api/connect/post/delete', which is an API related to deleting a post on a server running on your own machine (or localhost) at port 3000.\n\nThe 'headers' field includes a default key-value pair that is currently empty and disabled. Headers are used for additional parameters that need to be sent with the API request. \n\nThe 'body' field contains the Data that will be sent with the POST request, which is in 'raw' mode. 'Raw' mode in Postman allows you to send data as a string in the format that you choose. This requires an object containing sessionId, accountId, and postId as strings in a JSON format. \n\n'sessionId' is an unique identifier for a browser session and can be used to manage a user's interaction with the application. 'accountId' refers to the unique identifier of a user's account while 'postId' is the unique identifier of a specific post on the platform. All of these identifiers are sent in the request body indicating the specific user, session and post involved in the interaction.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\",\\\"postId\\\":\\\"postId\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/profile/create": {
      "post": {
        "tags": [
          "ConnectProfile"
        ],
        "summary": "Connect - Profile - Create",
        "description": "Here's a detailed description of each of the data points in this endpoint:\n\n- `name`: Identifies the name of the endpoint. In this case, it's used for the creation of a profile in Connect.\n- `auth`: Object defining the type of the authorization required for the endpoint. Bearer token authorization is used here.\n  - `type`: Specifies the type of the authorization, which is \"bearer\" in this case.\n  - `bearer`: Array containing information about the token.\n    - `key`: Field for specifying the key of bearer token.\n    - `value`: The value of the bearer token is represented here.\n    - `type`: Represents the format of the bearer token value, which is a string in this case.\n\n- `request`: It's an object that contains necessary information to make a request to the API.\n  - `method`: Specifies the HTTP method for the request, which is \"POST\" in this case.\n  - `url`: The endpoint URL where the request will be sent.\n\n- `headers`: Array used to send additional information with the HTTP request. In this case, no key-value pairs are defined; it's an empty default object.\n\n- `body`: Contains the details sent with the request.\n  - `mode`: The mode of the request body, which is \"raw\" in this case.\n  - `raw`: Contains the raw data to be sent with the request, constructed as JSON format.\n  - `options`: Object contains extra configuration for the body.\n    - `raw`:  Choose the programming language used to display the request's raw body. In this case, JSON is used.\n\nThe `raw` key covers the main profile details:\n- `sessionId`: User's session identifier.\n- `accountId`: The user's account identifier.\n- `name`: The name of the profile.\n- `description`: A brief description of the profile.\n- `tags`: Additional tags associated with the profile.\n- `profilePhotoUrl`: URL link for the profile photo.\n- `coverPhotoUrl`: URL link for the cover photo.\n- `minimumTipAmount`: The minimum tip amount for the user.\n- `unlockAmount`: The unlock amount associated with the profile.\n- `category`: The category of the profile.\n- `subCategory`: A more specific subcategory of the profile, if applicable.\n- `searchType`: The method used for searching the profile.\n- `isEnabled`: A boolean indicating if the profile is enabled.\n- `isProfilePrivate`: A boolean indicating if the profile is private.\n- `isTournamentOnly`: A boolean indicating whether the profile is for tournament use only.\n- `isProfileDefault`: A boolean specifying if this is the default account profile.\n- `isPreLiveConnectAds`: Boolean indicating if there are ads before live connection.\n- `isPostLiveConnectAds`: Boolean indicating if there are ads after live connection.\n-  `breakPreLiveConnectUrl`: A link to the video advert playing before the live connection.\n-  `breakLivePauseConnectUrl`: A link to the video advert playing during live pauses.\n-  `breakPostLiveConnectUrl`: A link to the video advert playing after the live connection ends.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "sessionId": "sessionId",
                  "accountId": "accountId",
                  "name": "MyNikeProfile",
                  "description": "This profile is my second profile",
                  "tags": "second,profile",
                  "profilePhotoUrl": "https://example.com/profile.jpg",
                  "coverPhotoUrl": "https://example.com/cover.jpg",
                  "minimumTipAmount": 10,
                  "unlockAmount": 1,
                  "category": "General",
                  "subCategory": "Specific",
                  "searchType": "Game",
                  "isEnabled": true,
                  "isProfilePrivate": true,
                  "isTournamentOnly": false,
                  "isProfileDefault": true,
                  "isPreLiveConnectAds": true,
                  "isPostLiveConnectAds": true,
                  "breakPreLiveConnectUrl": "https://example.com/break-pre-live.mp4",
                  "breakLivePauseConnectUrl": "https://example.com/break-paused-live.mp4",
                  "breakPostLiveConnectUrl": "https://example.com/break-post-live.mp4"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/profile/update": {
      "put": {
        "tags": [
          "ConnectProfile"
        ],
        "summary": "Connect - Profile - Update",
        "description": "\"Connect - Profile - Update\" is the name of the endpoint. It is designed to update user profiles. \n\n1. \"request\" - It encapsulates the details of the request made to this endpoint.\n     \n2. \"auth\" - Specifies the authentication type the API uses, here it’s bearer token authentication.\n   \n3. \"bearer\" - An array containing details about the bearer token used.\n   \n4. \"key\" - Represents the name of a particular bearer token required for authorization, here it’s \"token\".\n\n5. \"value\" - Represents the value of the bearer token which is \"BearerToken\".\n\n6. \"type\" - Specifies the type of the bearer token which is a string.\n\n7. \"method\" - Specifies the HTTP method used, here method is \"PUT\".\n\n8. \"url\" - Specifies the URL of the API endpoint which is \"http://localhost:3000/api/connect/profile/update\".\n\n9. \"headers\" - Contains all headers required by this endpoint with its corresponding value. Here, \"Client-UUID\" (the unique identifier for the client making the request).\n\n10. \"body\" - Contains the details to be passed in the request body. The \"mode\" is set to \"raw\" which accepts a string containing data in JSON format.\n\nWithin the \"raw\" field, we have different pieces of information to be updated:\n\n- \"profileId\": Unique identifier for the profile.\n- \"sessionId\": Unique identifier for the current session.\n- \"accountId\": Unique identifier for account.\n- \"name\": Name of the profile.\n- \"description\": Descriptive information about the profile.\n- \"tags\": Tags associated with the profile.\n- \"profilePhotoUrl\": Link to the profile's photo.\n- \"coverPhotoUrl\": Link to the profile's cover photo.\n- \"minimumTipAmount\": Minimum amount for tips.\n- \"unlockAmount\": Amount to unlock something.\n- \"category\": Category field for profile.\n- \"subCategory\": Specific sub-category for profile.\n- \"searchType\": Type of search related to profile.\n- \"isEnabled\": Whether the profile is enabled.\n- \"isProfilePrivate\": Status of the profile. If it’s set to true, it’s private.\n- \"isTournamentOnly\": Whether the profile is for tournament only.\n- \"isProfileDefault\": Status of profile's default setting.\n- \"isPreLiveConnectAds\": Whether to display Ads before live connection.\n- \"isPostLiveConnectAds\": Whether to display Ads after disconnected.\n- \"breakPreLiveConnectUrl\": Link to the video to be displayed during break before connecting live.\n- \"breakLivePauseConnectUrl\": Link to the paused video during live streaming.\n- \"breakPostLiveConnectUrl\": Link to the video to be displayed during break after live connection finished.\n   \n11. \"options\" - Specifies other options. Here, we are specifying the language of the raw data, which is JSON.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "profileId": "profileId",
                  "sessionId": "sessionId",
                  "accountId": "accountId",
                  "name": "MyNikeProfile",
                  "description": "This profile is my second profile",
                  "tags": "second,profile",
                  "profilePhotoUrl": "https://example.com/profile.jpg",
                  "coverPhotoUrl": "https://example.com/cover.jpg",
                  "minimumTipAmount": 10,
                  "unlockAmount": 100,
                  "category": "General",
                  "subCategory": "Specific",
                  "searchType": "Game",
                  "isEnabled": true,
                  "isProfilePrivate": true,
                  "isTournamentOnly": false,
                  "isProfileDefault": true,
                  "isPreLiveConnectAds": true,
                  "isPostLiveConnectAds": true,
                  "breakPreLiveConnectUrl": "https://example.com/break-pre-live.mp4",
                  "breakLivePauseConnectUrl": "https://example.com/break-paused-live.mp4",
                  "breakPostLiveConnectUrl": "https://example.com/break-post-live.mp4"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Client-UUID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "ClientUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/profile/get": {
      "get": {
        "tags": [
          "ConnectProfile"
        ],
        "summary": "Connect - Profile - Get",
        "description": "This endpoint is identified as \"Connect - Profile - Get\". It is a GET method which is principally utilized for retrieving data.\n\nThe Request:\n1. \"auth\" - This specifies the type of authentication required for this API. It uses a bearer token, which is a common method for authorizing API calls.\n\n     \"type\": \"bearer\" - This specifies that the type of authentication to be implemented is a bearer token. \n     \n     \"bearer\": [{\"key\": \"token\",\"value\": \"BearerToken\",\"type\": \"string\"}] - This contains the token information where the \"key\" is 'token', and the value of this 'token' is 'BearerToken'. The type is a string, which implies that the value must be provided in a text format.\n\n2. \"method\": \"GET\" - It's the HTTP Method, and in this case, it's a GET method which is used to retrieve resources.\n\n3. \"url\": \"http://localhost:3000/api/connect/profile/get/?profileId=profileId\" - It is the API's URL. In this endpoint, it fetches data from the 'profile' resource of the 'connect' API which resides locally on port 3000. The 'profileId' is passed as a query parameter which is used to retrieve specific profile data.\n\n4. \"headers\": [{\"key\": \"\", \"value\": \"\", \"type\": \"default\", \"disabled\": true}] - This part comprises the request headers. This is currently disabled and empty by default, hence it doesn't contain any additional instructions or information for the request.\n\n5. \"body\": {\"mode\": \"raw\", \"raw\": \"\"} - This refers to the body of the API request. As it's a GET request, typically there will be no request body. The 'mode' is set to 'raw' but no data (raw: \"\") is sent across in the body.\n   \nThis sums up each part of the data in this endpoint, providing a comprehensive understanding for users who intend to use this API.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "profileId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "profileId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/profile/all": {
      "get": {
        "tags": [
          "ConnectProfile"
        ],
        "summary": "Connect - Profile - Get All",
        "description": "1. \"name\": This field indicates the name of the API endpoint, which in this case is \"Connect - Profile - Get All\". This will help users understand the purpose of this API endpoint.\n\n2. \"request\": This field contains information about the HTTP request that is sent to the endpoint.\n\n3. \"auth\": This nested field under request specifies the authentication method and the necessary details for accessing the endpoint.\n\n    a. \"type\": The type of authentication used. Here, it's a \"bearer\" token.\n    \n    b. \"bearer\": A list of tokens used for bearer authentication.\n    \n    c. \"key\": The key for the token is set to \"token\".\n    \n    d. \"value\": The value field of the bearer token is set to \"BearerToken\".\n    \n    e. \"type\": This indicates the data type of the bearer token, which is \"string\".\n\n4. \"method\": This field defines the HTTP method used to send requests to the server. In this case, it is a \"GET\" request, which retrieves information from the server.\n\n5. \"url\": The URL field provides the exact address where the API request is being sent. Here, it includes a placeholder 'accountId' which should be replaced with the actual account Id.\n\n6. \"headers\": This is an array of headers that are being sent along with the API request. There is a default header which is currently disabled in the provided data.\n\n7. \"body\": This field represents the data being sent with the request. \n\n    a. \"mode\": It describes the format of the data being sent in \"body\". In this case, the data format is \"raw\" meaning that no specific formatting is being utilized.\n    \n    b. \"raw\": This field contains the raw body content sent with the request. Currently, it is empty implying no specific content is being sent with the body of the request.\n   \nRemember to replace placeholders like \"BearerToken\" and \"accountId\" with actual values before making the request.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "accountId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/profile/delete": {
      "post": {
        "tags": [
          "ConnectProfile"
        ],
        "summary": "Connect - Profile - Delete",
        "description": "This endpoint is called \"Connect - Profile - Delete\". It's responsible for deleting a profile in the application. This endpoint expects a POST request and uses Bearer token authentication. Detailed description of each part is as follows:\n\n1. \"name\": The name of the endpoint. This is used for identifying and sorting the endpoint in the collection.\n\n2. \"request\": Contains all the necessary details for making the request.\n\n3. \"auth\": Specifies the authentication type to be used in the request.\n   \n   a. \"type\": The type of authentication. Here, it's \"bearer\".\n   \n   b. \"bearer\": It's an array containing the bearer token details.\n      \n      i. \"key\": The name of the key. Here it is \"token\".\n      \n      ii. \"value\": The value for the key. Here it is \"sessionId\".\n      \n      iii. \"type\": Specifies the type of data. It's a \"string\" in this case.\n\n4. \"method\": The HTTP method to be used when making the request. For this endpoint, \"POST\" method is used.\n\n5. \"url\": The URL where the request will be sent. Here, it's \"http://localhost:3000/api/connect/profile/delete\".\n\n6. \"headers\": An array holding the headers for the request. In this case, it's default and is disabled. Meaning, no additional headers are sent with the request.\n\n7. \"body\": Describes the body of the request.\n   \n   a. \"mode\": Shows the mode of the body in the request. Here it's \"raw\", which means that the body contains raw data.\n   \n   b. \"raw\": The actual data in the body as a raw string. This string should be a JSON object and it contains \"sessionId\", \"accountId\", and \"profileId\".\n\nIn summary, to use this endpoint, you should have a valid session Id, account Id, and profile Id (all of type string). The endpoint then takes these details, included as raw data in the body of the request, and uses it to delete a profile within the application.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\",\\\"profileId\\\":\\\"profileId\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/video/create": {
      "post": {
        "tags": [
          "ConnectVideo"
        ],
        "summary": "Connect - Video - Create",
        "description": "This endpoint is named \"Connect - Video - Create\". The purpose of this endpoint is to create a new video connection. It functions through a POST method, signifying data being sent to the server to create a new resource.\n\n1. \"auth\": This part of the endpoint specifies the type of authentication to be used. In this case, it's \"bearer\", which means it uses bearer tokens for authentication. There's a key named \"token\" and its value is expected to be a string, typically an encrypted string unique to each user session.\n\n2. \"method\": This refers to the HTTP method used. Here, it's a POST request that is used when you want to send some data to the server, like when you submit a form. \n\n3. \"url\": This is the specific URL at which the request is to be made. Here, it is to 'http://localhost:3000/api/connect/video/create'.\n\n4. \"headers\": These are the request headers which contain aspects regarding the request and its requirements. In this case, the headers have been left blank and are disabled, indicating that no additional metadata is required in the headers for the request.\n\n5. \"body\": This section contains the data that is being sent to the URL. It's in 'raw' mode, which means the text will be sent as it is with no additional formatting. It's written in JSON format. \n\nThe request body contains several items:\n\n   a. \"sessionId\": This is presumably a unique identifier for the given user's session.\n\n   b. \"accountId\": A unique identifier for the user's account.\n\n   c. \"provider\": Here, the provider is stated as 'facebookpage'. It signifies the video provider platform.\n\n   d. \"streamAction\": Represents the action to be taken on the stream, it takes arguments such as 'details', 'start', or 'stop'.\n\n   e. \"streamTitle\": Title for the video stream. In this case, it's 'test'.\n\n   f. \"pageName\": Name of the page where the video will be streamed, here it's 'unpictures'.\n\n   g. \"description\": This data contains a brief about the live stream and here it says, 'this is to test live streaming automation on belading'.\n\n   h. \"isEnabled\": This is a boolean flag used for enabling or disabling the body. Here, its value is true which means the body is enabled.\n\n6. \"options\": This is where you would specify any additional options for the 'body'. Here, the 'raw' body data is specified to be in 'json' language.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "sessionId": "sessionId",
                  "accountId": "accountId",
                  "provider": "facebookpage",
                  "streamAction": "details",
                  "streamTitle": "test",
                  "pageName": "unpictures",
                  "description": "this is to test live streaming automation on beladed",
                  "isEnabled": true
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "undefined": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "example-0": {
                    "summary": "Afreecatv",
                    "value": null
                  },
                  "example-1": {
                    "summary": "BreakersTv",
                    "value": null
                  },
                  "example-2": {
                    "summary": "Facebook",
                    "value": null
                  },
                  "example-3": {
                    "summary": "Instagram",
                    "value": null
                  },
                  "example-4": {
                    "summary": "Kick",
                    "value": null
                  },
                  "example-5": {
                    "summary": "Linkedin",
                    "value": null
                  },
                  "example-6": {
                    "summary": "Mixcloud",
                    "value": null
                  },
                  "example-7": {
                    "summary": "picarto",
                    "value": null
                  },
                  "example-8": {
                    "summary": "restream",
                    "value": null
                  },
                  "example-9": {
                    "summary": "Rumble",
                    "value": null
                  },
                  "example-10": {
                    "summary": "steam",
                    "value": null
                  },
                  "example-11": {
                    "summary": "telegram",
                    "value": null
                  },
                  "example-12": {
                    "summary": "trovo",
                    "value": null
                  },
                  "example-13": {
                    "summary": "vaughn",
                    "value": null
                  },
                  "example-14": {
                    "summary": "vimeo",
                    "value": null
                  },
                  "example-15": {
                    "summary": "x",
                    "value": null
                  },
                  "example-16": {
                    "summary": "Youtube",
                    "value": null
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/connect/video/createsettings": {
      "post": {
        "tags": [
          "ConnectVideo"
        ],
        "summary": "Connect - Video - Create Settings",
        "description": "This endpoint is named \"Connect - Video - Create Settings\". It uses the POST method to save new video settings. The request URL for the endpoint is \"http://localhost:3000/api/connect/video/createsettings\".\n\nA bearer token is required for authentication.\n\nThe body of the request needs to be a RAW JSON object with the following fields:\n\n1. \"sessionId\": This is required and should be the session ID string for the user.\n2. \"accountId\": This is required and should be the account ID string for the user.\n3. \"name\": A string to represent the name of the video stream.\n4. \"displayName\": The name that will be displayed for the stream.\n5. \"tags\": A comma-separated string of keywords related to the stream.\n6. \"title\": The title of the streaming event.\n7. \"website\": The URL where the stream will be hosted.\n8. \"description\": A brief description of the streaming event.\n9. \"identifierKey\": A unique identifier key.\n10. \"apiKey\": The API key for the streaming server.\n11. \"apiSecret\": The secret key paired with the API key.\n12. \"apiClientId\": Client ID for the API.\n13. \"authToken\": An authorization token for streaming server authentication.\n14. \"refreshToken\": Token used to refresh the authorisation token.\n15. \"providerName\": Name of the video streaming service provider.\n16. \"providerId\": Unique identifier for the video streaming service provider.\n17. \"uniqueKey\": A unique key specific to the video stream.\n18. \"authUsername\": Username needed for the authentication process.\n19. \"authPassword\": Password needed for the authentication process.\n20. \"authEmail\": Email used for authentication process.\n21. \"authSecurity\": Security code for authentication.\n22. \"recaptchaCode\": The re-captcha validation code.\n23. \"rtmpUrl\": The URL of the RTMP server where the stream is broadcasted.\n24. \"streamKey\": A unique key for the video stream.\n25. \"region\": The geographic region of the RTMP server.\n26. \"channelUrl\": The URL for the video streaming channel.\n27. \"server\": The specific server used to handle the stream.\n28. \"createdAt\": Timestamp representing when the video stream settings were created.\n29. \"updatedAt\": Timestamp representing when the video stream settings were last updated.\n30. \"createdBy\": Identifier for the user who created the video stream settings.\n31. \"updatedBy\": Identifier for the user who last updated the video stream settings.\n\nEnsure that all date and time values are represented in a valid ISO 8601 format (i.e., \"YYYY-MM-DDTHH:mm:ssZ\"). All keys must be enclosed by double quotes as per the JSON standard, and all string values must also be enclosed by double quotes.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "sessionId": "sessionId",
                  "accountId": "accountId",
                  "name": "My Video Stream",
                  "displayName": "My Stream Display Name",
                  "tags": "live,streaming,video",
                  "title": "Live Streaming Event",
                  "website": "https://example.com",
                  "description": "This is a live streaming event for our new product launch.",
                  "identifierKey": "uniqueIdentifier123",
                  "apiKey": "API_KEY_ABC123",
                  "apiSecret": "SECRET_KEY_DEF456",
                  "apiClientId": "CLIENT_ID_XYZ789",
                  "authToken": "AUTH_TOKEN_123456",
                  "refreshToken": "REFRESH_TOKEN_789012",
                  "providerName": "rumble",
                  "providerId": "yt_provider_001",
                  "uniqueKey": "uniqueKey_001",
                  "authUsername": "labourkamail69@gmail.com",
                  "authPassword": "Demopass1?",
                  "authEmail": "labourkamail69@gmail.com",
                  "authSecurity": "securityCode123",
                  "recaptchaCode": "recaptcha123",
                  "rtmpUrl": "rtmp://stream.example.com/live",
                  "streamKey": "streamKey_ABC123",
                  "region": "us-west-1",
                  "channelUrl": "https://youtube.com/channel/xyz",
                  "server": "server_001",
                  "createdAt": "2024-08-31T12:34:56Z",
                  "updatedAt": "2024-08-31T12:34:56Z",
                  "createdBy": "user123",
                  "updatedBy": "user123"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/video/update": {
      "put": {
        "tags": [
          "ConnectVideo"
        ],
        "summary": "Connect - Video - Update",
        "description": "This endpoint is named \"Connect - Video - Update\". It's used to update video connect details with the method PUT. \n\n1. \"auth\": Represents the authentication part of the request.\n  - \"type\": The type of authentication used. In this case, it's \"bearer\" which means it uses bearer token authentication.\n  - \"bearer\": An array with the authentication information bearing the key, value, and type. The key is the \"token\", the value should be the actual \"BearerToken\", and the type is \"string\".\n\n2. \"method\": Represents the HTTP method used which is \"PUT\" in this case.\n\n3. \"url\": The URL where the request will be sent. Here, it is \"http://localhost:3000/api/connect/video/update\".\n\n4. \"headers\": An array of objects that represents any custom headers to be sent along with the request. A \"Client-UUID\" header is given which should have the client's UUID as the value.\n\n5. \"body\": Contains the data to be sent along with the request.\n  - \"mode\": The mode of sending body data. \"raw\" indicates data will be sent in a string format.\n  - \"raw\": The actual data. It contains multiple parameters to update connect information like connectId, sessionId, accountId, name, description, tags, profilePhotoUrl, coverPhotoUrl, minimumTipAmount, unlockAmount, category, subCategory, searchType, isEnabled, isConnectPrivate, isTournamentOnly, isConnectDefault, isPreLiveConnectAds, isPostLiveConnectAds, breakPreLiveConnectUrl, breakLivePauseConnectUrl, breakPostLiveConnectUrl. All parameters are represented as keys in JSON format.\n  - \"options\": Specifies that the raw body contains JSON data.\n\nPlease ensure to replace key values in \"bearer\" authentication and \"headers\", as well as all the parameters in \"raw\" body with actual values.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "connectId": "connectId",
                  "sessionId": "sessionId",
                  "accountId": "accountId",
                  "name": "MyNikeConnect",
                  "description": "This connect is my second connect",
                  "tags": "second,connect",
                  "profilePhotoUrl": "https://example.com/profile.jpg",
                  "coverPhotoUrl": "https://example.com/cover.jpg",
                  "minimumTipAmount": 10,
                  "unlockAmount": 100,
                  "category": "General",
                  "subCategory": "Specific",
                  "searchType": "Game",
                  "isEnabled": true,
                  "isConnectPrivate": true,
                  "isTournamentOnly": false,
                  "isConnectDefault": true,
                  "isPreLiveConnectAds": true,
                  "isPostLiveConnectAds": true,
                  "breakPreLiveConnectUrl": "https://example.com/break-pre-live.mp4",
                  "breakLivePauseConnectUrl": "https://example.com/break-paused-live.mp4",
                  "breakPostLiveConnectUrl": "https://example.com/break-post-live.mp4"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Client-UUID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "ClientUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/video/getsettings": {
      "get": {
        "tags": [
          "ConnectVideo"
        ],
        "summary": "Connect - Video - Get Settings",
        "description": "This endpoint description details the \"Connect - Video - Get Settings\" API request. Here's what you need to know about the data provided:\n\n- `name`: This is the name of the endpoint, which is \"Connect - Video - Get Settings\". It uniquely identifies this endpoint for any function or operation it might serve in a given API.\n\n- `request`: This is a JSON object containing all the details of the HTTP request to be made. Said request is broken down into several components as follows:\n\n- `auth`: The authentication method used for this API endpoint. It employs Bearer Authentication (token-based) method, which is a type of HTTP authentication.\n  - `type`: It is \"bearer\" denoting the Bearer Authentication being used.\n  - `bearer`: An array that holds the authentication token. The `key` is \"token\" and its `value` contains the Bearer Token needed for accessing this endpoint. The `type` indicates that the token is a string.\n\n- `method`: This indicates the type of HTTP method used for the request. Here it is \"GET\", that means data is being retrieved from the server at the provided URL.\n\n- `url`: This is the endpoint's URL and holds the server address and path where the Get request will be sent. It includes query parameters for `accountId`, `sessionId`, and `providerName` whose values need to be supplied when making the API request.\n\n- `headers`: This is an array of header fields to be included in the HTTP request. The descriptions of the properties are as below.\n  - `key`: The name of the header field.\n  - `value`: The value of the header field.\n  - `type`: This indicates the type of the header. Here it is a \"default\" header.\n  - `disabled`: It denotes whether or not the header is disabled. In this case, the value is set as \"true\" which means the header is disabled and it will not be sent with the HTTP request. \n\nBear in mind that the token's value in 'auth', 'accountId', 'sessionId', and 'providerName' in the URL, are placeholders and need to be replaced with real values when making a request to the API.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "accountId"
          },
          {
            "name": "sessionId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "sessionId"
          },
          {
            "name": "providerName",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "youtube"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/video/get": {
      "get": {
        "tags": [
          "ConnectVideo"
        ],
        "summary": "Connect - Video - Get",
        "description": "This endpoint is used to retrieve video related data on a specific connection. The endpoint's description is as follows:\n\n- **name**: Represents the name of the endpoint. In this case, it is \"Connect - Video - Get\". This name shows the purpose of the endpoint, which is to fetch video data for a specific connection.\n\n- **request**: Contains all the requirements for making a request to the server. \n\n    - **auth**: This field is for authenticating the request. In this case, the type of authentication required is a bearer token. The bearer token needs to be placed within this field with the key `token` and the value `BearerToken`. It must be a string.\n\n    - **method**: This represents the HTTP method used for this endpoint. In this case, the 'GET' method is used which retrieves data from the server.\n\n    - **url**: This is the URL to which the request is made. In this case, it is `http://localhost:3000/api/connect/video/get/?connectId=connectId`. The `connectId` should be replaced with the actual connection ID for which the video data needs to be fetched.\n\n    - **headers**: Here you can place any additional information needed for the request, but currently there is a default empty header set which is disabled.\n\n    - **body**: This is where the content of the request is stored. In some endpoints, you would place additional information needed for a successful request. For this 'GET' method, there isn't any body present, hence 'mode' is set to 'raw' and 'raw' is kept empty.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "connectId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "connectId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/video/all": {
      "get": {
        "tags": [
          "ConnectVideo"
        ],
        "summary": "Connect - Video - Get All",
        "description": "1. \"name\": This field denotes the name of the API endpoint. In this case, it is named \"Connect - Video - Get All\". It signifies that this API is used to fetch all video connections.\n\n2. \"request\": It contains all the information related to the HTTP request that will be sent.\n\n3. \"auth\": It contains the authentication data, which is used to authenticate the request.\n\n   a. \"type\": This signifies the type of authentication. Here, it is \"bearer\", which represents bearer token authentication.\n   \n   b. \"bearer\": This field represents an array of bearer tokens that will be used for authentication.\n    \n   c. \"key\": Represents the key name. Here the key used is \"token\".\n   \n   d. \"value\": This field contains the actual token value. Here it is \"BearerToken\".\n   \n   e. \"type\": Specify the data type of the value. In this case, the data type is \"string\".\n\n4. \"method\": This field specifies the HTTP method used for the request. Here, the \"GET\" method means the request is trying to retrieve data from specified URL.\n\n5. \"url\": This field holds the URL to which the HTTP request will be sent. \"http://localhost:3000/api/connect/video/all/?accountId=accountId\" is the API's endpoint.\n\n6. \"headers\": This field is an array that contains the headers that needs to be sent along with the HTTP request. In this particular example, an empty default header is defined, with a \"disabled\" field set to true, hence it's not used in the request.\n\n7. \"body\": This section contains the body of the HTTP request.  Here the \"mode\" is set to \"raw\", which means the request body data is sent as it is. The \"raw\" field is empty, which indicates there is no data sent in the body.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "accountId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/connect/video/delete": {
      "post": {
        "tags": [
          "ConnectVideo"
        ],
        "summary": "Connect - Video - Delete",
        "description": "1. \"name\": This field represents the name of the endpoint. Here, the endpoint is named as \"Connect - Video - Delete\", indicating it is related to deleting a video connection within some service.\n\n2. \"request\": This field includes all the necessary details for making the API request.\n\n3. \"auth\": The auth section contains details about the authorization required for the endpoint. The type indicates it's a Bearer token system. A bearer token is required to authenticate each request to this endpoint. \n\n4. \"bearer token\": The token is a property of the bearer authentication method. Here, the key for the token is \"token\", indicating you pass the token under this key. The value is the sessionId, which means the sessionId is used as token. The type tells us the token is a string.\n\n5. \"method\": The request method used by this API endpoint is \"POST\". The POST method is typically used to send data to a server to create a resource.\n\n6. \"url\": It refers to the specific address on the internet where the request is being sent. This API request is pointing to \"http://localhost:3000/api/connect/video/delete\".\n\n7. \"headers\": Headers let the client and the server pass additional information along with an HTTP request or response. The given header here is disabled and there are no key-value pairs.\n\n8. \"body\": The body field is intended for the additional data you want to send with your request. Here, it's in raw JSON format with \"sessionId\", \"accountId\", and \"connectId\" as keys.\n\n    - \"sessionId\": Represents the id of the user's session.\n    \n    - \"accountId\": Specifies the user's account id.\n    \n    - \"connectId\": Denotes the id of the connect feature/module within the service.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\",\\\"connectId\\\":\\\"connectId\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/events/category/create": {
      "post": {
        "tags": [
          "EventsCategory"
        ],
        "summary": "Events - Category - Create",
        "description": "This endpoint is named \"Events - Category - Create\" and is utilized to create a category within an events context.\n\nThe request is made via the \"POST\" method to the URL \"http://localhost:3000/api/events/category/create\".\n\nA bearer token is required for authentication, denoted by the \"auth\" field. It requires a \"token\" key whose value should be your unique BearerToken. This value will be expected as a string type.\n\nThe headers are set to default and have no defined keys or values. The disabled field set to true means the default headers are not functional unless defined.\n\nThe \"body\" of the request should be in raw mode with a raw JSON data containing the following key-value pairs:\n\n1. \"sessionId\": This is a required string that stands for the unique session ID.\n2. \"accountId\": This represents the unique account ID involved in the creation of the event and is also a required string.\n3. \"name\": This refers to the technical name of the event category you wish to create. It is expected in string format.\n4. \"displayName\": This represents the show name for the event category. This name can be user-friendly and more descriptive. The value should be a string.\n5. \"description\": A brief text providing information about the event category. This should be a concise summary of what the category is about. This field accepts a string type value.\n6. \"tags\": This is to include any labels or keywords related to the event category. These tags make the event more searchable and should be sent as a comma-separated string.\n\nThe option for the body mode is set to 'raw' and language is expected to be in 'json' format which implies that the body values need to be in valid JSON syntax.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "sessionId": "sessionId",
                  "accountId": "accountId",
                  "name": "Miami Art Week 5",
                  "displayName": "Miami Art Week 2024",
                  "description": "An immersive celebration of art and culture during Miami Art Week.",
                  "tags": "Art,Exhibition,Miami,Culture"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/events/category/update": {
      "put": {
        "tags": [
          "EventsCategory"
        ],
        "summary": "Events - Category - Update",
        "description": "This endpoint is named \"Events - Category - Update\" and is a service URL to update the details of a specific event category. \n\n1. The `request` object has several properties within it like `auth`, `method`, `url`, `headers`, & `body`.\n\n   - The `auth` object describes the authentication method used for this endpoint. This API uses Bearer Token authorization. The field named `token` should contain the actual Bearer Token needed as authorization credentials to connect to the API.\n\n   - The request `method` is `PUT`, which is typically used for updating resources.\n\n   - The `url` is the endpoint's URL to which the request should be sent. This URL is used to update the event category.\n\n   - The `headers` object contains additional elements sent along with the request. This API requires a `Client-UUID` for identification purposes.\n\n2. The `body` object inside the `request` object carries all the data needed to update an event category.\n\n   - The `mode` is `raw`, meaning the data is sent exactly as entered.\n\n   - The `raw` field contains the actual data to be sent. This should be a JSON containing: \n       - `categoryId`: The unique identifier for the category.\n       - `sessionId`: The active session's identifier.\n       - `accountId`: The user's account identifier.\n       - `name`: The new name for the event.\n       - `displayName`: The new display name for the event.\n       - `description`: A detailed description of the event.\n       - `tags`: Relevant tags to associate with the event, separated by commas.\n\n   - The `options` object provides metadata about the body content. It indicates that the language used in the `raw` body is `json`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "categoryId": "eventCategoryId",
                  "sessionId": "sessionId",
                  "accountId": "accountId",
                  "name": "Miami Art Week 3",
                  "displayName": "Miami Art Week 2024",
                  "description": "An immersive celebration of art and culture during Miami Art Week.",
                  "tags": "Art,Exhibition,Miami,Culture"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Client-UUID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "ClientUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/events/category/get": {
      "get": {
        "tags": [
          "EventsCategory"
        ],
        "summary": "Events - Category - Get By Account ID",
        "description": "This endpoint corresponds to `Events - Category - Get By Account ID`. It is used to fetch specific event categories linked to a particular account ID.\n\n1. `name`: This data field represents the name of the endpoint. In this case, it is 'Events - Category - Get By Account ID'. This indicates that the data retrieved via this endpoint relates to specific categories of events linked to a provided account ID.\n\n2. `request`: This data field encapsulates all the information pertaining to the API call being made. \n\n3. `auth`: This data object within the request field specifies the kind of authorization required for this API call. For this endpoint, 'bearer' authorization is used.\n\n    - `type`: The type of authorization used. Here, it's a 'bearer' type authorization.\n    \n    - `bearer`: It's an array having bearer token details.\n    \n        - `key`: The key referring to type of the authorization. Here it's 'token'.\n        \n        - `value`: Value field for the key, i.e., the actual Bearer token value goes here.\n\n        - `type`: Specifies the type of value that's expected for this token. In this case, it's a 'string'.\n\n4. `method`: This data field specifies the HTTP method being employed for this API call. For this endpoint, the 'GET' method is used, which is typically used to retrieve data.\n\n5. `url`: This data field represents the Uniform Resource Locator (URL) which is the endpoint being hit by this API call. For this endpoint, it's 'http://localhost:3000/api/events/category/get/?accountId=accountId', where 'accountId' is a variable part of the URL and it should be replaced by the real account ID value while making request.\n\n6. `headers`: This is an array of objects where each object represents a key-value pair of headers being sent in the request. In this case, there's a default header defined but since 'disabled' is set to true, this header will not be sent in the request.\n\n7. `body`: This data object encapsulates any information provided to the particular API endpoint. In this case, it contains a 'raw' mode but no actual raw body has been specified hence it defaults to an empty string.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "accountId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/events/category/all": {
      "get": {
        "tags": [
          "EventsCategory"
        ],
        "summary": "Events - Category - Get All",
        "description": "This endpoint, \"Events - Category - Get All\", is a GET request used to retrieve all categories of events. This is how each component is used:\n\n1. `name`: This is the title or alias of the endpoint. \"Events - Category - Get All\" is a human-friendly name referring to the operation serving to fetch all event categories.\n\n2. `auth`: It refers to the method by which the service authenticates the user. This endpoint uses bearer token authentication (`type: \"bearer\"`). A bearer token is a type of access token that allows the holder of the token to access the API. It is supplied under the `value` key as a string datatype in the `bearer` array. Replace `\"BearerToken\"` with your actual bearer token when making the request.\n\n3. `method`: Refers to HTTP methods. In this case, \"GET\" is the HTTP method used. It is used to request data from a specified resource.\n\n4. `url`: This is the Server URL or API's endpoint. \"http://localhost:3000/api/events/category/all\" is the address we are making the request to. It should be replaced with the actual server's URL when deployed.\n\n5. `headers`: In this collection, the headers field has no key-value pair; therefore, it's disabled and does not have any effect on the request.\n\n6. `body`: Here, the body mode is set to \"raw\" which means that the HTTP request body contains data as a raw string. However, there is no raw data being sent in this request.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/events/category/alll": {
      "get": {
        "tags": [
          "EventsCategory"
        ],
        "summary": "Events - Category - Get All By Account ID",
        "description": "Here is the detailed description of each element in this endpoint:\n\n- `\"name\"`: This is the name of the endpoint. It's labelled as \"Events - Category - Get All By Account ID\". It suggests that this endpoint would fetch all the events in a category, filtered by the provided account ID.\n\n- `\"request\"`: This describes the details of the HTTP request that will be made to the specified URL.\n\n  - `\"auth\"`: This represents the authorization needed for this request.\n  \n    - `\"type\"`: This indicates the type of authorization which is \"Bearer\" in this case.\n      \n    - `\"bearer\"`: This is an array which contains the details of the Bearer token.\n      \n      - `\"key\"`: This indicates the name of the parameter which is \"token\".\n        \n      - `\"value\"`: This contains the value of the parameter. You are supposed to fill \"BearerToken\" here.\n        \n      - `\"type\"`: This indicates the datatype. In this case, it's a string.\n\n  - `\"method\"`: This indicates the HTTP method used for the request. Here, it's \"GET\" which means that data is being fetched from the server.\n\n  - `\"url\"`: This represents the URL to which the request will be sent. In this case, the base URL is 'http://localhost:3000/api/events/category/all/' with a query parameter 'accountId' where you must provide the 'accountId' with which you want to filter the results.\n\n  - `\"headers\"`: This is an array that contains a list of headers to be sent with the request. No headers are set in this case as the type is \"default\" and it's disabled.\n\n  - `\"body\"`: This part contains the body of the request. There is no body for this request because it's a GET request and the 'mode' is set to 'raw'.\n  \nMake sure to replace 'BearerToken' and 'accountId' with actual values while using this endpoint.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "accountId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/events/category/delete": {
      "post": {
        "tags": [
          "EventsCategory"
        ],
        "summary": "Events - Category - Delete",
        "description": "This endpoint is named \"Events - Category - Delete\". As the name denotes, this API is generally used for deleting categories under events. The comprehensive details of the data in this endpoint are as defined as follows:\n\n1. \"name\": This data represents the name of the API endpoint. In this given context, the endpoint name is \"Events - Category - Delete\". \n\n2. \"request\": This is the primary body of the API call which contains all the necessary data to perform the action.\n\n3. \"auth\": It stands for Authorization. This API uses the Bearer token method for authorization. This data contains authorization type and bearer token information.\n\n    - \"type\": This signifies the Type of Authorization being used. Here, it's Bearer Authorization, representing an HTTP authentication scheme that involves security tokens called bearer tokens.\n    - \"bearer\": This is an array of data for the bearer token.\n        - \"key\": The bearer token key, referenced as \"token\".\n        - \"value\": The value of the key, here referred as \"sessionId\".\n        - \"type\": Signifies the data type of the bearer token. Here, it is a string.\n\n4. \"method\": The HTTP method used for the API call. Here, it is POST that usually means data will be sent to the server creating a new resource.\n\n5. \"url\": The URL where the API request will be sent to. The given URL in this case is http://localhost:3000/api/events/category/delete.\n\n6. \"headers\": With a key-value pair structure, this field contains the additional data sent with the request. In this case, it appears empty and is disabled.\n\n7. \"body\": The body of the request. This contains all the information that needs to be sent to the server.\n\n    - \"mode\": The mode of the body denotes how the data is being sent. Here, it is in \"raw\" format that could include text or JSON or XML.\n    - \"raw\": It holds the raw data that need to be sent. Here, the data consists of three different keys i.e., sessionId, accountId, and a categoryId. These hold the values of Session ID, Account ID and Event's Category ID respectively. The server will use this data to delete the specific category.\n  \nEach field plays a crucial role in successfully making a request and getting a response from the server.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\",\\\"categoryId\\\":\\\"eventsCategoryId\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/events/general/create": {
      "post": {
        "tags": [
          "EventsGeneral"
        ],
        "summary": "Events - General - Create Auto",
        "description": "1. `name`: This is the title of the API endpoint. This endpoint is labeled as \"Events - General - Create Auto\".\n\n2. `request`: This section contains all the details necessary to make a network request.\n\n3. `auth`: This part encloses information about the authentication type required by the API endpoint. This particular endpoint requires `Bearer` type authentication. You need to input the `BearerToken` to access this endpoint successfully. The type of the value is a string.\n\n4. `method`: It specifies the HTTP method used for the request. This particular request requires the `POST` method.\n\n5. `url`: This is the actual URL where the request will be sent. For this endpoint, it's \"http://localhost:3000/api/events/general/create\".\n\n6. `headers`: This section comprises the headers to be sent along with the request. Currently, the default headers value is disabled and not defined.\n\n7. `body`: This is where the actual data to be sent with the request is defined. For the current request, the \"raw\" mode is used and is defined with certain fields in a JSON format. Here, the following list of attributes are defined:\n   - `accountId`: Identifies the account. Replace it with your actual account ID.\n   - `sessionId`: Represents the session ID. You should replace this with your actual session ID.\n   - `category`: Specifies the category of the event. Replace it with the desired category.\n   - `subCategory`: Provides details about the event's subcategory.\n   - `title`: This is the title of the event.\n   - `description`: It is a short summary of the event, explaining what it's about.\n   - `tags`: Contains the tags for the event, divided by comma. This labels the event for easy searching and classification.\n   - `date`: Indicates the date of the event in the format YYYY-MM-DD.\n   - `time`: Specifies the time of the event in the format HH:MM:SS.\n   - `details`: Could hold additional, more detailed information. For this instance, it's left empty but could be populated if required.\n\n8. `options`: Specifies additional particulars about the request body. It's set to JSON language for the format of the raw input.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "accountId": "accountId",
                  "sessionId": "sessionId",
                  "category": "My New Category",
                  "subCategory": "My Shiny SubCategory",
                  "title": "Invisible Luggage Exhibition",
                  "description": "An exhibition exploring the unseen burdens of social justice, gender identity, and immigration.",
                  "tags": "Art,Exhibition,SocialJustice,GenderIdentity,Immigration",
                  "date": "2024-12-31",
                  "time": "01:00:00",
                  "details": {}
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/events/general/update": {
      "put": {
        "tags": [
          "EventsGeneral"
        ],
        "summary": "Events - General - Update Auto",
        "description": "This endpoint, named 'Events - General - Update Auto', allows you to update the details of an event. The request requires several pieces of information categorized into four main sections: 'auth', 'method', 'url', and 'body'.\n\n1. Authentication ('auth'): It uses the bearer token authentication method, taking in a string type token under the key 'token'.\n\n2. Method: The HTTP method being used is PUT, indicating this endpoint is used to update existing data.\n\n3. URL: The URL where the request is sent is 'http://localhost:3000/api/events/general/update'.\n\n4. Headers: There is an additional header provided via the 'Client-UUID', which presumably carries a unique identifier for the client sending the request.\n\n5. Request Body: The body of the request contains the information being updated. It's written in raw JSON, with the following fields:\n   \n   -  'eventId': The unique identifier for the event you want to update.\n   \n   -  'accountId': The unique identifier of the account associated with this event.\n   \n   -  'sessionId': The unique identifier of the session associated with this operation.\n   \n   -  'category' and 'subCategory': The new event's overall category and specific subcategory, respectively.\n   \n   -  'title': The title of the event.\n   \n   -  'description': A brief description of what the event is about.\n   \n   -  'tags': List of keywords associated with the the event, separated by commas.\n   \n   -  'date' and 'time': The date and exact time of the event.\n   \n   -  'details': More detailed properties associated with the event represented as objects, including:\n      \n      -  'startDate' and 'endDate': The starting and ending date of the event, respectively.\n      \n      -  'location': Where the event will take place.\n      \n      -  'featuredArtists': A list of featured artists at the event.\n      \n      -  'collections': The collections featured at the event.\n      \n      -  'events': List of auxiliary events taking place, each with its 'type', 'date', 'time', and its unique fields like 'activities', 'topic', or 'chef'.\n\nPlease note that all these details are required in the exact order as mentioned above. Make sure to replace the placeholder values with your data for a successful update.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "eventId": "eventId",
                  "accountId": "accountId",
                  "sessionId": "sessionId",
                  "category": "My New Category",
                  "subCategory": "My Shiny SubCategory",
                  "title": "New Years Celebration",
                  "description": "An exhibition exploring the unseen burdens of social justice, gender identity, and immigration.",
                  "tags": "Art,Exhibition,SocialJustice,GenderIdentity,Immigration",
                  "date": "2024-12-31",
                  "time": "01:00:00",
                  "details": {
                    "startDate": "2024-12-02",
                    "endDate": "2024-12-15",
                    "location": "Historic Hampton House, Miami, FL",
                    "featuredArtists": [
                      "Beth Rudin DeWoody",
                      "Zoe Lukov",
                      "Laura Dvorkin",
                      "Maynard Monrow"
                    ],
                    "collections": [
                      "Rubell Family Collection",
                      "Bernard Lumpkin Collection",
                      "Joy Simmons Collection"
                    ],
                    "events": [
                      {
                        "type": "Opening Night",
                        "date": "2024-12-02",
                        "time": "18:00",
                        "activities": [
                          "Cocktails",
                          "Preview Dinner",
                          "Artist Introductions"
                        ]
                      },
                      {
                        "type": "Panel Discussion",
                        "date": "2024-12-05",
                        "time": "15:00",
                        "topic": "Art and Social Justice"
                      },
                      {
                        "type": "VIP Dinner",
                        "date": "2024-12-10",
                        "time": "19:00",
                        "chef": "Jessica Harris"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Client-UUID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "ClientUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/events/general/get": {
      "get": {
        "tags": [
          "EventsGeneral"
        ],
        "summary": "Events - General - Get By Short ID",
        "description": "The provided data describes an HTTP GET request under the name \"Events - General - Get By Short ID\". This suggests an API endpoint that fetches data related to a general event via its unique Short ID.\n\n1. `\"name\"`: It's the title of your API endpoint. The name specifies what this endpoint is meant for. It's called \"Events - General - Get By Short ID\" which implies this endpoint is for fetching the details of a general event by its short ID.\n\n2. `\"request\"`: This contains the specifications for the HTTP request being made.\n\n3. `\"auth\"`: This describes the authentication type used for the request. The `type` is \"bearer\", it means the request needs a bearer token to get authorized access.\n\n   - `\"bearer\"`: This is a list where each object consists of a `key`, `value` and `type`. The `key` here is \"token\", the `value` is placeholder for the actual bearer token, and the `type` is \"string\" indicating the data type of the token.\n\n4. `\"method\"`: The HTTP method used for the request. It is a \"GET\" method, meaning this request is attempting to retrieve data from the server.\n\n5. `\"url\"`: The URL to which the request is directed. It's \"http://localhost:3000/api/events/general/get\" with a query parameter `shortId=eventShortId` which is a placeholder for a specific event's short identifier.\n\n6. `\"headers\"`: This contains the headers to be attached to the request. A list of objects but the provided object is empty and has default type which is flagged as disabled. This indicates there are no additional headers required for the request.\n\n7. `\"body\"`: Describes the body of the request. The mode is \"raw\", which implies that the body of the request will be sent as raw data. However, the `raw` field is an empty string, suggesting that this GET request does not require a request body.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "shortId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "eventShortId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/events/general/all": {
      "get": {
        "tags": [
          "EventsGeneral"
        ],
        "summary": "Events - General - Get All By Sub Category ID",
        "description": "This endpoint is named \"Events - General - Get All By Sub Category ID\". It is utilized to fetch all events belonging to a specific sub-category.\n\nLet's take a deeper look at its elements:\n\n1. `name`- This is the name of endpoint which communicates its purpose, in this case, to retrieve all general events by their sub category ID.\n\n2. `request`- This section describes the details of the HTTP request. Here's what each data means:\n\n    - `auth`: This speaks about the authorization method used for the request. The type is `bearer`. A bearer token named \"BearerToken\" is used for authorization.\n\n    - `method`: The HTTP method used for this request is `GET`, which is usually used for retrieving data.\n\n    - `url`: This is the URL endpoint to which the request is sent. It consists of subCategoryId as a query parameter to filter events by their sub-category. Replace `eventSubCategoryId` with the actual sub-category ID for which you want to fetch the events.\n\n    - `headers`: This is an array of headers required by the request. There are no specific headers required for this request as it's empty and disabled by default.\n\n    - `body`: This is the body of the request. However, for this GET request, the body mode is set to `raw`, which means you can send unstructured data. But in this case, there's no data to send so the raw field is empty.\n\nIn conclusion, this endpoint uses a GET method to fetch all general events under a specific sub-category identified by its sub-category ID from the specified URL. It uses a Bearer Token for authorization. The response will contain all the general events data related to the sub-category.\n\n\n\n\n\n\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "subCategoryId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "eventSubCategoryId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/events/general/delete": {
      "post": {
        "tags": [
          "EventsGeneral"
        ],
        "summary": "Events - General - Delete",
        "description": "The given data specifies details of an HTTP endpoint:\n\n1. **Name**: The unique identifier of the endpoint. In this case, the name is \"Events - General - Delete,\" indicating this endpoint is used to delete general event data.\n\n2. **Request**: This represents the details of the HTTP request made to this endpoint.\n\n    - **Auth**: This field describes the authorization type that the endpoint uses. In this case, the `type` is set to \"bearer\", meaning that it uses Bearer Authentication. Bearer Authentication is a schema where the sender and the recipient of an HTTP request can authenticate to each other by a bearer token. Here, the key for the token is named \"token\" and its value is \"sessionId\".\n    \n    - **Method**: This describes the HTTP method used for the request. Here, the method is \"POST\", which is typically used to send data to a server to create a new resource.\n\n    - **URL**: This field contains the access link of the API. The present URL is \"http://localhost:3000/api/events/general/delete\", which indicates the server is currently running locally on port 3000.\n\n    - **Headers**: This is typically used to provide additional information about the request. In this case, it is not utilized; the `key` and `value` fields are empty, and its `type` is set as \"default\", but it is `disabled`.\n\n    - **Body**: This contains the data that is sent to the server. The mode here is \"raw,\" meaning that the data is sent in a string format. The raw string contains a JSON string with keys \"sessionId\", \"accountId\", and \"eventId\" whose values would need to be instantiated by the user.\n\nIn summary, this endpoint, \"Events - General - Delete\", is a POST Request that uses Bearer Authentication. It deletes events for the account specified by the \"accountId\", and the event specified by the \"eventId\". The session is specified by \"sessionId\". The API is currently hosted locally on port 3000.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\",\\\"eventId\\\":\\\"eventId\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/events/subcategory/create": {
      "post": {
        "tags": [
          "EventsSubCategory"
        ],
        "summary": "Events - SubCategory - Create Auto",
        "description": "This endpoint is titled \"Events - SubCategory - Create Auto\". It uses POST method which typically implies creation of new data on the backend system.\n\nHere is a description of each data:\n\n1. **\"name\"**: The name of the endpoint, it represents the functionality of creating subcategory automatically in an Events system.\n\n2. **\"request\"**: Contains all the necessary details required to make a request.\n\n3. **\"auth\"**: Holds the authentication type and detail necessary to gain access to the API. It uses 'bearer' type authentication and expects a 'token' - a string which must be valid for successful access.\n\n4. **\"method\"**: The HTTP method used for request, in this case, it's a 'POST' method used for creating data.\n\n5. **\"url\"**: The URL where the request will hit to perform desired operation. Here, the request will hit 'http://localhost:3000/api/events/subcategory/create' to create an event subcategory.\n\n6. **\"headers\"**: Headers can contain additional information for the request. In this case, no headers are being sent, this field is left blank and disabled.\n\n7. **\"body\"**: It contains the information that will be attached to the request when sent. The mode 'raw' is used here which facilitates sending of data in unprocessed form, and the language used is 'json'.\n\n8. Within the body, some important parameters are passed:\n\n   - **\"sessionId\"**: The session ID currently active.\n   - **\"accountId\"**: The account ID of the user/session.\n   - **\"name\"**: The name of the new subcategory that is to be created. \n   - **\"displayName\"**: The display name of the new subcategory that will be visible to users.\n   - **\"description\"**: A brief description of the new subcategory.\n   - **\"tags\"**: Tags associated with the new subcategory, separated by commas.\n   - **\"category\"**: The parent category to which the new subcategory belongs.\n   \nRemember to change these parameters as per the business or application scenario when making the request.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "sessionId": "sessionId",
                  "accountId": "accountId",
                  "name": "Historic Hampton House 13",
                  "displayName": "Miami Art Week 2024",
                  "description": "An immersive celebration of art and culture during Miami Art Week.",
                  "tags": "Art,Exhibition,Miami,Culture",
                  "category": "A Special New Category 2"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/events/subcategory/update": {
      "put": {
        "tags": [
          "EventsSubCategory"
        ],
        "summary": "Events - SubCategory - Update Auto",
        "description": "This endpoint, named \"Events - SubCategory - Update Auto\", is designed to handle HTTP PUT requests to update an existing sub-category of events. This is achieved by sending a PUT request to the endpoint url \"http://localhost:3000/api/events/subcategory/update\".\n\nAuthentication for the request is handled using bearer token authentication, with the key \"token\" and the value is a \"BearerToken\" string. This security layer ensures that only authorized users can interact with the API.\n\nThe request also includes a unique client identifier baked into the headers with 'key' as \"Client-UUID\" and 'value' as the 'ClientUUID' to trace requests back to the clients that made them. This value is of \"default\" type.\n\nThe request payload or body is presented in raw mode using JSON language containing all the necessary information to update the sub-category of an event:\n\n- \"subCategoryId\": A unique identifier for the sub-category that you wish to update.\n- \"sessionId\": A unique identifier associated with the session of the user making this request.\n- \"accountId\": A unique identifier associated with the account of the user making this request.\n- \"name\": The new name you want to assign to the sub-category.\n- \"displayName\": A more user-friendly title for the sub-category that will be shown to users (different from the main 'name').\n- \"description\": A brief explanation or summary of what this sub-category represents.\n- \"tags\": A set of keywords associated with the sub-category to aid searchability or categorization of the sub-category. Tags are provided in string form, separated by commas.\n- \"category\": The main category to which this sub-category belongs. This could be any meaningful string that describes the type of events the sub-category belongs to. \n\nPlease input appropriate values for each key before sending the request.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "subCategoryId": "eventSubCategoryId",
                  "sessionId": "sessionId",
                  "accountId": "accountId",
                  "name": "Miami Art Week 3",
                  "displayName": "Miami Art Week 2024",
                  "description": "An immersive celebration of art and culture during Miami Art Week.",
                  "tags": "Art,Exhibition,Miami,Culture",
                  "category": "A Special Shiny Category"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Client-UUID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "ClientUUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/events/subcategory/get": {
      "get": {
        "tags": [
          "EventsSubCategory"
        ],
        "summary": "Events - SubCategory - Get By Name",
        "description": "This endpoint, which is titled \"Events - SubCategory - Get By Name\", is responsible for retrieving subcategories of events by their particular names. Here's a detailed description of each field and its data.\n\n1. \"name\" : This field denotes the name of the API endpoint which is \"Events - SubCategory - Get By Name\". This is useful for identifying and categorizing the endpoint in the collection.\n\n2. \"request\" : This field contains all the information needed to make a request to this endpoint.\n\n3. \"auth\": This section deals with the authorization needed to access the endpoint. It has three sub-fields:\n  - \"type\": The type of authorization used, which in this case is a \"bearer\" token.\n  - \"bearer\": This is an array of tokens required for bearer authorization:\n    - \"key\": The name of the bearer token which is \"token\" in this case.\n    - \"value\": The value of the bearer token.\n    - \"type\": Specifies the datatype of the bearer token, as \"string\".\n\n4. \"method\": It indicates the HTTP verb that should be used when accessing this endpoint. Here, you should use a \"GET\" request.\n\n5. \"url\": It describes the address where the request should be sent. For this endpoint, the URL is \"http://localhost:3000/api/events/subcategory/get/?name=eventSubCategoryName\". Here, \"eventSubCategoryName\" parameter is passed along with the URL to fetch the specific subcategory data by name.\n\n6. \"headers\" : This is a list of headers that should be sent along with the request. The default header key and value are left empty and set to disabled as it's not necessary for this request.\n\n7. \"body\": This section concerns the body of the request. \n  - \"mode\": Indicates how the body should be sent. In this case, it has the value \"raw\", which means the body should be sent as a raw data string.\n  - \"raw\": This sub-field is used to send raw data. However, as it's a GET request, there's no need to send any data in the body and hence it is left as an empty string.\n\nPlease ensure to replace the \"BearerToken\" and \"eventSubCategoryName\" values with valid information before making the request to the endpoint.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "eventSubCategoryName"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/events/subcategory/all": {
      "get": {
        "tags": [
          "EventsSubCategory"
        ],
        "summary": "Events - SubCategory - Get All",
        "description": "This endpoint 'Events - SubCategory - Get All', retrieves all subcategories of events from your service. \n\n1. Authentication of this endpoint is set to 'Bearer'. This means it requires a bearer token for authorization. So, you need to provide a 'token' in the bearer field that is of the string type to validate your request for authorization.\n\n2. As the method for this endpoint is 'GET', it implies that this endpoint is used for retrieving data from the server.\n\n3. The URL 'http://localhost:3000/api/events/subcategory/all', indicates the location where the server responds to a specific service, in this case it means it will respond to the request of retrieving all event subcategories.\n\n4. There's an array defined for headers. However, it is kept empty and is disabled by default, indicating that no additional headers are required for this request.\n\n5. In this endpoint, the body field has both mode and raw defined. The mode is set to 'raw', which is generally used when you want to send unstructured data. However, the 'raw' field here has no value indicating no requirement for sending data in the body of the request for this endpoint.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/events/subcategory/alll": {
      "get": {
        "tags": [
          "EventsSubCategory"
        ],
        "summary": "Events - SubCategory - Get All By Category ID",
        "description": "Name: This is the label of the endpoint, which in this case is \"Events - SubCategory - Get All By Category ID\". This label is used to identify the endpoint in the API collection.\n\nAuth: This pertains to the authentication method required for the endpoint. In this case, a bearer token is needed for authentication. The 'key' specifies the type of token, which is a 'BearerToken'. The 'type' tells you that the token should be a string.\n\nMethod: This field shows the HTTP method used by the endpoint. Here it is 'GET'. This method is usually used to retrieve data from the server.\n\nURL: This field specifies the URL where the request is sent. In this case, it is \"http://localhost:3000/api/events/subcategory/all/?categoryId=eventCategoryId\". This URL gets all sub categories by Category ID.\n\nHeaders: Headers can be used to provide additional information about the request. In this case a default header is included but it is disabled and both the 'key' and 'value' fields are empty. \n\nBody: This field contains the data that is sent to the server in a 'raw' format. However, for this endpoint the 'raw' body is empty as the data required ('categoryId') is passed as a parameter within the URL.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "eventCategoryId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/events/subcategory/delete": {
      "post": {
        "tags": [
          "EventsSubCategory"
        ],
        "summary": "Events - SubCategory - Delete",
        "description": "This endpoint is titled \"Events - SubCategory - Delete\". Its primary function is to delete a particular sub-category from the events category.\n\nKey details about this endpoint are listed below:\n\n1. Auth Type: This endpoint uses Bearer Token authentication. The specific token required in this case is referred to as a 'sessionId', and it must be of type 'string'.\n\n2. Request Method: The request method used for this endpoint is 'POST'.\n\n3. URL: The specific URL that needs to be hit for accessing this endpoint is \"http://localhost:3000/api/events/subcategory/delete\".\n\n4. Headers: The endpoint includes an empty, disabled default header. If needed, headers such as Content-Type could be added, but be aware that the current configuration does not require any.\n\n5. Body: The body of this request carries raw data. The raw data needs to have three key-value pairs:\n\n    - \"sessionId\" which should correspond to the active session's ID.\n    - \"accountId\" which corresponds to the account ID where the command is to be exercised.\n    - \"subCategoryId\", which corresponds to the ID of the sub-category to be deleted from the events.\n\nIt is important to ensure that the data is properly structured and all fields are filled in correctly before the request is sent to the designated URL.\n\nIn summary, this represents a request to delete an events sub-category using the provided account and session details. The request is executed via POST method, and it requires Bearer Token authorization.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"{\\\"sessionId\\\":\\\"sessionId\\\",\\\"accountId\\\":\\\"accountId\\\",\\\"subCategoryId\\\":\\\"eventSubCategoryId\\\"}\""
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}